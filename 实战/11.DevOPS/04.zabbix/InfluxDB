
1. 安装
$  wget https://dl.influxdata.com/influxdb/releases/influxdb-1.2.2.x86_64.rpm  (下载包) 
$ yum localinstall influxdb-1.2.2.x86_64.rpm  (用yum进行本地安装)
$ vim /etc/influxdb/influxdb.conf (修改配置文件)
------------------------------------------------------------------------------------------
reporting-disabled = true ( 这个要设置真，关闭定时上传数据到influxdata.com)
#bind-address = ":8086"(这个需要自己手动添加，指定http的连接操作端口，默认为8086) 
[admin]
  # Determines whether the admin service is enabled.
  enabled = true （web管理界面，1.1版本以上默认关闭。需要的话，可以手动打开）


  # The default bind address used by the admin service.
  bind-address = ":8083"    （web服务界面的端口）
---------------------------------------------------------------------------------------------------------------

文档：
Usage:
        connect <host:port>   connects to another node specified by host:port
        auth                  prompts for username and password
        pretty                toggles pretty print for the json format
        use <db_name>         sets current database
        format <format>       specifies the format of the server responses: json, csv, or column
        precision <format>    specifies the format of the timestamp: rfc3339, h, m, s, ms, u or ns
        consistency <level>   sets write consistency level: any, one, quorum, or all
        history               displays command history
        settings              outputs the current settings for the shell
        clear                 clears settings such as database or retention policy.  run 'clear' for help
        exit/quit/ctrl+d      quits the influx shell

        show databases                  show database names
        show series from xxx            show series information
        show measurements               show measurement information
        show tag keys from xxx          show tag key information
        show field keys from xxx        show field key information
        SHOW TAG VALUES WITH key = location

        A full list of influxql commands can be found at:
        https://docs.influxdata.com/influxdb/latest/query_language/spec/

支持正则表达式
Regular Expressions
regex_lit           = "/" { unicode_char } "/" .
=~是正则匹配运算符，当左操作数符合右操作数的正则表达式时返回非false值（含义比较广泛）。
具体你可以接收一下返回值，看看。

二，启动influxdb，并使用
## 本人并没有开启web界面，所以这里讲一下命令行的操作。就类似与常用数据库。
$ systemctl start influxdb （启动influxdb）
$ systemctl enable influxdb （设为开机启动）

启动失败查看系统日志 sudo tail /var/log/messages 会发现问题

$ influx ( 进入influxdb )
Connected to http://localhost:8086 version 1.2.2
InfluxDB shell version: 1.2.2
-----------------------------------------------influxdb 的基本操作 -----------------------------
>create database test_db (创建数据库test_db )
>show databases （列出所有数据库）
>drop database test_db （删除数据库）
>use test_db ( 转入test_db数据库下 )
>insert test_table,host=web1 cpu=22,memory=33 ( 创建test_table表，measurements==table(关系型数据库中的) 空格分割TAG和Filed, TAG为带索引的)
>show measurements  （列出所有表）
>drop measyrement test_table （删除表test_able）

1.创建新表并添加数据
InfluxDB没有提供单独的建表语句，可以通过以下方式创建数据库并添加数据。

格式：
insert <tbname>,<tags> <values> [timestamp]    
说明：
tbname : 数据表名称
tags : 表的tag域
values : 表的value域
timestamp ：当前数据的时间戳（可选，没有提供的话系统会自带添加）

示例如下：
> use testdb;
Using database testdb
> insert students,stuid=s123 score=89
> show measurements;
name: measurements
name
----
students

2.series操作
series操作
series表示这个表里面的数据，可以在图表上画成几条线，series主要通过tags排列组合算出来。
show series from weather

3.查询
查询
格式：
select <fields> from <tbname> [ into_clause ] [ where_clause ]              
          [ group_by_clause ] [ order_by_clause ] [ limit_clause ]              
          [ offset_clause ] [ slimit_clause ] [ soffset_clause ]                
说明：
fields : 要查询的字段，查询全部可以用*
tbname : 数据表名称
into_clause : select ... into （可选）
where_clause : where条件域（可选）
group_by_clause : group by相关（可选）
order_by_clause : order by相关（可选）
limit_clause : limit相关（可选）
offset_clause : offset相关（可选）
slimit_clause : slimit相关（可选）
soffset_clause : soffset相关（可选）

select * from table where 条件只能加fileld
=============================================================================================================
特色函数
influxdb函数分为聚合函数，选择函数，转换函数，预测函数等。除了与普通数据库一样提供了基本操作函数外，
还提供了一些特色函数以方便数据统计计算，下面会一一介绍其中一些常用的特色函数。

聚合函数：FILL(), INTEGRAL()，SPREAD()， STDDEV()，MEAN(), MEDIAN()等。
选择函数: SAMPLE(), PERCENTILE(), FIRST(), LAST(), TOP(), BOTTOM()等。
转换函数: DERIVATIVE(), DIFFERENCE()等。
预测函数：HOLT_WINTERS()。

聚合函数：FILL(), INTEGRAL()，SPREAD()， STDDEV()，MEAN(), MEDIAN()等。
1）count()函数
返回一个（field）字段中的非空值的数量。
语法：
SELECT COUNT(<field_key>) FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
SELECT COUNT(water_level) FROM h2o_feet

2）DISTINCT()函数
返回一个字段（field）的唯一值。
语法：
SELECT DISTINCT(<field_key>) FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
SELECT DISTINCT("level description") FROM h2o_feet

3）MEAN() 函数
返回一个字段（field）中的值的算术平均值（平均值）。字段类型必须是长整型或float64。
语法格式：
SELECT MEAN(<field_key>) FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
SELECT MEAN(water_level) FROM h2o_feet

4）MEDIAN()函数
从单个字段（field）中的排序值返回中间值（中位数）。字段值的类型必须是长整型或float64格式。
语法：
SELECT MEDIAN(<field_key>) FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
SELECT MEDIAN(water_level) from h2o_feet

5）SPREAD()函数
返回字段的最小值和最大值之间的差值。数据的类型必须是长整型或float64。
语法：
SELECT SPREAD(<field_key>) FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
SELECT SPREAD(water_level) FROM h2o_feet

6）SUM()函数
返回一个字段中的所有值的和。字段的类型必须是长整型或float64。
语法：
SELECT SUM(<field_key>) FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
SELECT SUM(water_level) FROM h2o_feet

=============================================================================================
选择函数: SAMPLE(), PERCENTILE(), FIRST(), LAST(), TOP(), BOTTOM()等。
1）TOP()函数
作用：返回一个字段中最大的N个值，字段类型必须是长整型或float64类型。
语法：
SELECT TOP( <field_key>[,<tag_key(s)>],<N> )[,<tag_key(s)>|<field_key(s)>] [INTO_clause] FROM_clause [WHERE_clause] [GROUP_BY_clause] [ORDER_BY_clause] [LIMIT_clause] [OFFSET_clause] [SLIMIT_clause] [SOFFSET_clause]
使用示例
> SELECT TOP("water_level",3) FROM "h2o_feet"

2）BOTTOM()函数
作用：返回一个字段中最小的N个值。字段类型必须是长整型或float64类型。
语法：
SELECT BOTTOM(<field_key>[,<tag_keys>],<N>)[,<tag_keys>] FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
使用示例
> SELECT BOTTOM(water_level,3) FROM h2o_feet

3）FIRST()函数
作用：返回一个字段中最老的取值。
语法：
SELECT FIRST(<field_key>)[,<tag_key(s)>] FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
这个语句返回了 在 location为santa_monica条件下，最旧的那个water_level字段的取值和时间。

4）LAST()函数
作用：返回一个字段中最新的取值。
语法：
SELECT LAST(<field_key>)[,<tag_key(s)>] FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]

5）MAX()函数
作用：返回一个字段中的最大值。该字段类型必须是长整型，float64，或布尔类型。
语法：
SELECT MAX(<field_key>)[,<tag_key(s)>] FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
示例：

6）MIN()函数
作用：返回一个字段中的最小值。该字段类型必须是长整型，float64，或布尔类型。
语法：
SELECT MIN(<field_key>)[,<tag_key(s)>] FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]

7）PERCENTILE()函数
作用：返回排序值排位为N的百分值。字段的类型必须是长整型或float64。
百分值是介于100到0之间的整数或浮点数，包括100。
语法：
SELECT PERCENTILE(<field_key>, <N>)[,<tag_key(s)>] FROM <measurement_name> [WHERE <stuff>] [GROUP BY <stuff>]
示例：
> SELECT PERCENTILE(water_level,5),location FROM h2o_feet
=============================================================================================================
变换类函数
函数速查：DERIVATIVE()    DIFFERENCE()    ELAPSED()    MOVING_AVERAGE()   NON_NEGATIVE_DERIVATIVE()   STDDEV()



=============================================================================================================
时序数据库介绍
https://www.jianshu.com/p/a1344ca86e9b

重要概念
influxdb里面有一些重要概念：database，timestamp，field key， field value， field set，tag key，tag value，tag set，measurement， retention policy ，series，point。结合下面的例子数据来说明这几个概念：
name: census
-————————————
time                     butterflies     honeybees     location   scientist
2015-08-18T00:00:00Z      12                23           1         langstroth
2015-08-18T00:00:00Z      1                 30           1         perpetua
2015-08-18T00:06:00Z      11                28           1         langstroth
2015-08-18T00:06:00Z      3                 28           1         perpetua
2015-08-18T05:54:00Z      2                 11           2         langstroth
2015-08-18T06:00:00Z      1                 10           2         langstroth
2015-08-18T06:06:00Z      8                 23           2         perpetua
2015-08-18T06:12:00Z      7                 22           2         perpetua

timestamp
既然是时间序列数据库，influxdb的数据都有一列名为time的列，里面存储UTC时间戳。
field key，field value，field set
butterflies和honeybees两列数据称为字段(fields)，influxdb的字段由field key和field value组成。其中butterflies和honeybees为field key，它们为string类型，用于存储元数据。
而butterflies这一列的数据12-7为butterflies的field value，同理，honeybees这一列的23-22为honeybees的field value。field value可以为string，float，integer或boolean类型。field value通常都是与时间关联的。
field key和field value对组成的集合称之为field set。如下：
butterflies = 12 honeybees = 23
butterflies = 1 honeybees = 30
butterflies = 11 honeybees = 28
butterflies = 3 honeybees = 28
butterflies = 2 honeybees = 11
butterflies = 1 honeybees = 10
butterflies = 8 honeybees = 23
butterflies = 7 honeybees = 22

在influxdb中，字段必须存在。注意，字段是没有索引的。如果使用字段作为查询条件，会扫描符合查询条件的所有字段值，性能不及tag。类比一下，fields相当于SQL的没有索引的列。
tag key，tag value，tag set
location和scientist这两列称为标签(tags)，标签由tag key和tag value组成。location这个tag key有两个tag value：1和2，scientist有两个tag value：langstroth和perpetua。tag key和tag value对组成了tag set，示例中的tag set如下：
location = 1, scientist = langstroth
location = 2, scientist = langstroth
location = 1, scientist = perpetua
location = 2, scientist = perpetua

tags是可选的，但是强烈建议你用上它，因为tag是有索引的，tags相当于SQL中的有索引的列。tag value只能是string类型 如果你的常用场景是根据butterflies和honeybees来查询，那么你可以将这两个列设置为tag，而其他两列设置为field，tag和field依据具体查询需求来定。
measurement
measurement是fields，tags以及time列的容器，measurement的名字用于描述存储在其中的字段数据，类似mysql的表名。如上面例子中的measurement为census。measurement相当于SQL中的表，本文中我在部分地方会用表来指代measurement。
retention policy
retention policy指数据保留策略，示例数据中的retention policy为默认的autogen。它表示数据一直保留永不过期，副本数量为1。你也可以指定数据的保留时间，如30天。
series
series是共享同一个retention policy，measurement以及tag set的数据集合。示例中数据有4个series，如下:



Arbitrary series number
Retention policy
Measurement
Tag set




series 1
autogen
census
location = 1,scientist = langstroth


series 2
autogen
census
location = 2,scientist = langstroth


series 3
autogen
census
location = 1,scientist = perpetua


series 4
autogen
census
location = 2,scientist = perpetua


point
point则是同一个series中具有相同时间的field set，points相当于SQL中的数据行。如下面就是一个point：
name: census
-----------------
time                  butterflies    honeybees   location    scientist
2015-08-18T00:00:00Z       1            30           1        perpetua

database
上面提到的结构都存储在数据库中，示例的数据库为my_database。一个数据库可以有多个measurement，retention policy， continuous queries以及user。influxdb是一个无模式的数据库，可以很容易的添加新的measurement，tags，fields等。而它的操作却和传统的数据库一样，可以使用类SQL语言查询和修改数据。
influxdb不是一个完整的CRUD数据库，它更像是一个CR-ud数据库。它优先考虑的是增加和读取数据而不是更新和删除数据的性能，而且它阻止了某些更新和删除行为使得创建和读取数据更加高效。





