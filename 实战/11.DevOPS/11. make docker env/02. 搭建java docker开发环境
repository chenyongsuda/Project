使用 Docker 搭建前端 Java 开发环境

这篇文章是为了解决前后端开发没有彻底分离的坑，因为我司用的是java，入职第一天就是搭建本地开发环境，看见了多年不见的eclipse的图标出现我的电脑上，我是难过的。后来知道并不是我一个人有此感受。依稀记得有个同学整整一天项目都没跑起来的崩溃感。为了解决这个问题我们尝试了很多方案，但是大大小小都有许多坑。
直到有一天....我坐在地铁上，看着对面的妹子发呆，忽然一道闪电滑过，地铁突然停了！
为什么我突然想不起当天那个妹子长什么样子了~好惆怅。

解决的痛点
免搭建后端开发环境。

开发环境改变只需要改变镜像就能同步更新。

不需要eclipse等IDE工具。

切换开发项目

解决思路
利用docker启动Ubuntu镜像，在容器中搭建好项目需要的开发环境，使用挂载卷将本地代码挂载到容器中，使用容器中的环境编译运行代码，宿主机通过 docker 暴漏出的端口访问容器中的服务，这样前端的开发机上就只需要部署docker就搞定了。

关于docker
了解docker
本文并不打算细讲docker的知识，相关的文章有很多，如果有兴趣可以看 这本书，对于docker的使用我也仅限于此工具的开发，如果有不对的地方还有大家指出来。

加速器
daocloud 加速器

搭建环境
下载和安装好docker之后我们就可以开始了，我们下面讲的都是java，不过其他环境同理。

获取 Ubuntu 镜像。
docker pull ubuntu

完成后执行 docker images 就能看到一个刚刚更新的镜像了。

进入容器
docker run -it ubuntu

安装软件、配置环境变量
首先更新apt-get
apt-get update

接下来就可以使用 apt-get install * 安装你需要的软件了，如果没有就下载安装包自行安装，同时配置好环境变量，这里就不赘述了。

启动服务
进入tomcat目录，启动服务，在浏览器打开 0.0.0.0:8080, 如果没有错的话你会看到该服务器无法访问。这是因为我们刚才启动的服务是在docker内，如果不做一些操作的话我们是无法访问到docker内部的服务的。

所以，我们先退出容器

exit
退出之后执行 docker ps -a，就能看到我们刚才的容器依然还在，可能大多刚接触docker的人都会犯这个错误，以为退出容器之后容器就销毁了，其实不然。

如果我们想再进入这个容器可以执行下面的命令，容器ID请复制自己的。
docker exec -it 容器ID bash

虽然容器还在运行，但是他并没有持久化，为了防止万一，在我们修改容器里面的内容之后尽快持久化。
docker commit 容器ID java
这个命令的意思是将我们容器持久化为一个新的镜像，名字叫java。
启动这个新建的镜像。
docker run -it -p 8080:8080 java

注意看我们的启动命令发生了变化，多了一个 -P 这个命令的意思是将容器内的 8080 端口暴漏到宿主机上。
再次访问 0.0.0.0:8080，我们就能看到那只小花猫了，真可爱。
刚才那个容器还在占用我们的内存怎么办，干掉他。

docker rm 容器ID
至此我们的第一步已经完成了，接下来我们就要集成我们的代码了。

集成代码
我们刚才启动的容器是一个完全的独立的黑盒子，它根本不知道我们的代码再哪里，所以我们就要使用docker的挂载卷让宿主机和容器可以共享目录。
不好意思，我们又要干掉刚才启动的那个容器了。
docker run -it -v /Users/name/web:/opt/root -p 8080:8080 java

我们的启动命令又加入了新成员 -v。这个命令的意思就是将用户根目录下的 web 目录挂在到容器中 /opt/root 目录下
进入目录后我们就能发现web目录下的文件静静的躺在里面，像是沉睡多年的玛丽苏在等待你的呼唤。
开始呼唤吧。

mvn clean install -U -Plocal -DskipTests
一段时间过后我们就会看到打包成功的提示，将war包copy到 tomcat webapps 目录下，就能访问你的项目了。
至此我们的项目终于跑起来了，但是有几个问题。
每次都要跑这么长的命令？好麻烦。
每次改代码都要重新打包，时间很长。
启动日志怎么看？报错了怎么办？
怎么修改前端模板文件不需要重启服务？
基于这些问题，我们就需要写一个脚本来解决了。

shell脚本
脚本将提供下面几个指令
-y 更新maven包-编译-打包-发布-启动tomcat
-p 编译-打包-发布-启动tomcat
-r 重启tomcat
-c 重新编译java文件-发布-启动tomcat
-w 监听vm文件,默认5S同步一次
-l 查看tomcat日志
-h 帮助

# 需要变动的变量
#################################################################
# 环境变量,根据conf目录下选择
 
DEV="local"
#################################################################
# 不需要改动的变量
# war包地址
WAR_URL="/opt/root/target/*.war"
# tomcat 地址
TOM_URL="/usr/share/tomcat7"
# 项目启动地址
TOM_ROOT="${TOM_URL}/webapps"
# 文件监听间隔，单位秒
WT=5
# 拷贝 vm
WC_VM="src/main/webapp/WEB-INF/tpl /usr/share/tomcat7/webapps/ROOT/WEB-INF/"
# 拷贝class
WC_JAVA="target/classes /usr/share/tomcat7/webapps/ROOT/WEB-INF/"
# 通用方法
# 
# 使用新包
function newwar(){
 
    # 删除旧包
    rm -rf ${TOM_ROOT}/*
 
    # 移动war包
    mv ${WAR_URL} ${TOM_ROOT}/ROOT.war
}
# 重启tomcat
function restart(){
    # 关闭已启动程序
    killall -9 java
    # 启动服务
    ${TOM_URL}/bin/startup.sh
    # 输入启动日志
    tail -f ${TOM_URL}/logs/catalina.out
}
# 指令处理
while getopts ":yprcwlh" optname
do
    case "$optname" in
    "y")
        echo "更新jar包"
 
        mvn clean install -U -P${DEV} -DskipTests
        newwar
        restart
        ;;
    "p")
        echo "重新打包"
 
        mvn clean package -P${DEV} -DskipTests
 
        newwar
        restart
        ;;
    "r")
        echo "重启tomcat"
 
        restart
        ;;
    "c")
        echo "重新编译并重启服务"
 
        mvn clean compile -P${DEV} -DskipTests
        cp -R ${WC_JAVA}
        restart
        ;;
    "w")
        echo "开始监听vm文件"
 
        # 监听 VM
        watch -n ${WT} cp -R ${WC_VM}
        ;;
    "l")
        echo "日志"
 
        # 监听 VM
        tail -f ${TOM_URL}/logs/catalina.out
        ;;
    "h")
 
        echo " -y 更新maven包-编译-打包-发布-启动一条龙服务"
        echo " -p 编译打包发布启动一条龙服务"
        echo " -r 重启tomcat"
        echo " -c 重新java文件并部署重启服务"
        echo " -w 监听vm文件,默认5S同步一次"
        echo " -l 查看日志"
        echo " -h 帮助"
        ;;
    esac
    
推广到团队
经过上面三步，我们的工具已经建好了，但是怎么让其他人也能使用起来呢？
docker 提供了云服务，如果我们的镜像足够小就可以将镜像推送到云上供团队其他人下载运行，但是我们的镜像已经超过了1G。。。所以我们就不能使用这种方式了。
docker save java -o ./java.tar

使用上面的命令可以将镜像持久化到本地文件 java.tar，然后通过其他手段进行传输到其他同学的机器上，我们使用AirDrop，几分钟的事情。
docker load -i java.tar

其他同学可以通过这个命令将我们的镜像加载到他的docker中。
再将shell脚本集成到项目根目录中，就可以愉快的使用了。


docker搭建Java开发环境
centos7.2 + Tomcat7 + JDK1.8

步骤如下：
1.获取centos7.2 docker镜像

#通过docker search 软件名 命令获取centosdocker search centos //此时可以看到可用的centos镜像列表#获取centos镜像docker pull centos:7.2#通过docker images 可以查看本地镜像docker images
2.启动容器
容器是在镜像的基础上来运行的，一旦容器启动了，我们就可以登录到容器中，安装自己所需的软件或应用程序。

//启动容器命令 docker run options containsID argument#options参数说明#-i：表示以“交互模式”运行容器#-t：表示容器启动后会进入其命令行#-v：表示需要将本地哪个目录挂载到容器中，格式：-v <宿主机目录>:<容器目录>#--name: 指定容器的名称，如果未指定容器名称则会随机生成一个名称docker run --name JavaWeb -itv /root/software/:/mnt/software/ ff426288ea90 /bin/bash#启动容器docker start JavaWeb#登录容器docker attach JavaWeb
3.安装JDK1.8

#安装wget库sudo yum install wget#进入usr/local/src目录下cd /usr/local/src#获取JDK1.8包wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz#解压jdk-8u161-linux-x64.tar.gztar -zxvf jdk-8u161-linux-x64.tar.gz#重命名为JDK8mv jdk1.8.0_161 jdk8#配置环境变量sudo vim /etc/profile #打开环境变量配置文件#增加下面内容到该文件最后export JAVA_HOME=/usr/local/jdk8export PATH=$JAVA_HOME/bin:$PATH  export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 
#使环境生效source /etc/profile
4.安装Tomcat7

#获取tomcat安装包wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.84/bin/apache-tomcat-7.0.84.tar.gz#解压tomcat安装包tar -zxvf apache-tomcat-7.0.84.tar.gz#重命名为tomcat7mv apache-tomcat-7.0.84  tomcat7#打开环境变量配置文件sudo vim /etc/profile 
#增加下面内容到该文件最后export TOMCAT=/usr/local/tomcat7export PATH=$TOMCAT/bin:$PATH  #使环境生效source /etc/profile
5.编写启动脚本
启动tomcat时必须通过TOMCATHOME/bin/catalina.sh实现，不能使用TOMCAT_HOME/bin/startup.sh启动，否则脚本执行后容器会马上退出。

#创建启动脚本vi /root/run.sh#添加以下内容：#!/bin/bash# Export environment variablesource /etc/profile# Start tomcatsh /usr/local/src/tomcat7/bin/catalina.sh run#添加可执行权限：chmod u+x /root/run.sh
6.构建JavaWeb镜像
Docker构建镜像的两种方法：
1.使用docker commit 命令；
2.使用docker build命令和Dockerfile文件；

docker ps #查看正在运行的容器docker ps -a #查看所有的容器#创建JavaWeb镜像docker commit 738cb51e2236  zhaoheqiang/JavaWeb:0.0.1#查看容器列表docker images #可以发现zhaoheqiang/JavaWeb:0.0.1镜像#运行zhaoheqiang/JavaWeb:0.0.1docker run -d -p 28080:8080 --name javaweb zhaoheqiang/JavaWeb:0.0.1 /root/run.sh
7.测试外部访问28080端口
