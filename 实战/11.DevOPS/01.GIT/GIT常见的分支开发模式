===========================================================================================================
GITFlow分支开发模型

该开发模型很繁琐
主分支 master
开发分支 develop
功能分支 feature
预发布分支  release
bug 分支 fixbug
其它分支 other
1).主分支 master
代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。
Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。

2).开发分支 develop
主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。
这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在Master分支上，对Develop分支进行"合并"（merge）。

3).功能分支 feature
功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。
功能分支的名字，可以采用feature-*的形式命名。

4).预发布分支  release
预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。

5).bug 分支 fixbug
bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。

6).其它分支 other

还有就是其它分支了，大家可以根据需要创建即可……
==============================================================================================================
GitHub Flow 特点：

令master 分支时常保持可以部署的状态
进行新的作业时要从master 分支创建新的分支，新分支名称要具有描述性
在2新建的本地仓库分支中进行提交
在Github 端仓库创建同名分支，定期push
需要帮助、反馈，或者branch已经准备merging时，创建Pull Request，以Pull Request 进行交流
让其他开发者进行审查，确认作业完成后与master分支进行合并（合并的代码一定要测试
与master分支合并后，立刻部署
使用Github Flow 的前提条件：

团队规模最好控制在15-20人之内，具体见 how-github-works
部署作业完全自动化。必须自动化，一天之类需要多次部署
使用部署工具（Capistrano，Mina，Fabric,Webistrano,Strano等），让部署时所需的一系列流程自动化。
通过Web界面进行部署，Capistrano 等部署工具需要命令执行操作，开发者以外的人很难实施部署
Capistrano http://github.com/capistrano/capistrano //Ruby开发的代表性部署工具
Webistrano http://kentaro/webistrano //可以通过Web执行Capistrano的工具
导入开发时注意事项：随着团队人数的增多及成熟度的提高，开发速度会越来越快。往往一个部署尚未完成，
另一名开发者就已经处理完下一个pull request，开始实施下一个部署。
在这种情况下，一旦正式环境出现问题，很难分辨哪个部署造成了影响。为了应对该情况，建议在部署实施过程中通过工具加锁。

=================================================================================================================
阿里的AoneFlow
https://yq.aliyun.com/articles/573549

=================================================================================================================
Gitlab的Flow
