对于git 仓库的初始化操作，有人说用git init ，有人说用git init –bare ，那么我就来说一下这两者的区别吧。 
git init 跟git init –bare 看上去就是后面有无–bare的区别，bare是裸的意思 
1.git init 是初始化一个git仓库，比如新建一个demo1文件夹将它git初始化，

cd demo1
git init
ls -a
发现多了一个.git文件，

cd .git
ls
可以看到里面有很多git的配置文件，而我们推送的文件都会在demo1文件目录下显示，.git文件目录是记录我们进行了哪些操作，我们也可以在demo1下面进行各种git操作，然而我们本地推送的更新，一般不会马上显示在服务端，需要我们手动检出，或者配置一下hooks，具体可以查看我的上一篇博客。 
--------------------- 
作者：宇臾 
来源：CSDN 
原文：https://blog.csdn.net/sinat_34349564/article/details/52487860?utm_source=copy 
版权声明：本文为博主原创文章，转载请附上博文链接！
==========================================================>
        之前用git init初始化服务端的git仓库，在本地推送更新后发现一个问题，当我在本地推送更新到远程仓库后，我在远程仓库也就是服务端查看文件，发现文件并没有更改，然后我git status了一下，发现推送的更新在暂存区，需要我检出更新git checkout -f 或着释放暂存区的更新git stash一下，这样每次更新我都要在服务器端进行检出更新的操作，其实更新已经推送到服务端远程仓库了，如果我将更新推送到另一个分支，然后再服务器端切换到对应的分支，也是可以看到更新的。那么怎么将推送到当前分支的更新马上检出而不用自己在服务器端进行检出操作呢。这里可以使用hooks钩子来设置。 
        先进入到仓库的.git/hooks/文件目录下，然后新建一个post-receive文件，并写入配置信息

        cd .git/hooks
        cat > post-receive
        #!/bin/sh
        unset GIT_DIR
        cd ..
        git checkout -f
        按ctrl+D保存。 
        或者将hooks文件目录下的post-update.sample文件更名为post-update，然后打开文件， 
        在exec git update-server-info这一行代码前面加上一个# 号，即改成

        #exec git update-server-info
        然后再在下面加上

        unset GIT_DIR
        cd ..
        git checkout -f
        保存一下 
        这样我们在本地再推送一次更新，可以在服务端查看，发现文件已经更新了，不用再手动检出更新了。



2.git init –bare是初始化一个裸仓库，比如新建一个demo2文件夹，
cd demo2
git init --bare
ls
就会发现这些生成的文件其实就是.git文件目录下的那些文件，但是当我们想在这个文件目录下进行一些git操作的时候会出现报错： This operation must be run in a work tree。这个操作必须在工作树上面进行，这是因为git init –bare 生成的是一个裸仓库，是没有工作区的，只会记录git提交的历史信息，git log一下是可以看到各个版本信息的，但是没办法进行版本回退或者切换分支的操作，但是有一个好处是可以通过添加hooks钩子在demo2的同级目录下新建一个存放项目源码的文件夹，也就是说将git仓库与项目源码分离，这样推送的更新会马上显示到项目文件上，具体设置方法可以查看这篇博客 
git仓库与项目源码分离

这两者的取舍我觉得还是具体情况具体分析吧，各有优劣。
--------------------- 
作者：宇臾 
来源：CSDN 
原文：https://blog.csdn.net/sinat_34349564/article/details/52487860?utm_source=copy 
版权声明：本文为博主原创文章，转载请附上博文链接！
============================================================>
      之前是将项目源码放到git仓库下面，后面想一下觉得有点麻烦，若是在服务器端切换分支的话是直接将服务器端的项目代码切换到对应的分支下的代码，这个时候若是有人访问网站可能会出现问题，所以我就想有没有办法将git仓库与项目源码分离，不将源码放到git仓库下面，git仓库不存放源码，只做版本控制，后面也确实找到了对应的方法，是用hook钩子，现在说一下具体的配置方法：

      1.在服务器端项目文件根目录下新建一个同级目录，

      例如项目文件是在 /home 目录下的文件名为demo，那么在linux执行下面操作

      cd /home

      mkdir git && cd git    //这里新建一个git文件夹并切换到目录下

      mkdir demo.git  && cd demo.git     //这里新建一个文件夹做git仓库

      git init --bare            //git仓库初始化，--bare的意思是创建裸仓库

      初始化后我们可以看到自动生成一堆文件，

      ls        //查看文件

      cd hooks             //到hooks文件目录下

      cat > post-receive      //按回车输入下面的内容

      #!/bin/sh

      git --work-tree=/home/demo --git-dir=/home/git/demo.git checkout -f /*/home/demo为项目文件的地址，/home/git/demo.git为git仓库地址*/

      输入完成后回车并按ctrl+D保存，然后输入

      chmod +x post-receive

      2.本地

      若是已经有git项目了，直接添加一个仓库地址就行了

      git remote add vps ssh://xxxxx@xxxxxxxx/home/git/demo.git //vps是远程库的名字，xxxxx@xxxxxxxx是服务器地址，后面的是仓库的地址

      以后推送的时候推送到vps这个远程仓库下，就会将更新推送到我们设置的路径，也就是远程项目文件目录

      git push vps master

      这样就可以实现git仓库与项目源码分离了，git仓库只做版本控制，不会影响到项目源文件，我们也可以分离出一个域名用于测试，测试没问题后再将项目更新推送到线上的项目中。
