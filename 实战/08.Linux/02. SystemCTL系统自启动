systemd添加自定义系统服务设置自定义开机启动
1.服务权限
systemd有系统和用户区分；系统（/user/lib/systemd/system/）、用户（/etc/lib/systemd/user/）.一般系统管理员手工创建的单元文件建议存放在/etc/systemd/system/目录下面。

2.创建服务文件
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network.target remote-fs.target nss-lookup.target
 
[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
 
[Install]
WantedBy=multi-user.target
[Unit]
Description : 服务的简单描述
Documentation ： 服务文档
Before、After:定义启动顺序。Before=xxx.service,代表本服务在xxx.service启动之前启动。After=xxx.service,代表本服务在xxx.service之后启动。
Requires：这个单元启动了，它需要的单元也会被启动；它需要的单元被停止了，这个单元也停止了。
Wants：推荐使用。这个单元启动了，它需要的单元也会被启动；它需要的单元被停止了，对本单元没有影响。
[Service]
Type=simple（默认值）：systemd认为该服务将立即启动。服务进程不会fork。如果该服务要启动其他服务，不要使用此类型启动，除非该服务是socket激活型。
Type=forking：systemd认为当该服务进程fork，且父进程退出后服务启动成功。对于常规的守护进程（daemon），除非你确定此启动方式无法满足需求，使用此类型启动即可。使用此启动类型应同时指定 PIDFile=，以便systemd能够跟踪服务的主进程。
Type=oneshot：这一选项适用于只执行一项任务、随后立即退出的服务。可能需要同时设置 RemainAfterExit=yes 使得 systemd 在服务进程退出之后仍然认为服务处于激活状态。
Type=notify：与 Type=simple 相同，但约定服务会在就绪后向 systemd 发送一个信号。这一通知的实现由 libsystemd-daemon.so 提供。
Type=dbus：若以此方式启动，当指定的 BusName 出现在DBus系统总线上时，systemd认为服务就绪。
Type=idle: systemd会等待所有任务(Jobs)处理完成后，才开始执行idle类型的单元。除此之外，其他行为和Type=simple 类似。
PIDFile：pid文件路径
ExecStart：指定启动单元的命令或者脚本，ExecStartPre和ExecStartPost节指定在ExecStart之前或者之后用户自定义执行的脚本。Type=oneshot允许指定多个希望顺序执行的用户自定义命令。
ExecReload：指定单元停止时执行的命令或者脚本。
ExecStop：指定单元停止时执行的命令或者脚本。
PrivateTmp：True表示给服务分配独立的临时空间
Restart：这个选项如果被允许，服务重启的时候进程会退出，会通过systemctl命令执行清除并重启的操作。
RemainAfterExit：如果设置这个选择为真，服务会被认为是在激活状态，即使所以的进程已经退出，默认的值为假，这个选项只有在Type=oneshot时需要被配置。
[Install]
Alias：为单元提供一个空间分离的附加名字。
RequiredBy：单元被允许运行需要的一系列依赖单元，RequiredBy列表从Require获得依赖信息。
WantBy：单元被允许运行需要的弱依赖性单元，Wantby从Want列表获得依赖信息。
Also：指出和单元一起安装或者被协助的单元。
DefaultInstance：实例单元的限制，这个选项指定如果单元被允许运行默认的实例。

3.重载服务
systemctl enable nginx.service
就会在/etc/systemd/system/multi-user.target.wants/目录下新建一个/usr/lib/systemd/system/nginx.service 文件的链接。


4.操作服务
#启动服务
$ sudo systemctl start nginx.service
 
#查看日志
$ sudo journalctl -f -u nginx.service
— Logs begin at 四 2015-06-25 17:32:20 CST. —
6月 25 10:28:24 Leco.lan systemd[1]: Starting nginx – high performance web server…
6月 25 10:28:24 Leco.lan nginx[7976]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
6月 25 10:28:24 Leco.lan nginx[7976]: nginx: configuration file /etc/nginx/nginx.conf test is successful
6月 25 10:28:24 Leco.lan systemd[1]: Started nginx – high performance web server.
 
#重启
$ sudo systemctl restart nginx.service
 
#重载
$ sudo systemctl reload nginx.service
 
#停止
$ sudo systemctl stop nginx.service







===============================================================================================================================
/usr/lib/systemd/system/nginx.service
[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
LimitNOFILE=65536
PIDFile=/data/nginx/nginx.pid
ExecStart=/data/nginx/sbin/nginx -c /data/nginx/conf/nginx.conf
ExecReload=/data/nginx/sbin/nginx -s reload
ExecStop=/data/nginx/sbin/nginx -s stop
User=nginx
PrivateTmp=true

[Install]
WantedBy=multi-user.target

==============================================================================================================================
/usr/lib/systemd/system/tomcat.service
[Unit]
Description=Tomcat Service
After=syslog.targetnetwork.target remote-fs.target nss-lookup.target
 
[Service]
Type=forking
LimitNOFILE=65536
PIDFile=/data/tomcat/bin/tomcat.pid
ExecStart=/data/tomcat/bin/startup.sh
ExecReload=/bin/kill-s HUP $MAINPID
ExecStop=/bin/kill-s QUIT $MAINPID
User=tomcat
PrivateTmp=true
 
[Install]
WantedBy=multi-user.target



重新导入服务刷新服务
systemctl daemon-reload

============================================================================================================
自定义系统服务systemctl java jar

启动脚本xxx-start
#!/bin/sh

export JAVA_HOME=/usr/local/jdk1.8.0_131
export PATH=$JAVA_HOME/bin:$PATH

nohup java -jar /java-service/lib/xxx.jar > /java-service/logs/xxx.log &
echo $! > /var/run/xxx.pid

注意 
JAVA_HOME=/usr/local/jdk1.8.0_131、 
/java-service/lib/xxx.jar、 
/java-service/logs/xxx.log、 
/var/run/xxx.pid

停止脚本xxx-stop
#!/bin/sh
PID=$(cat /var/run/xxx.pid)
kill -9 $PID
echo > /var/run/xxx.pid




注意 
/var/run/xxx.pid

开机自启脚本xxx.service
cd /usr/lib/systemd/system

[Unit]
Description=service for description
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
ExecStart=/java-service/shell/xxx-start
ExecStop=/java-service/shell/xxx-stop
PrivateTmp=true

[Install]
WantedBy=multi-user.target
注意 
ExecStart=/java-service/shell/xxx-start 
ExecStop=/java-service/shell/xxx-stop

然后就可以使用 
systemctl enable xxx 
systemctl stop xxx 
system start xxx

==========================================================================
自制直接用命令在做自启动的时候如下配置
supplier.service 
[Unit]
Description=Supplier Service
After=syslog.targetnetwork.target remote-fs.target nss-lookup.target

[Service]
Type=forking
LimitNOFILE=65536
PIDFile=/tmp/supplierportal.pid
ExecStart=/usr/bin/nohup /usr/java/jdk1.8.0_144/bin/java -jar  /home/xxxxx/sso.war > /home/xxxxx/sso.log 2>&1 &
ExecReload=/bin/kill-s HUP $MAINPID
ExecStop=/bin/kill-s QUIT $MAINPID
User=xxxxx

PrivateTmp=true
 
[Install]
WantedBy=multi-user.target

使用启动命令时候老是卡住. 所以换成Type=simple就好了.正在研究为为什么会这样.

测试如果把一大串java命令放在一个shell文件里
就会报
Feb 15 14:35:35 SWPZ1APPS11 systemd[1]: xxxxxx.service never wrote its PID file. Failing.
Feb 15 14:35:35 SWPZ1APPS11 systemd[1]: Failed to start Supplier Portal Service.

是不是就是如果安装这种方式要设置脚本里面写的PID然后写到这里.这里面再读取.需要脚本里面写.

====================================================================================================
具体知道什么意思了可以看
如果是Forking的话需要提供Forking后的主ID供systemctl读取
如下sudo systemctl status nginx
● nginx.service - The NGINX HTTP and reverse proxy server
   Loaded: loaded (/etc/systemd/system/nginx.service; enabled; vendor preset: disabled)
   Active: active (running) since Fri 2019-02-15 13:12:22 CST; 1h 29min ago
  Process: 24656 ExecStop=/usr/local/nginx/sbin/nginx -s stop (code=exited, status=0/SUCCESS)
  Process: 24701 ExecStart=/usr/local/nginx/sbin/nginx (code=exited, status=0/SUCCESS)
 Main PID: 24702 (nginx)
   CGroup: /system.slice/nginx.service
           ├─24702 nginx: master process /usr/local/nginx/sbin/nginx
           ├─24703 nginx: worker process
           ├─24704 nginx: worker process
           ├─24705 nginx: worker process
           └─24706 nginx: worker process

如果是普通命令的话为simple
sudo systemctl status supplierportal
● supplierportal.service - Supplier Portal Service
   Loaded: loaded (/etc/systemd/system/xxxx.service; enabled; vendor preset: disabled)
   Active: active (running) since Fri 2019-02-15 14:39:55 CST; 18s ago
 Main PID: 561 (java)
   CGroup: /system.slice/supplierportal.service
           └─561 /usr/java/jdk1.8.0_144/bin/java -jar /home/xxxx/sso.war > /home/xxxx/sso.log 2>&1 &
           
如果运行命令就是程序的话执行的时候systemctl就能获取不需要我设置PID告诉他们.


