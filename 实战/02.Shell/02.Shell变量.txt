Shell变量分为全局变量和局部变量,全局又称环境变量
如系统定义变量如登录名 命令路径 家目录 终端类型

所有环境变量必须大写
环境变量可以在/etc/profile /etc/bashrc 或者个人变量.bash_profile .bashrc 比较好的/etc/profile.d/ 这些都是用于进入bash运行,注意不是开机自启动
开机自启动是/etc/rc.local
进入欢迎语句是在
/etc/motd 可以修改欢迎语句

如系统内置的
$HOME $USER $UID $PWD $SHELL $PATH

显示环境变量使用env命令

设置取消环境变量
set unset
unset HOME 注意不带$

打印环境变量 echo & printf

本地变量(自己的规范或者大写不限制)
	生命周期在Shell中使用

普通字符串变量的定义
变量名=value
变量名='value'
变量名="value"
上面都一样

命令定义
变量名=`value`
变量名=$(value)

一般尽量用""表示将内部解析完在输出适合于其中含有变量和命令的子串 而另一个''表示原字符串不会做变量解析

******使用习惯 数字不加引号 其他使用双引号

例子：往一个文件里面连续写东西用cat > file
grep用法 grep "$name" file

函数的变量用local定义
很多可以参考/etc/init.d/functions

脚本题目：
查找某个目录以log结尾的日志中将所有包含hello的都替换成hi
find $path -type f -name "*.log" 查找所有以log结尾的文件
如何替换呢？
替换的方法
sed -i s#hello#hi#g file

有两种方法
第一种查找所有的文件再替换
find $path -type f -name "*.log" | xargs sed -i "s#hello#hi#g"
第二种方法替换掉查找到的文件
sed -i "s#hello#hi#g" $(find $path -type f -name "*.log")

Shell脚本特殊变量
$0 获取脚本的名称:包括脚本的路径
[root@vm01 appl]# sh shells/shell-day2.sh 
shells/shell-day2.sh
[root@vm01 appl]# sh  /appl/shells/shell-day2.sh 
/appl/shells/shell-day2.sh
[root@vm01 shells]# sh `pwd`/shell-day2.sh
/appl/shells/shell-day2.sh

两个截取的命令
basename $0
dirname $0

$1.....9 大于9就要用{}包起来,这些个变量表示执行的参数

seq命令
生成从某个数到某个数的所有数
如下
[root@vm01 shells]# seq 1 8
1
2
3
4
5
6
7
8

默认分隔符为回车 可以指定分隔符
seq -s ' ' 1 8
[root@vm01 shells]# seq -s ' ' 1 8
1 2 3 4 5 6 7 8

shell还有扩展参数如{0..9}
sh shell.sh {0..9}

或者也可以用
sh shell.sh `seq -s " " 1 20`

写个脚本输出$1 到 $20
首先echo `seq -s " " 1 20` > a.sh
然后在头部添加echo就行了
添加使用替换来讲空格替换为空格加$ 

[root@vm01 shells]# cat a.sh 
[root@vm01 shells]# echo `seq -s " " 1 20` > a.sh
[root@vm01 shells]# sed 's# # $#g'  a.sh 
1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20
[root@vm01 shells]# cat a.sh 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

可以看出来其实不加-i 实例内容没替换
所以需要加-i

[root@vm01 shells]# sed -i 's# # $#g' a.sh 
[root@vm01 shells]# cat a.sh 
1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20

通过扩展参数执行如下
[root@vm01 shells]# cat a.sh 
echo $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20
[root@vm01 shells]# sh a.sh {a..z}
a b c d e f g h i a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 b0

或者通过序列
[root@vm01 shells]# sh a.sh `seq -s " " 1 20`
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

***注意seq 后面的替换语句请用单引号

$#表示参数的个数(一般判断参数的个数,来判断这个参数是否是合法等等...)
$*表示所有的参数连成一个字符串
$@获取参数以便传递给其他程序作为参数输入

$#的例子
#/bin/bash
[ $# -ne 2 ] && {
	echo "params not equals 2 please notify"
	exit -1
}

$?表示上一个程序的状态 0表示OK 非零为失败
$! 上一个指令的pid 
$$ 当前指令的pid
[root@vm01 shells]# ls
a.sh  clean.sh  datasource.sh  replacetest  shell-day2.sh  xshell.sh
[root@vm01 shells]# echo $?
0

[root@vm01 shells]# $?
-bash: 0: command not found
[root@vm01 shells]# echo $?
127

学习系统的脚本
/etc/init.d/rpcbind.sh

read命令
语法
read 参数 变量名
p 提示信息
t 超时时间
read -t 5 -p "please input" var

传入多个
read -t 5 -p "please input" var1 var2

echo -n "please input"
read a b
相当如：
read -p "please input" var1 var2

一个while read 的case
while read line只读一行或者最后一行读不到
  今天碰到一个ssh的问题，google之。原因如下：
需要读取一个文本，次文本每一行包含一个IP在while循环中使用ssh，但ssh完第一行后就退出了，如何避免自动读取一行就跳出while循环，此文将详细解释其原因。 
 
    最近在写一个自动更新的shell，可是发现如果在使用while循环从一个文件中读取ip地址，然后访问就只能读取第一行纪录。代码如下： 

while read line;
do
echo *******************************************$LINE
ssh 192.168.10.233 ls 
done < data

但是如果使用for就没有这个问题，非常的奇怪，for的代码如下： 

for i in data;
do
echo *******************************************$LINE
ssh 192.168.10.233 ls 
done < data
难道for和while竟然有这么大的差别，不可能吧。经过一番试验以后发现，原来并不是while的for的差别，而是while中使用重定向机制，data文件中的信息都已经读入并重定向给了整个while语句。所以当我们在while循环中再一次调用read语句，就会读取到下一条记录。问题就出在这里，ssh语句正好回读取输入中的所有东西，下面这个shell能很好的说明这个问题： 
while read line;
do
echo *******************************************$LINE
ssh 192.168.10.233 ls 
done < data

执行这个shell就会发现，ssh中的cat语句会打印出data文件中的其他纪录，这就导致调用玩ssh语句后，输入缓存中已经都被读完了，当read语句再读的时候当然也就读不到纪录，循环也就退出了。改进方法是，将ssh的输入重定向输入： 
while read line;
do
echo *******************************************$LINE
ssh 192.168.10.233 ls < /dev/null
done < data
这样，在while语句中也能顺利的执行ssh语句了。linux的重定向还真复杂。



其实还有更加简单的方法就是:在while read line时，使用ssh 的时候加入参数 -n

ssh 参数详解：

主要参数说明：

-l 指定登入用户

-p 设置端口号

-f 后台运行，并推荐加上 -n 参数

-n 将标准输入重定向到 /dev/null，防止读取标准输入

-N 不执行远程命令，只做端口转发

-q 安静模式，忽略一切对话和错误提示

-T 禁用伪终端配置
而最后一行读不到的原因也很奇葩，因为是最后一行没有回车到下一行


同样百度中的解决方案
1、while使用重定向机制，ip.txt文件中的信息都已经读入并重定向给了整个while语句。所以当我们在while循环中再一次调用read语句，
就会读取到下一条记录。问题就出在这里，ssh语句正好回读取输入中的所有东西。为了禁止ssh读所有东西增加一个< /dev/null，将ssh 的输入重定向输入
while read ips;
do
        echo $ips;
        upt=`ssh root@${ip1} uptime < /dev/null;`;
        echo $upt;
done < ip.txt;

2、用for
for ips in `cat ip.txt`; do
       echo ${ips};
       upt=`ssh root@${ips} uptime`;
       echo $upt;
done

案例：使用cat和read
cat的几大作用
1.输出文件
2.创建编辑新文件 cat > file  追加cat >> file
3.非交互式追加类似cat >> file << EOF
4.清空 cat > file

使用cat代替echo
cat <<END
1. UNIX
2. WINS
END

"END"是一对，将中间的部分送到前面的命令中
这种显示信息的方法,在shell中,叫"HERE文档"








