1. shell是什么
   shell是一个应用进程
2. shell的变量范围
   本地变量
    作用范围：本shell
   环境变量
    作用范围：本shell和子shell
   
3. shell定义
   本地变量
         变量赋值 name=value
         变量引用 ${name}, $name
              强引用 ''
              弱引用 ""
         查看变量 set
         取消变量 unset
         定义只读变量 readonly name=value
                     declare -r name=value
   
   环境变量
         1. export name=value
         2. name=value 
            export name
         3. declare -x name=value
         4. name=value 
            declare -x 
    bash许多内置环境变量为全大写.
   
   3.1 SHELL 为弱类型,SHELL变量类型为字符型和数字型(无浮点型)默认变量都解释为字符型. 
         
         算术运算：
        +, -, *, /, %, **
         
        let  VAR=expression
        VAR=$[expression]        这个比较常用
        VAR=$((expression))
        VAR=$(expr argu1 argu2 argu3) 这里其实算数计算为expr argu1 argu2 argu3 通过命令运算符$()取到命令标准输出
         
        注意：有些时候乘法符号需要转义；
         
        增强型赋值：
            变量做某种算术运算后回存至此变量中；
                let i=$i+#
                let i+=#
                 
            +=，-=，*=, /=, %=
             
            自增：
                VAR=$[$VAR+1]
                let  VAR+=1
                let  VAR++
                 
            自减：
                VAR=$[$VAR-1]
                let  VAR-=1
                let  VAR--
                 
    练习：
        1、写一个脚本
            计算/etc/passwd文件中的第10个用户和第20个用户的id号之和；
                id1=$(head -10  /etc/passwd | tail -1  | cut  -d:  -f3)
                id2=$(head -20   /etc/passwd | tail -1  | cut  -d:  -f3)
                 
             
        2、写一个脚本
            计算/etc/rc.d/init.d/functions和/etc/inittab文件的空白行数之和；
             
                grep "^[[:space:]]*$"   /etc/rc.d/init.d/functions | wc -l
     条件测试：
        判断某需求是否满足，需要由测试机制来实现；
         
        如何编写测试表达式以实现所需的测试：
            (1) 执行命令，并利用命令状态返回值来判断；
                0：成功
                1-255：失败
            (2) 测试表达式
                test  EXPRESSION
                [ EXPRESSION ]
                [[ EXPRESSION ]]
                 
                注意：EXPRESSION两端必须有空白字符，否则为语法错误；
                 
        bash的测试类型：
            数值测试
            字符串测试
            文件测试
             
            数值测试：数值比较
                -eq：是否等于； [ $num1 -eq $num2 ]
                -ne：是否不等于；
                -gt：是否大于；
                -ge：是否大于等于；
                -lt：是否小于；
                -le：是否小于等于；
                 
            字符串测试：
                ==：是否等于；
                >：是否大于；
                <：是否小于；
                !=：是否不等于；
                =~：左侧字符串是否能够被右侧的PATTERN所匹配；
                 
                -z "STRING"：判断指定的字串是否为空；空则为真，不空则假；
                -n "STRING"：判断指定的字符串是否不空；不空则真，空则为假；
                 
                注意：
                    (1) 字符串要加引用；
                    (2) 要使用[[ ]]；
                     
            文件测试：
                存在性测试
                    -a  FILE
                    -e  FILE
                        文件的存在性测试，存在则为真，否则则为假；
                存在性及类型测试
                    -b  FILE：是否存在并且为 块设备 文件；
                    -c  FILE：是否存在并且为 字符设备 文件；
                    -d  FILE：是否存在并且为 目录文件；
                    -f  FILE：是否存在并且为 普通文件；
                    -h  FILE或 -L  FILE：是否存在并且为 符号链接文件；
                    -p FILE：是否存在且为 命名管道文件；
                    -S  FILE：是否存在且为 套接字文件；
                文件权限测试：
                    -r  FILE：是否存在并且 对当前用户可读；
                    -w  FILE：是否存在并且 对当前用户可写；
                    -x  FILE：是否存在并且 对当前用户可执行；
                特殊权限测试：
                    -u  FILE：是否存在并且 拥有suid权限；
                    -g  FILE：是否存在并且 拥有sgid权限；
                    -k  FILE：是否存在并且 拥有sticky权限；
                文件是否有内容：
                    -s  FILE：是否有内容；
                时间戳：
                    -N FILE：文件自从上一次读操作后是否被修改过；
                从属关系测试：
                    -O  FILE：当前用户是否为文件的属主；
                    -G  FILE：当前用户是否属于文件的属组；
                双目测试：
                    FILE1  -ef  FILE2：FILE1与FILE2是否指向同一个文件系统的相同inode的硬链接；
                    FILE1  -nt  FILE2：FILE1是否新于FILE2；
                    FILE1  -ot  FILE2：FILE1是否旧于FILE2；
                     
            组合测试条件：
                逻辑运算：
                    第一种方式：
                        COMMAND1 && COMMAND2
                        COMMAND1 || COMMAND2
                        ! COMMAND
                         
                        [ -O FILE ] && [ -r FILE ]
                         
                    第二种方式：
                        EXPRESSION1  -a  EXPRESSION2
                        EXPRESSION1  -o  EXPRESSION2
                        ! EXPRESSION
                         
                        [ -O FILE -a -x FILE ]
                         
                练习：将当前主机名称保存至hostName变量中；
                    主机名如果为空，或者为localhost.localdomain，则将其设置为www.magedu.com；
                     
                    hostName=$(hostname)
                     
                    [ -z "$hostName" -o "$hostName" == "localhost.localdomain" -o "$hostName" == "localhost" ] && hostname www.magedu.com                  
                     
        脚本的状态返回值：
            默认是脚本中执行的最后一条件命令的状态返回值；
            自定义状态退出状态码：
                exit  [n]：n为自己指定的状态码；
                    注意：shell进程遇到exit时，即会终止，因此，整个脚本执行即为结束；
                     
    向脚本传递参数：
        位置参数变量
         
        myscript.sh  argu1 argu2
            引用方式：
                $1,  $2, ..., ${10}, ${11}, ...
                 
            轮替：
                shift  [n]：位置参数轮替；
                 
        练习：写一脚本，通过命令传递两个文本文件路径给脚本，计算其空白行数之和；
             
            #!/bin/bash
            #
            file1_lines=$(grep "^$" $1 | wc -l)
            file2_lines=$(grep "^$" $2 | wc -l)
 
            echo "Total blank lines: $[$file1_lines+$file2_lines]" 
             
    特殊变量：
        $0：脚本文件路径本身；
        $#：脚本参数的个数；
        $*：所有参数
        $@：所有参数
 
    过程式编程语言的代码执行顺序：
        顺序执行：逐条运行；
        选择执行：
            代码有一个分支：条件满足时才会执行；
            两个或以上的分支：只会执行其中一个满足条件的分支；
        循环执行：
            代码片断（循环体）要执行0、1或多个来回；
             
        选择执行：
            单分支的if语句：
                if  测试条件
                then
                    代码分支
                fi
             
            双分支的if语句：
                if  测试条件; then
                    条件为真时执行的分支
                else
                    条件为假时执行的分支
                fi
                 
        示例：通过参数传递一个用户名给脚本，此用户不存时，则添加之；
            #!/bin/bash
            #
            if ! grep "^$1\>" /etc/passwd &> /dev/null; then
                useradd $1
                echo $1 | passwd --stdin $1 &> /dev/null
                echo "Add user $1 finished."
            fi 
             
            #!/bin/bash
            #
            if [ $# -lt 1 ]; then
                echo "At least one username."
                exit 2
            fi
 
            if ! grep "^$1\>" /etc/passwd &> /dev/null; then
                useradd $1
                echo $1 | passwd --stdin $1 &> /dev/null
                echo "Add user $1 finished."
            fi     
                 
            #!/bin/bash
            #
            if [ $# -lt 1 ]; then
                echo "At least one username."
                exit 2
            fi
 
            if grep "^$1\>" /etc/passwd &> /dev/null; then
                echo "User $1 exists."
            else
                useradd $1
                echo $1 | passwd --stdin $1 &> /dev/null
                echo "Add user $1 finished."
            fi         
             
        练习1：通过命令行参数给定两个数字，输出其中较大的数值；
            #!/bin/bash
            #
            if [ $# -lt 2 ]; then
                echo "Two integers."
                exit 2
            fi
 
            if [ $1 -ge $2 ]; then
                echo "Max number: $1."
            else
                echo "Max number: $2."
            fi
 
             
            #!/bin/bash
            #
 
            if [ $# -lt 2 ]; then
                echo "Two integers."
                exit 2
            fi
 
            declare -i max=$1
 
            if [ $1 -lt $2 ]; then
                max=$2
            fi
 
            echo "Max number: $max."
                     
        练习2：通过命令行参数给定一个用户名，判断其ID号是偶数还是奇数；
        练习3：通过命令行参数给定两个文本文件名，如果某文件不存在，则结束脚本执行；
            都存在时返回每个文件的行数，并说明其中行数较多的文件；
         
         
    练习：
        1、创建一个20G的文件系统，块大小为2048，文件系统ext4，卷标为TEST，要求此分区开机后自动挂载至/testing目录，且默认有acl挂载选项；
            (1) 创建20G分区；
            (2) 格式化：
                mke2fs -t ext4 -b 2048 -L 'TEST' /dev/DEVICE
            (3) 编辑/etc/fstab文件
            LABEL='TEST'    /testing    ext4    defaults,acl    0 0
 
        2、创建一个5G的文件系统，卷标HUGE，要求此分区开机自动挂载至/mogdata目录，文件系统类型为ext3；
 
        3、写一个脚本，完成如下功能：
            (1) 列出当前系统识别到的所有磁盘设备；
            (2) 如磁盘数量为1，则显示其空间使用信息；
                否则，则显示最后一个磁盘上的空间使用信息；
                if [ $disks -eq 1 ]; then
                    fdisk -l /dev/[hs]da
                else
                    fdisk -l $(fdisk -l /dev/[sh]d[a-z] | grep -o "^Disk /dev/[sh]d[a-]" | tail -1 | cut -d' ' -f2)
                fi
4.多命令一起执行
  ~]# COMMAND01;COMMAND02;COMMAND03
  

5.逻辑运算
   真 (true,yes,on,1)
   假 (false,no,off,0)
   
   与     &&
   或     ||
   非     ！
   异或   ^
   
   运算符的短路法则   COMMAND01 && COMMAND02 第一个命令失败第二个不会执行
                     COMMAND01 || COMMAND02 第一个命令失败第二个就会执行
6.shell高级用法
   参考: https://www.jianshu.com/p/7822b6382f15
   1.if语句
      1.1.回顾

      在运行脚本前，我们一般先对脚本的语法进行检查，如果脚本有bug，我们再调试脚本；
      （1）语法检查：bash -n 脚本路径
      （2）脚本调试：bash -x 脚本路径

      1.2.过程式编程语言的执行流程

      顺序执行
      选择执行
      循环执行
      选择执行

      1.2.1.&&，||
      command1 && command2：如果command1正确，也执行command2；如果command1不正确，不执行command2
      command1 || command2：如果command1正确，不执行command2；如果command1不正确，执行command2

      1.2.2.if语句

      if单分支语句；
      if多分支语句
      if嵌套语句
      （1）if 多分支语句格式（注意：多个分支只会执行一个，执行首先为真的分支）

      if  [ 条件1 ];then
              条件1为真执行这里的代码
      elif [ 条件2 ];then
              条件2为真执行这里的代码
      elif [ 条件3 ];then
              条件3为真执行这里的代码
      ......
      elif [ 条件n ];then
              条件n为真执行这里的代码
      else
              如果所有的条件都不满足时，执行这里的代码
      fi


      （2）if嵌套语句格式

      if [ 条件 ];then
          if [ 条件 ];then
              执行这里的代码
          fi
      fi
      if [ 条件 ];then
          if [ 条件 ];then
              执行这里的代码
          fi
      else
          if [ 条件 ];then
              执行这里的代码
          fi
      fi

      1.3.示例

      1.通过脚本参数传递一个文件路径给脚本，判断此文件的类型；

      #!/bin/bash
      #
      if [ $# -lt 1 ];then
          echo "A argument is needed."
          exit 1
      fi

      if ! [ -e $1 ];then
          echo "No such file or directory."
          exit 2
      fi

      if [ -f $1 ];then
          echo "Common file"
      elif [ -d $1 ];then
          echo "Directory"
      elif [ -L $1 ];then
          echo "Symbolic link"
      elif [ -b $1 ];then
          echo "block special file"
      elif [  -c $1 ];then
          echo "character special file"
      elif [  -S $1 ];then
          echo "Socket file"
      else
          echo "Unknow"
      fi


      2.写一个脚本
      （1）传递一个参数给脚本，此参数为用户名 ；
      （2）根据其ID号来判断用户类型：0：管理员 ，1-499：系统用户，500+：为登入用户, 输出用户是那种类型的用户；

      #!/bin/bash
      #（1）传递一个参数给脚本，此参数为用户名
      # (2）根据其ID号来判断用户类型：0：管理员 ，1-999：系统用户，1000+：为登入用户

      if [ $# -lt 1 ]; then
          echo "A argument is needed."
          exit 1
      fi
      # 如何输入的用户名存在
      # 注意通过命令来判断成功与否不能加[]
      if id -u $1 &>/dev/null;then
          userid=$(id -u $1)
          if [ $userid -eq 0 ];then
              echo "Administrator"
          elif [ $userid -gt 1 -a $userid -lt 499 ];then
              echo " System user"
          elif [ $userid -ge 500 ];then
              echo "Login user"
          fi
      else
          echo "NO such user."    
      fi


      3.写一个脚本
      （1）列出如下菜单给用户
      disk) show disks info
      mem)show memory info
      cpu)show cpu info
      *)quit
      （2）提示用户给出自己的选择，而后显示对应其选择的相应系统信息

      #!/bin/bash
      cat << EOF
      disk) show disks info
      mem)show memory info
      cpu)show cpu info
      *)quit
      EOF

      read -p "Please input your option:" option

      # 如果用户输入的是大写,直接将大写转变为小写
      option=$(echo $option | tr [A-Z] [a-z])

      if [ $option == "disk" ]; then
          fdisk -l
      elif [ $option == "mem" ]; then
          free -m
      elif [ $option == "cpu" ]; then
          lscpu
      elif [ $option == "*" ]; then
          exit 1
      else
          echo "Wrong option"
      fi

      2.循环语句
      2.1.bash的循环分类：

      for循环
      while循环
      until循环

      2.1.1.for 循环
      1.两种格式

      第一种格式：遍历列表
      第二种格式：控制变量

      （1）遍历列表
      for 变量 in 列表; do
          循环体
      done


      进入条件：只要列表中有元素，即可进入循环
      退出循环：列表中的元素遍历完成
      列表生成的方式

      1）直接取出 
          例如： user1 user2 user3
      2）整数列表 
          例如 {1..100}
          例如  `seq 1 2 100`  注意：中间的2表示步长
      3）返回列表的命令
          `ls /var/log/`
      4）glob
          例如： /var/log/*
      5）变量引用，如：@* ,

      示例

      示例1：

      #!/bin/bash
      for username in user1 user2 user3;do
          if id $username &>/dev/null;then
              echo "$username is already exists."
          else    
              useradd $username
              echo "Add &username success"
      done


      示例:2：求100内所有正整数之和；

      #!/bin/bash
      #
      declare -i sum=0

      for i in {1..100}; do
          sum=$[ $sum+$i ]
      done

      echo "$sum"  

      示例3：列出/var/log/目录下所有文件的类型；
      #!/bin/bash
      # 
      for option in /var/log/*; do

          if [ -f $option ];then
              echo "$option is Common file"
          elif [ -d $option ];then
              echo "$option is Directory"
          elif [ -L $option ];then
              echo "$option is Symbolic link"
          elif [ -b $option ];then
              echo "$option is block special file"
          elif [  -c $option ];then
              echo "$option is character special file"
          elif [  -S $option ];then
              echo "$option is Socket file"
          else
              echo "Unknow"
          fi
      done

      练习

      练习1：分别求100以内所有偶数之和，奇数之和；

      #!/bin/bash
      # 
      declare -i oven=0
      declare -i odd=0

      for i in {1..100}; do
          count=$[ $i % 2 ]

          if [[ $count == 0 ]]; then
              oven=$[ $oven + $i ]
          else
              odd=$[ $odd + $i ]
          fi
      done

      echo "oven is $oven"
      echo "odd is $odd"     


      练习2：计算当前用户的id之和；

      #!/bin/bash
      # 
      declare -i idcount=0
      userRow=$(wc -l /etc/passwd|cut -d" " -f1)

      # 这里不能使用{}，作为列表，用seq：for i in `seq 1 $userRow`; do
      for i in $(seq 1 $userRow); do
          userName=$(cut -d: -f1 /etc/passwd|sed -n "$i"p)
          idcount=$[ $idcount + $(id -u $userName) ]
      done

      echo "$idcount"


      练习3：通过脚本参数传递一个目录，计算所有的文本文件的行数之和，并说明文件的总数；

      #/bin/bash
      #
      if [[ $# < 1 ]];then
          echo "A argument is needed."
          exit 1
      fi

      declare -i fileCounts=0
      declare -i rowsCounts=0

      # 文件数
      fileCounts=$( find $1 -type f | wc -l )

      for i in `seq 1 $fileCounts`; do
          #这里的egrep其实可以不要，也可以取出行数
          rowCount=$(find $1 -type f -exec wc -l {} \; | cut -d" " -f1 | sed -n "$i"p)
          rowsCounts=$[ $rowsCounts + $rowCount ]
      done
      echo "fileCounts is $fileCounts , rowsCounts is $rowsCounts"

      （2）控制变量
      for((i=1;i<10;i++));do
          进入循环代码
      done

      2.1.2.while 循环
      格式
      while CONDITION ; do 
      循环体 
      循环控制变量的修正表达式 
      done 


      进入条件：CONDITION测试为“真”
      退出条件：CONDITION测试为“假”

      示例

      示例1：求100以内所有正整数之和；

      #!/bin/bash
      #
      declare -i sum=0
      declare -i i=1

      while [ $i -le 100 ]; do
          sum=$[ $sum+$i ]
          let i++
      done

      echo "sum is $sum"

      2.1.3.until循环
      格式
      until CONDITION ; do 
      循环体 
      循环控制变量 
      done 


      进入条件：CONDITION测试为“假”
      退出条件：CONDITION测试为“真”

      示例

      示例1：求100以内所有正整数之和

      #!/bin/bash
      #
      declare -i sum=0
      declare -i i=1

      until [ $i -gt 100 ];do
          sum=$[ $sum+$i ]
          let i++
      done
      echo "sum to $sum"

      练习

      练习1：分别使用while for until实现，求100以内所有的偶数之和，100以内奇数之和；

      #!/bin/bash
      # 
      declare -i oven=0
      declare -i odd=0

      #for循环
      for i in  {1..100}; do
          count=$[ $i%2 ]
          if [ $count -eq 0 ]; then
              oven=$[ $oven+$i ]
          else
              odd=$[ $odd+$i ]
          fi
      done

      echo "odd is $odd"
      echo "oven is $oven"
      oven=0
      odd=0
      i=1

      #while循环
       while [ $i -le 100 ]; do
          count=$[ $i%2 ]
          if [ $count -eq 0 ]; then
              let oven+=$i
          else
              let odd+=$i
          fi
          let i++
       done

      echo "odd is $odd"
      echo "oven is $oven"
      oven=0
      odd=0
      i=1

      #until循环
      until [ $i -gt 100 ]; do
          count=$[ $i%2 ]
          if [ $count -eq 0 ]; then
              let oven+=$i
          else
              let odd+=$i
          fi
          let i++
      done

      echo "odd is $odd"
      echo "oven is $oven"


      练习2：创建9个用户，user101-user109；密码同用户名, 如果这些用户存在就删除，不存在就创建；

      #!/bin/bash

      for i in `seq 1 10`;do
              if id user10"$i" &> /dev/null;then
                      userdel -r user10"$i"
              else
                      useradd user10"$i"
                      echo "user10$i" | passwd --stdin user10"$i" &> /dev/null
                      echo "create user user10$i"
              fi
      done


      练习3：打印九九乘法表

      #!/bin/bash
      # 注意：这里的echo 的 -n选项表示不换行
      for((i=1;i<9;i++));do
          for((j=1;j<=$i;j++));do
              echo -n "$j X $i = $[ $j*$i ]  "
          done
          echo
      done


      练习4：打印逆序的九九乘法表

      #!/bin/bash
      #

      declare -i k=9
      while [ $k -ge 1 ]; do
              for i in `seq 1 $k| sort -n -r`;do
                  echo -n "$i X $k = $[ $i*$k ]  "
              done
              echo ""
              let k--
      done

      3.循环控制语句

      continue：跳出本次循环，进入下一轮循环；
      break：跳出整个循环；
      sleep：程序睡眠一个时间段；

      死循环：条件为true，永远为死循环
      3.1.continue语句
      格式
      while  [ 条件1 ]; do
          满足条件执行这里的代码
          if [ 条件2 ]; then
              # 跳出当前循环进入下一轮循环
              continue
          fi
          满足条件执行这里的代码
      done

      示例：

      求100以内所有的偶数之和;

      #/bin/bash
      # 
      declare -i evensum=0
      for i in {1..100}; do
          if [ $[ $i%2 ] -eq 1 ];then
              continue
          fi
          let evensum+=$i
      done
      echo "evensum is $evensum"

      #/bin/bash
      # 
      declare -i evensum=0
      declare -i i=0
      while [ $i -lt 100 ]; do
              let i++
          if [ $[ $i%2 ] -eq 1 ];then
              continue
          fi
          let evensum+=$i
      done
      echo "evensum is $evensum"

      3.2.break ：直接跳出整个循环
      格式
      while [条件1]; do
          执行这里的代码
          if [条件2]; then
              break
          fi
          执行这里的代码
      done


      死循环：如何创建死循环

      while true;do
          循环体
      done


      退出方式：某个测试条件满足的时候，让循环体执行break命令就是

      示例：

      计算100以内奇数之和

      #/bin/bash
      # description
      # author
      declare -i oddsum=0
      declare -i i=1
      while true; do
          let oddsum=$oddsum+$i
          let i=$i+2
          if [ $i -gt 100 ];then
              break
          fi
      done
      echo "oddsum is $oddsum"

      3.3.sleep命令
      示例：

      每隔3秒钟到系统上获取已经登入的用户的信息，其中，如果sb用户登入了系统，则给QQ发送邮件，主题为“sb user is login”，并退出;

      #/bin/bash
      #
      while true; do
            if who | grep "^logstash\>" &> /dev/null; then
                   break;
            fi
            sleep 3
      done

      echo "$(date +"%F %T")logstash logged on" >> /tmp/users.log

      #/bin/bash
      #
      until who | grep "^logstash\>" &> /dev/null; do
            sleep 3
      done
       echo "$(date +"%F %T")logstash logged on" >> /tmp/users.log

      4.while和for循环的特殊用法
      4.1.while循环的特殊用法（遍历文件的行）
      格式
      while read VARIABLE;do
          循环体
      done < /PATH/TO/FILE

      意思是：依次读取/PATH/TO/FILE文件中的每一行，且将其赋值给VARIABLE变量
      示例：

      找出ID号为偶数的用户，显示其用户名、ID、及默认的shell；

      #/bin/bash
      # 
      while read line; do

              ID=$(echo $line|cut -d: -f3)
              if [ $[ $ID%2 ] -eq 0 ];then
                      username=$(echo $line | cut -d: -f1)
                      shell=$(echo $line | cut -d: -f7)
              echo "username is $username, ID is $ID , shell is $shell"
              fi
      done < /etc/passwd

      4.2.for循环的特殊用法
      格式
      for((控制变量初始化；条件判断表达式；控制变量修正语句))；do
          循环体
      done

      示例：

      示例1：1到100的和

      #/bin/bash
      # 

      declare -i sum=0

      for((i=1;i<=100;i++));do
              let sum+=$i
      done
      echo "sum is $sum"


      示例2：打印九九乘法表

      #/bin/bash
      # 
      for((i=1;i<=9;i++));do
              for((j=1;j<=i;j++));do
                      echo -ne "${j}X${i}=$[ ${j}*${i} ]\t"
              done
              echo
      done

      5. case语句
      语法格式：
       case $VARAIBLE in
             PAT1)
                  分支1
                   ;;
             PAT2)
                   分支2
                   ;;
                  ...
               *)
                   分支n
                   ;;
      esac              

      case支持glob风格的通配符：
      *：任意长度的任意字符；
      ？：任意单个字符；
      []：任意单个字符；
      a|b：a或b；

      注意：

      （1）每一个分支的两个分号一定不能少，如果没有两个分号，那么每一个case 的分支都会执行
      （2）虽然这里的PAT可以只用模式匹配，但是只是支持glob模式的匹配，有：* ? [ ] [^ ] a|b 这几种方式

      示例：显示一个菜单给用户
      cpu)display cpu information
      mem）display memory information
      disk）display disk information
      quit)quit


      （1）提示用户给出自己的选择
      （2）正确的选择给出相应的信息，否则，提示用户，让用户重新选择正确的选项，直到用户选择正确为止

      #!/bin/bash
      #
      cat << EOF
      cpu)display cpu information
      mem）display memory information
      disk）display disk information
      quit)quit
      =============================
      EOF

      read -p "Enter your option:" option

      # 这里的while，通过read命令循环输入option，使得循环可以继续进行
      while [ "$option" != "cpu" -a "$option" != "mem" -a "$option" != "disk" -a "$option" != "quit" ]; do
          echo "please input cpu , mem , disk , quit "
          read -p "Enter your option:" option
      done

      if [ "$option" == "cpu" ];then
          lscpu
      elif [ "$option" == "mem" ];then
              free -m
      elif [ "$option" == "disk" ];then
              fdisk -l /dev/sd[a-z]
      elif [ "$option" == "quit" ];then
              echo "quit"
              exit 0
      fi


      将上述题目if else示例改写为case的判断，会使得代码的可读性增强

      #/bin/bash
      # 

      cat << EOF
      cpu)display cpu information
      mem）display memory information
      disk）display disk information
      quit)quit
      =============================
      EOF

      read -p "Enter your option:" option

      # 这里的while，通过read命令循环输入option，使得循环可以继续进行
      while [ "$option" != "cpu" -a "$option" != "mem" -a "$option" != "disk" -a "$option" != "quit" ]; do
          echo "please input cpu , mem , disk , quit "
          read -p "Enter your option:" option
      done

      case $option in
      cpu)
              lscpu ;;
      mem)
              free -m ;;
      disk)
              fdisk -l /dev/sd[a-z] ;;
      *)
              echo "quit"
              exit 0 ;;
      esac

      示例：写一个服务框架脚本；
      $lockfile，值/var/lock/subsys/SCRIPT_NAME

      （1）此脚本可接受start，stop，restart，status四个参数之一；
      （2）如果参数非此四者，则提示使用帮助后退出；
      （3）start，则创建lockfile，并显示启动；stop则删除lockfile，并显示停止；restart，则先删除此文件再创建此文件，而后显示重启完成；status，如果lockfile存在，则显示running，否则，则显示为stopped.

       #!/bin/bash
      #
      # chkconfig: - 50 50
      # description: test service script
      prog=$(basename $0)
      lockfile=/var/lock/subsys/$prog
      case $1 in
      start)
            if [ -f $lockfile ]; then
                    echo "$prog is running yet."
            else
                    touch $lockfile
                    [ $? -eq 0 ] && echo "start $prog finshed."
            fi
            ;;
      stop)
            if [ -f $lockfile ]; then
                   rm -f $lockfile
                   [ $? -eq 0 ] && echo "start $prog finshed."
            else
                 echo "$prog is running yet."
            fi
            ;;
      restart)
            if [ -f $lockfile ]; then
                    rm -f $lockfile
                    touch $lockfile
                    echo "start $prog finshed."
            else
                    touch -f $lockfile
                    echo "start $prog finshed."
            fi
            ;;
      status)
            if [ -f $lockfile ]; then
                    echo "$prog is running yet."
            else
                    echo "$prog is stopped."
            fi
            ;;
      *)
            echo "Usage:$prog {start|stop|restart|status}"
      esac

      6.函数：代码重用

      模块化编程
      结构化编程
      注意：定义函数的代码段不会自动执行，在调用时执行，所谓调用函数，在代码中给定函数名称即可，函数名出现的任何位置，在代码执行时候，都会自动替换为函数代码;

      6.1.语法格式：
      语法一：
       function f_name{
             函数体
        }

      语法二：
      f_name(){
           函数体
      }


      函数的生命周期：每次被调用时，被创建，返回时，终止
      其状态返回结果为函数体中运行的最后一条命令的状态结果
      自定义状态返回值，需要使用：return

      return [0-255] 
          0: 成功
          1-255：失败

      6.2.示例：

      示例1：给定一个用户名，取得用户名的ID号，和默认的shell

      #!/bin/bash
      #

      userinfo() {
          if id "$username" &> /dev/null; then
              grep "^$username\>" /etc/passwd | cut -d: -f3,7
          else
              echo "No such user."
          fi 
      }

      username=$1
      userinfo

      username=$2
      userinfo

      练习：
      写一个服务框架脚本名为create_file，接受start 、stop、 restart、 status 四个参数之一（这次用函数实现）

      （1）：如果参数非此四者，则提示使用帮助后退出
      （2）：如果传递start参数，则在/var/log目录下创建一个与脚本名相同的文件，并显示启动。
      （3）：如果传递stop参数，就在/var/log目录下删除一个与脚本名相同的文件 ，并显示停止。
      （4）：如果传递restart参数，就先删除再创建此文件，而后显示重启完成。
      （5）：如果传递status参数， 如果文件存在，则显示running， 否则显示为stopped

      #!/bin/bash
      #
      # chkconfig: - 50 50
      # description: test service script
      #
      prog=$(basename $0)
      FILE=/var/log/$prog

      start() {
          if [ -f $FILE ]; then
              echo "$prog is running yet."
          else
              touch $FILE
              [ $? -eq 0 ] && echo "start $prog OK."
          fi
      }

      stop() {
          if [ -f $FILE ]; then
              rm -f $FILE
              [ $? -eq 0 ] && echo "stop $prog finished."
          else
              echo "$prog is not running."
          fi
      }
      status() {
          if [ -f $FILE ]; then
              echo "$prog is running"
          else
              echo "$prog is stopped."
          fi
      }

      usage() {
          echo "Usage: $prog {start|stop|restart|status}"
      }

      case $1 in
      start)
          start ;;
      stop)
          stop ;;
      restart)
          stop
          start ;;
      status)
          status ;;
      *)
          usage
          exit 1 ;;
      esac

      6.3.函数的返回值分为两类
      1.函数的执行结果返回值

      （1）：使用echo或printf命令进行输出
      （2）：函数体中调用的命令的执行结果

      2.函数的退出状态码

      （1）：默认取决于函数体中执行的最后一条命令的退出状态码
      （2）：自定义：return （相当于脚本中的exit）

      6.4.函数可以接受参数

      在调用函数的时候可以给函数传递参数；
      在函数体中，可以使用$1, $2...引用传递给函数的参数，还可以使用$* 或$@调用所有的参数，$#表示传递的参数的个数；
      在调用函数时候，在函数名后面以空白字符分割给定参数列表即可，例如：functionName arg1 arg2 arg3 arg4...

      示例：

      示例1：添加10个用户，添加用户的功能使用函数实现，用户名作为参数传递给函数。这里有一个注意点，就是如果直接return $? ，在函数外面是不能拿到值的。

      #!/bin/bash
      #
      # 5: user exists

      addusers() {
          if id $1 &> /dev/null; then
              return 5
          else
              useradd $1
              retval=$?
              return $retval
          fi
      }

      for i in {1..10}; do
          addusers ${1}${i}
          # 在这里需要注意的是：每次函数的放回结果虽然可以使用$?来引用，但是在后面多次用到的时候，一定要将其使用一个变量保存起来，这里使用一个retval=$?保存了函数执行之后的状态码，以后为了规范起见，所有的函数返回的状态码都使用一个变量将其保存起来，如: variable=$? ，这样就不怕以后引用$?是出现错误。
          retval=$?
          if [ $retval -eq 0 ]; then
              echo "Add user ${1}${i} finished."
          elif [ $retval -eq 5 ]; then
              echo "user ${1}${i} exists."
          else
              echo "Unkown Error."
          fi
      done

      练习：

      练习1：写一个脚本：要求
      （1）使用函数实现ping一个主机来测试主机的在线状态，主机地址通过参数传递给函数
      （2）主程序：测试192.168.7.130 - 192.168.7.139 范围内的各个主机的在线状态
      （3）如果主机在线，那么打印黄色的Online字符串，如果主机不在线打印红色的Offline字符串

      #!/bin/bash
      #
      if [ $# -lt 2 ];then
          echo "请输入两个主机地址作为IP地址的检测范围"
          exit 1
      fi
      START=$1
      END=$2

      # 检测IP的范围
      Ping(){
          ping -c1 -w1 192.168.7.13$1 &> /dev/null &&  echo -e "\E[1;33m 192.168.7.13$1 Online  \033[0m" || echo -e "\E[1;31m 192.168.7.13$1 Offline  \033[0m"
      }

      for i in `seq $1 $2`; do
          Ping $i
      done


      练习2：写一个脚本 ：要求
      打印NN乘法表,使用函数实现， 例如：给脚本传递了一个11，那么就是打印11 X 11 的乘法表

      #!/bin/bash
      # 注意：这里的echo 的 -n选项表示不换行
      for((i=1;i<=$1;i++));do
              for((j=1;j<=$i;j++));do
                      echo -n "$j X $i = $[ $j*$i ]  "
              done
              echo
      done

      7.变量作用域

      局部变量：作用域是函数的生命周期，在函数结束时被自动销毁。定义局部变量的方法：local 变量=值
      本地变量：作用域是运行脚本的shell进程的生命周期，因此，其作用域范围是当前的shell脚本程序文件

      示例
      #!/bin/bash
      #
      name=tom

      # 记得以后为了避免函数中的变量与本地变量同名，如果同名，会使得具备变量修改本地变量的值，使得本地变量的指针直接指向函数中变量的存储空间。为了避免同名产生的错误，以后在函数中定义的变量都使用局部变量，在变量名前面加上一个local关键字
      setname() {
          local name=jerry
          echo "Function: $name"
      }

      setname
      echo "Shell: $name"

      8.递归

      bash shell中和其他编程语言一样可以使用递归。那什么是递归：程序调用自身技巧称为递归（ recursion）

      示例：

      写一个脚本，给脚本传递一个数值，脚本输出这个数值的阶层。例如：5！= 120

      #!/bin/bash

      func() {
          if [ $1 -eq 0 -o $1 -eq 1 ]; then
              echo 1
          else
              echo $[$1*$(func $[$1-1])]
          fi
      }

      func $1

   
   
7.shell脚本的本质
   shell脚本是命令的堆积,命令自上而下执行,由于命令的非幂等性所有脚本中要进行判断比如命令useradd name如果name存在还会往下执行
   导致脚本停顿的原因会是exit或者命令的拼写错误.
   
   不如如下的写法
   id user3 || useradd user3 表示如果有了就不创建了,没有的话就执行创建.
   
   脚本执行的时候比如脚本test.sh的话
   如果>$ test.sh 这样写的话会去path环境变量找这个,因此需要制定绝对路径 ./test.sh
   
   通过./test.sh 这样执行的话会判断首行中的#!/bin/bash 来使用bash解释器.
   或者手动制定解释器如下：
   bash /xxx/xxx/test.sh
   
插播一个shell写法,纯粹备忘无上下文关系   
#echo hello | passwd --stdin user3 


7.实验
   1)显示/etc目录下以大写或者小写p开头的文件或者目录
   2)显示/var目录下的所有文件或者目录并将结果找那个的小写字母转为大写字母后显示
   3)创建临时文件/tmp/myfile.xxxx
   

8.SHELL 登录类型
   交互式登录 profile
      全局用户范围：
            /etc/profile
            /etc/profile.d/xxx.sh
      个人范围
            在个人目录的~/.bash_profile
      1. 直接账号名密码
      2. su - username
      
      用途：定义环境变量运行命令或者脚本
      
   非交互式登录 bashrc
      全局:
         /etc/bashrc
      个人:
         ~/bashrc
      1. su username
      2. 图形界面打开shell
      3. 运行脚本时候 SHELL 脚本是在子shell中运行的.属于非交互式的登录
      
      用途： 定义本地变量和定义别名
   交互式加载顺序: /etc/profile===>/etc/profile.d/*===>~/.bash_profile===>~/bashrc===>/etc/bashrc
   非交互是加载顺序: ~/bashrc===>/etc/bashrc===>/etc/profile.d/*.sh
   让配置文件立即生效 source 或者 .
================================================================================================   
交互式登录shell和非交互式登录shell的区别
交互式登录：(清除掉所有变量，通过文件重新读入)
(1)直接通过终端输入账号密码登录
(2)使用“su - UserName”切换的用户
执行顺序：（影响该shell的配置文件）
/etc/profile --> /etc/profile.d/*.sh --> ~/.bash_profile--> ~/.bashrc--> /etc/bashrc

非交互式登录：（会继承上一个shell的全部变量）
(1)su UserName
(2)图形界面下打开的终端
(3)执行脚本   （当我们执行脚本的时候.我们就已经进入到了一个子shell）
(4)任何其它的bash实例
执行顺序：（影响该shell的配置文件）

~/.bashrc--> /etc/bashrc--> /etc/profile.d/*.sh

 使用./test.sh或者 bash ./test.sh执行脚本的时候，是开启一个子shell，这个子shell能继承上一个父shell的变量，而这个子shell的变量，随着子shell的退出而消失。当我们用. test.sh 或者source test.sh时，不开启子shell，在当前shell运行，子shell中的所有值都影响当前。

 一般我们对shell进行一些配置的时候，通常都是对~/.bashrc 和/etc/bashrc这两个文件进行一些配置。
 
 ==================================================================================================
 CentOS 7下使用chkconfig添加的服务无法使用/etc/profile里面的环境变量
经过分析/etc/profile为入口的，基本是登录后执行的变量，而使用chkconfig添加的服务多变以守护经常运行，没有登录。

CentOS 7下使用chkconfig添加的服务无法使用/etc/profile里面的环境变量，通过env输出只有:

复制代码
TERM=xterm
SYSTEMCTL_SKIP_REDIRECT=
PATH=/sbin:/usr/sbin:/bin:/usr/bin
PWD=/
SHLVL=1
SYSTEMCTL_IGNORE_DEPENDENCIES=
_=/bin/env
复制代码
所以要想在chkconfig添加的服务里使用环境变量，只有在服务的脚本中引入变量文件，比如:source /etc/profile，但不建议引入这个文件，直接想要哪个变量引入这里面的个别脚本：/etc/profile.d/xxx.sh

但使用systemctl添加的服务，可以通过这个变量设置:

EnvironmentFile
 

参考：

https://stackoverflow.com/questions/42499166/environmental-variables-not-being-picked-up-in-linux-service

https://forums.fedoraforum.org/showthread.php?244785-environment-variables-in-chkconfig

https://unix.stackexchange.com/questions/44370/how-to-make-unix-service-see-environment-variables

https://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html

============================================================================================================
1）/etc/profile   登录时，会执行。 
全局（公有）配置，不管是哪个用户，登录时都会读取该文件。 
（2）/ect/bashrc   Ubuntu没有此文件，与之对应的是/ect/bash.bashrc 
bash.bashrc 是交互式shell的初始化文件。   
（3）~/.profile  某个用户读取的配置。 
若bash是以login方式执行时，读取~/.bash_profile，若它不存在，则读取~ /.bash_login，若前两者不存在，读取~ /.profile。 
另外，图形模式登录时，此文件将被读取，即使存在~/.bash_profile和~/.bash_login。 
（4）~/.bash_login    
若 bash是以login方式执行时，读取~/.bash_profile，若它不存在，则读取~/.bash_login，若前两者不存在，读取~ /.profile。 
（5）~/.bash_profile   Unbutu默认没有此文件，可新建。 
只有 bash是以login形式执行时，才会读取此文件。通常该配置文件还会配置成去读取~/.bashrc。 
（6）~/.bashrc     该文件包含专用于某个用户的bash shell的bash信息,当该用户登录时以及每次打开新的shell时,该文件被读取. 
当 bash是以non-login形式执行时，读取此文件。若是以login形式执行，则不会读取此文件。 
（7）~/.bash_logout 
注销时，且是longin形式，此文件才会读取。也就是说，在文本模式注销时，此文件会被读取，图形模式注销时，此文件不会被读取。 
补充一点，/etc/rc.local是系统shell会执行的文件，linux启动后会退出的；/etc/profile 或 /etc/bash.bashrc是用户shell会的配置，我们一般的Shell是用户Shell的子进程，而非系统shell的子进程，所以如果在 /etc/rc.local中指定"alias ll='ls -a'"这样的别名，对登录系统后的shell是没用的。 
某网友总结如下： 
/etc/profile，/etc /bashrc 是系统全局环境变量设定   
/etc/profile与/etc/bashrc的区别？ 
前一个主要用来设置一些系统变量,比如JAVA_HOME等等,后面一个主要用来保存一些bash的设置.   
~/.profile，~ /.bashrc用户家目录下的私有环境变量设定 
当登入系统时候获得一个shell进程时，其读取环境设定档有三步 
1 首先读入的是全局环境变量设定档/etc/profile，然后根据其内容读取额外的设定的文档，如 
/etc/profile.d和 /etc/inputrc 
2 然后根据不同使用者帐号，去其家目录读取~/.bash_profile，如果这读取不了就读取~/.bash_login，这个也读取不了才会读取 
~/.profile，这三个文档设定基本上是一样的，读取有优先关系 
3 然后在根据用户帐号读取~/.bashrc 
至于~/.profile与~/.bashrc的区别，都具有个性化定制功能 
~/.profile可以设定本用户专有的路径，环境变量，等，它只能登入的时候执行一次 
~/.bashrc也是某用户专有设定文档，可以设定路径，命令别名，每次shell script的执行都会使用它一次 
下面是几个例子： 
1. 图形模式登录时，顺序读取：/etc/profile和~/.profile 
2. 图形模式登录后，打开终端时，顺序读取：/etc/bash.bashrc和~/.bashrc 
3. 文本模式登录时，顺序读取：/etc/bash.bashrc，/etc/profile和~/.bash_profile 
4. 从其它用户su到该用户，则分两种情况： 
    （1）如果带-l参数（或-参数，--login参数），如：su -l username，则bash是lonin的，它将顺序读取以下配置文件：/etc/bash.bashrc，/etc/profile和~ /.bash_profile。 
    （2）如果没有带-l参数，则bash是non-login的，它将顺序读取：/etc/bash.bashrc和~/.bashrc 
5. 注销时，或退出su登录的用户，如果是longin方式，那么bash会读取：~/.bash_logout 
6. 执行自定义的shell文件时，若使用“bash -l a.sh”的方式，则bash会读取行：/etc/profile和~/.bash_profile，若使用其它方式，如：bash a.sh， ./a.sh，sh a.sh（这个不属于bash shell），则不会读取上面的任何文件。 
7. 上面的例子凡是读取到~/.bash_profile的，若该文件不存在，则读取~/.bash_login，若前两者不存在，读取~ /.profile。

================================================================================================================
linux读取profile文件和bashrc文件的情况
    最近研究linux，对linux的profile文件和bashrc文件有些不清楚，于是深入研究了一下。
    如果想知道这些文件什么时候被执行，还需要知道几个关于shell的小知识。（CentOS6.5 linux）

    1.login shell，登录shell，即init 3启动linux后，需要输入用户名和密码，进入的shell就是loginshell。
       注意：在shell里使用su - user_name 切换用户，登录的shell也是login shell
       login shell会读取的文件有：/etc/profile，$HOME/.bash_profile,$HOME/.bash_login，$HOME/.profile，按以上顺序读取。

    2.有login shell就有no login shell。
       no login shell有，在login  shell中输入bash，没有输入用户名和密码，那么这个就是no login shell。

       在图形界面下，打开一个shell也是no login shell
        no login shell 在打开的时候，执行的文件是$HOME/.bashrc,而.bashrc又会执行/etc/bashrc文件（可查看家目录的.bashrc文件）。

       下面是一张简单的流程图：
       举例：1.在非图形界面，如果要配置PS1这个环境变量，最好配置到/etc/profile或是$HOME/.bash_profile中，这样登出在登录一下，就会执行这个命令
            2.如果是图形界面的用户，配置PS1，需要配置的时$HOME/.bashrc文件，或是/etc/bashrc文件，因为打开no login shell的时候，读取的时
            $HOME/.bashrc(这个文件会读取/etc/bashrc)这个文件。
            
说成login和no login更好理解点.

实际测试的时候发现使用命令#bash的话会调用/etc/bashrc
但是执行脚本bash xxx.sh 或者 ./xxx.sh 不会调用想不通继续查清楚.

========================================================================================================
注意SHELL子进程会继承环境变量 但是别名不会继承,默认子进程不开启别名扩展如下解释
Linux shell有交互式与非交互式两种工作模式。我们日常使用shell输入命令得到结果的方式是交互式的方式，而shell脚本使用的是非交互式方式。 
shell提供了alias功能来简化我们的日常操作，使得我们可以为一个复杂的命令取一个简单的名字，从而提高我们的工作效率。在交互式模式下，shell的alias扩展功能是打开的，因此我们可以键入自己定义的alias别名来执行对应的命令。
但是，在非交互式模式下alias扩展功能默认是关闭的，此时仍然可以定义alias别名，但是shell不会将alias别名扩展成对应的命令，而是将alias别名本身当作命令执行，如果shell内置命令和PATH中均没有与alias别名同名的命令，则shell会“抱怨”找不到指定的命令。
那么，有没有办法在非交互式模式下启用alias扩展呢？答案是使用shell内置命令shopt命令来开启alias扩展选项。shopt是shell的内置命令，可以控制shell功能选项的开启和关闭，从而控制shell的行为。shopt的使用方式如下：
shopt -s opt_name                 Enable (set) opt_name.
shopt -u opt_name                 Disable (unset) opt_name.
shopt opt_name                    Show current status of opt_name.
alias扩展功能的选项名称是expand_aliases，我们可以在交互式模式下查看此选项是否开启：
sw@gentoo ~ $ shopt expand_aliases
expand_aliases  on
sw@gentoo ~ $
可见在交互式模式下alias扩展功能的确是开启的，因此我们才能使用alias别名。
 
我们编写一个脚本来验证一下非交互式模式下alias扩展的设置：
#!/bin/bash --login

alias echo_hello="echo Hello!"
shopt expand_aliases   
echo_hello

shopt -s  expand_aliases  
shopt expand_aliases   
echo_hello

脚本执行结果如下：
sw@gentoo ~ $ ./test.sh 
expand_aliases  off
./test.sh: line 5: echo_hello: command not found
expand_aliases  on
Hello!
sw@gentoo ~ $

可以看到，在非交互式模式下alias扩展功能默认是关闭的，但是我们可以用shopt来将其开启。 
另外，alias别名只在当前shell有效，不能被子shell继承，也不能像环境变量一样export。可以把alias别名定义写在.bashrc文件中，这样如果启动交互式的子shell，则子shell会读取.bashrc，从而得到alias别名定义。但是执行shell脚本时，启动的子shell处于非交互式模式，是不会读取.bashrc的。
不过，如果你一定要让执行shell脚本的子shell读取.bashrc的话，可以给shell脚本第一行的解释器加上参数：
#!/bin/bash --login
--login使得执行脚本的子shell成为一个login shell，login shell会读取系统和用户的profile及rc文件，因此用户自定义的.bashrc文件中的内容将在执行脚本的子shell中生效。
还有一个简单的办法让执行脚本的shell读取.bashrc，在脚本中主动source ~/.bashrc即可。

====================================================================================================
2、sh/bash
sh a.sh
bash a.sh
都是打开一个subshell去读取、执行a.sh，而a.sh不需要有"执行权限"
通常在subshell里运行的脚本里设置变量，不会影响到父shell的。


3、./
./a.sh
#bash: ./a.sh: 权限不够
chmod +x a.sh
./a.sh
打开一个subshell去读取、执行a.sh，但a.sh需要有"执行权限"
可以用chmod +x添加执行权限

如果脚本上加上
#!/bin/bash --login
并用bash xxx.sh 就会先loadrc等文件 类似于通过bash 然后再这个新bash里面执行命令
如果./xxx.sh就不会重新load rc等文件.

如果是#!/bin/bash表示非登陆非交互脚本,无论bash或者./都不会loadrc等文件.
