1. shell是什么
   shell是一个应用进程
2. shell的变量范围
   本地变量
    作用范围：本shell
   环境变量
    作用范围：本shell和子shell
   
3. shell定义
   本地变量
         变量赋值 name=value
         变量引用 ${name}, $name
              强引用 ''
              弱引用 ""
         查看变量 set
         取消变量 unset
         定义只读变量 readonly name=value
                     declare -r name=value
   
   环境变量
         1. export name=value
         2. name=value 
            export name
         3. declare -x name=value
         4. name=value 
            declare -x 
    bash许多内置环境变量为全大写.

4.多命令一起执行
  ~]# COMMAND01;COMMAND02;COMMAND03
  

5.逻辑运算
   真 (true,yes,on,1)
   假 (false,no,off,0)
   
   与     &&
   或     ||
   非     ！
   异或   ^
   
   运算符的短路法则   COMMAND01 && COMMAND02 第一个命令失败第二个不会执行
                     COMMAND01 || COMMAND02 第一个命令失败第二个就会执行
   
   
6.shell脚本的本质
   shell脚本是命令的堆积,命令自上而下执行,由于命令的非幂等性所有脚本中要进行判断比如命令useradd name如果name存在还会往下执行
   导致脚本停顿的原因会是exit或者命令的拼写错误.
   
   不如如下的写法
   id user3 || useradd user3 表示如果有了就不创建了,没有的话就执行创建.
   
   脚本执行的时候比如脚本test.sh的话
   如果>$ test.sh 这样写的话会去path环境变量找这个,因此需要制定绝对路径 ./test.sh
   
   通过./test.sh 这样执行的话会判断首行中的#!/bin/bash 来使用bash解释器.
   或者手动制定解释器如下：
   bash /xxx/xxx/test.sh
   
插播一个shell写法,纯粹备忘无上下文关系   
#echo hello | passwd --stdin user3 


7.实验
   1)显示/etc目录下以大写或者小写p开头的文件或者目录
   2)显示/var目录下的所有文件或者目录并将结果找那个的小写字母转为大写字母后显示
   3)创建临时文件/tmp/myfile.xxxx
   

8.SHELL 登录类型
   交互式登录 profile
      全局用户范围：
            /etc/profile
            /etc/profile.d/xxx.sh
      个人范围
            在个人目录的~/.bash_profile
      1. 直接账号名密码
      2. su - username
      
      用途：定义环境变量运行命令或者脚本
      
   非交互式登录 bashrc
      全局:
         /etc/bashrc
      个人:
         ~/bashrc
      1. su username
      2. 图形界面打开shell
      3. 运行脚本时候 SHELL 脚本是在子shell中运行的.属于非交互式的登录
      
      用途： 定义本地变量和定义别名
   交互式加载顺序: /etc/profile===>/etc/profile.d/*===>~/.bash_profile===>~/bashrc===>/etc/bashrc
   非交互是加载顺序: ~/bashrc===>/etc/bashrc===>/etc/profile.d/*.sh
   让配置文件立即生效 source 或者 .
================================================================================================   
交互式登录shell和非交互式登录shell的区别
交互式登录：(清除掉所有变量，通过文件重新读入)
(1)直接通过终端输入账号密码登录
(2)使用“su - UserName”切换的用户
执行顺序：（影响该shell的配置文件）
/etc/profile --> /etc/profile.d/*.sh --> ~/.bash_profile--> ~/.bashrc--> /etc/bashrc

非交互式登录：（会继承上一个shell的全部变量）
(1)su UserName
(2)图形界面下打开的终端
(3)执行脚本   （当我们执行脚本的时候.我们就已经进入到了一个子shell）
(4)任何其它的bash实例
执行顺序：（影响该shell的配置文件）

~/.bashrc--> /etc/bashrc--> /etc/profile.d/*.sh

 使用./test.sh或者 bash ./test.sh执行脚本的时候，是开启一个子shell，这个子shell能继承上一个父shell的变量，而这个子shell的变量，随着子shell的退出而消失。当我们用. test.sh 或者source test.sh时，不开启子shell，在当前shell运行，子shell中的所有值都影响当前。

 一般我们对shell进行一些配置的时候，通常都是对~/.bashrc 和/etc/bashrc这两个文件进行一些配置。
