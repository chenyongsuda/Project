1. 小程序的生命周期有四个
    onLaunch 生命周期函数--监听小程序初始化 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）

    onShow 生命周期函数--监听小程序显示 当小程序启动，或从后台进入前台显示，会触发 onShow

    onHide 生命周期函数--监听小程序隐藏 当小程序从前台进入后台，会触发 onHide

    onError 错误监听函数 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息

    其他 Any 开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问

    我们在app.js文件中定义以下方法 ，并打印出来

    App({
      onLaunch: function (options) {
        console.log("app.js ---onLaunch---" + JSON.stringify(options));
      },
      onShow:function(){
        console.log("app.js ---onShow---");
      },
      onHide:function(){
        console.log("app.js ---onHide---");
      },
      onError: function (msg){
        console.log("app.js ---onError---" + msg);
      },
      globalData: {
        userInfo: null
      }
    })


    这是我们打开一个小程序打印出来的一些方法
    ---app.js onLaunch
    ---app.js onShow
    ---page   onLoad
    ---page   onShow
    ---page   onReady
    
    
    
    可以看出， 打开程序依次执行了app.js下面onLaunch和onShow方法，以及page页面中的onLoad，onShow和onReady方法

    其中 ， onLaunch, onShow 方法会返回一个参数对象， 里面包含了三个参数 ， path,query和scene ，path是打开小程序的路径

    query是打开小程序页面url的参数，scene是打开小程序的场景值

    更多场景值可以查看
    https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/scene.html

    小程序切换到后台会执行以下2个方法
    ---page   onHide
    ---app.js onHide  


    返回小程序前台
    ---app.js onShow
    ---page   onShow
    
2.页面的生命周期

      在page页面中定义的生命周期方法

      onLoad 生命周期函数--监听页面加载
      onReady 生命周期函数--监听页面初次渲染完成
      onShow 生命周期函数--监听页面显示
      onHide 生命周期函数--监听页面隐藏
      onUnload 生命周期函数--监听页面卸载

      Page({
        onLoad: function (options) {
          console.log("page ---onLoad---");
        },
        onReady: function () {
          console.log("page ---onReady---");
        },
        onShow: function () {
          console.log("page ---onShow---");
        },
        onHide: function () {
          console.log("page ---onHide---");
        },
        onUnload: function () {
          console.log("page ---onUnload---");
        }
      })
      其中，打开小程序后会依次执行onLoad，onReady和onShow方法
      前后台切换会分别执行onHide和onShow方法，
      当小程序页面销毁时会执行 onUnload方法
      
      例如，我们在details.js中定义onUnload方法
      onUnload: function () {
          console.log("details.js  --onUnload")
        },
      当我们从首页打开一个新页面details.wxml，然后再关闭着这个页面


      从上图可以看到页面执行了onUnload方法
      另外， 小程序为我们提供了全局数据管理 ，在page页面中通过getApp()方法获取app.js实例
      例如：
      我们在app.js通过定义一个globalData数据对象
      App({
        globalData: {
          userInfo: null
        }
      })

      // other.js
      var appInstance = getApp()
      console.log(appInstance.globalData)
      注意：
      App() 必须在 app.js 中注册，且不能注册多个。
      不要在定义于 App() 内的函数中调用 getApp() ，使用 this 就可以拿到 app 实例。
      不要在 onLaunch 的时候调用 getCurrentPages()，此时 page 还没有生成。
      通过 getApp() 获取实例之后，不要私自调用生命周期函数。


3.页面事件处理函数
https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html 参考页面

onPullDownRefresh()
监听用户下拉刷新事件。

onReachBottom()
监听用户上拉触底事件。

onShareAppMessage(Object)
监听用户点击页面内转发按钮（<button> 组件 open-type="share"）或右上角菜单“转发”按钮的行为，并自定义转发内容。
在开发者工具中预览效果

Page({
  onShareAppMessage(res) {
    if (res.from === 'button') {
      // 来自页面内转发按钮
      console.log(res.target)
    }
    return {
      title: '自定义转发标题',
      path: '/page/user?id=123'
    }
  }
})

onResize(object)
基础库 2.4.0 开始支持，低版本需做兼容处理。

onTabItemTap(Object)
示例代码：

Page({
  onTabItemTap(item) {
    console.log(item.index)
    console.log(item.pagePath)
    console.log(item.text)
  }
})



==============================================================================
微信小程序之页面路由

一、哪些情况会触发页面跳转
小程序启动，初始化第一个页面
打开新页面，调用 API wx.navigateTo 或使用<navigator />组件
页面重定向，调用 API wx.redirectTo 或使用<navigator />组件
页面返回，调用 API wx.navigateBack或用户按左上角返回按钮
tarbar切换
所有页面都必须在app.json中注册,例如：

{
    "pages": [
        "pages/index/index",
        "pages/logs/index"
    ]
}
二、如何跳转页面
使用wx.navigateTo接口跳转,原页面保留。
wx.navigateTo({
        //目的页面地址
        url: 'pages/logs/index',
        success: function(res){},
        ...
})
使用wx.redirectTo接口跳转，关闭原页面,不能返回。
wx.redirectTo({
        //目的页面地址
        url: 'pages/logs/index',
        success: function(res){},
        ...
})
3.使用组件

<navigator url="pages/logs/index" hover-class="navigator-hover">跳转</navigator>
当该组件添加redirect属性时，等同于wx.redirectTo接口；默认redirect属性为false，等同于wx.navigateTo接口。

用户点击左上角返回按钮，或调用wx.navigateBack接口返回上一页。
wx.navigateBack({
    delta: 1
})
delta为1时表示返回上一页，为2时表示上上一页，以此类推；如果dalta大于已打开的页面总数，则返回到首页。返回后，元界面会销毁。

》》》页面跳转传值
其实这个很简单,形如：

url?key=value&key1=value1
经过测试，传递的参数没有被URIEncode,传递中文没有乱码。参数长度未测试。

三、如何正确使用页面跳转
官方规定小程序最多只能有五个页面同时存在，意思是在不关闭页面的情况，最多新开五个页面，页面深度为5。

对于可逆操作，使用wx.navigateTo,比如从首页跳转到二级页面，从二级页面返回是不需要重新渲染首页
对于不可逆操作，使用wx.redirectTo,比如用户登录成功后，关闭登录页面，不能返回到登录界面。
对于一些介绍性等不常用页面wx.redirectTo或wx.navigatrBack
对于类似九宫格、列表项，使用
不要在首页使用wx.redirectTo，这样会导致应用无法返回首页
简化需求、简化流程；核心功能在两三个页面完成便是张小龙追求『小而美』的体现
四、页面栈
页面栈以栈（先进后出）的形式维护页面与页面之间的关系；
小程序提供了getCurrentPages()函数获取页面栈，第一个元素为首页，最后一个元素为当前页面。

使用wx.navigateTo每新开一个页面，页面栈大小加1,直到页面栈大小为5为止；


使用wx.navigateTo重复打开界面


上图中，假如使用wx.navigateTo从四级页面跳转到二级页面，此时会在页面栈顶添加一个与二级页面初始状态一样的界面，但两个页面状态是独立的。页面栈大小会加1，如果页面栈大小为5，则wx.navigateTo无效

使用wx.redirectTo重定向

上图中，假如使用wx.redirectTo从四级页面重定向到二级页面，此时会将关闭四级页面，并使用二级页面替换四级页面，但两个页面状态是独立的。此时的页面栈大小不变，请注意和使用wx.navigateTo的区别。

使用wx.navigateBack返回

上图中，假如当前页面为五级页面，使用wx.navigateBack：

当delta为1，关闭五级页面，当前页面为四级页面，页面栈大小减1；
当delta为2，关闭依次五级页面和四级页面，当前页面为三级页面，页面栈大小减2；
以此类推，直到栈底为止，也就是首页。
以上使用wx.navigateTo、wx.redirectTo、wx.navigateBack页面出入栈操作对页面栈的影响，平时不一定用得上，但是还是有必要了解背后的原理。

通过学习页面栈，你至少可以知道：

小程序运行时你可以获取到已经初始化了的页面的属性和方法
动态获取当前页面路径
页面自动跳转
你可以通过getCurrentPages()获取页面page对象，执行非当前页js里的方法
总结

wx.navigateTo会增加页面栈大小，直到页面栈大小为5
wx.redirectTo不会增加页面栈大小
wx.navigateBack会减少页面栈大小，直到页面栈大小为1
最后，值得庆祝的是在12月17日第二届中国深商大会上马化腾透露，小程序会在春节前全面推出。
