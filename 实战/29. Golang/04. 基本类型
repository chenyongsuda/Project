Go语言的基本类型有：
bool
string
int、int8、int16、int32、int64
uint、uint8、uint16、uint32、uint64、uintptr
byte // uint8 的别名
rune // int32 的别名 代表一个 Unicode 码
float32、float64
complex64、complex128


声明变量的一般形式是使用 var 关键字：
var name type
其中，var 是声明变量的关键字，name 是变量名，type 是变量的类型。

当一个变量被声明之后，系统自动赋予它该类型的零值：int 为 0，float 为 0.0，bool 为 false，string 为空字符串，指针为 nil 等。所有的内存在 Go 中都是经过初始化的。
变量的命名规则遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：numShips 和 startDate 。


变量定义格式几种:
标准格式：
      var 变量名 变量类型

简短格式:
      名字 := 表达式

      需要注意的是，简短模式（short variable declaration）有以下限制：
      定义变量，同时显式初始化。
      不能提供数据类型。
      只能用在函数内部。

      和 var 形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量：
      i, j := 0, 1
 
 批量格式
      觉得每行都用 var 声明变量比较烦琐？没关系，还有一种为懒人提供的定义变量的方法：
      var (
          a int
          b string
          c []float32
          d func() bool
          e struct {
              x int
          }
      )
      使用关键字 var 和括号，可以将一组变量定义放在一起。
      
      
==========================================
变量初始化的标准格式：
      var 变量名 类型 = 表达式
      例如，游戏中，玩家的血量初始值为100。可以这样写：
      纯文本复制
      var hp int = 100
      
编译器推导类型的格式：
      在标准格式的基础上，将 int 省略后，编译器会尝试根据等号右边的表达式推导 hp 变量的类型。
      var hp = 100
      等号右边的部分在编译原理里被称做右值（rvalue）。

      下面是编译器根据右值推导变量类型完成初始化的例子。
      var attack = 40
      var defence = 20
      var damageRate float32 = 0.17
      var damage = float32(attack-defence) * damageRate
      fmt.Println(damage)
      代码说明如下：
      第 1 和 2 行，右值为整型，attack 和 defence 变量的类型为 int。
      第 3 行，表达式的右值中使用了 0.17。由于Go语言和C语言一样，编译器会尽量提高精确度，以避免计算中的精度损失。所以这里如果不指定 damageRate 变量的类型，Go语言编译器会将 damageRate 类型推导为 float64，我们这里不需要 float64 的精度，所以需要强制指定类型为 float32。
      第 4 行，将 attack 和 defence 相减后的数值结果依然为整型，使用 float32() 将结果转换为 float32 类型，再与 float32 类型的 damageRate 相乘后，damage 类型也是 float32 类型。
      提示：damage 变量的右值是一个复杂的表达式，整个过程既有 attack 和 defence 的运算还有强制类型转换。强制类型转换会在后面的章节中介绍。
      第 5 行，输出 damage 的值。

      以上代码输出结果为：
      3.4
==============================================
Go语言多个变量同时赋值
var a int = 100
var b int = 200
b, a = a, b
fmt.Println(a, b)
多重赋值时，变量的左值和右值按从左到右的顺序赋值。


==============================================
Go语言匿名变量（没有名字的变量）
匿名变量的特点是一个下画线“_”，“_”本身就是一个特殊的标识符，被称为空白标识符。它可以像其他标识符那样用于变量的声明或赋值（任何类型都可以赋值给它），
但任何赋给这个标识符的值都将被抛弃，因此这些值不能在后续的代码中使用，也不可以使用这个标识符作为变量对其它变量进行赋值或运算。使用匿名变量时，只需要在变量声明的地方使用下画线替换即可。







