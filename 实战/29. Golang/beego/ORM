beego——模型（model）
beego ORM是一个强大的Go语言ORM框架。她的灵感主要来自Django ORM和SQLAlchemy。

已经支持的数据库驱动：

MySQL：https://github.com/go-sql-driver/mysql
PostgreSQL：https://github.com/lib/pq
Sqlite3：https://github.com/mattn/go-sqlite3
ORM的特性：

支持 Go 的所有类型存储
轻松上手，采用简单的 CRUD 风格
自动 Join 关联表
跨数据库兼容查询
允许直接使用 SQL 查询／映射
严格完整的测试保证 ORM 的稳定与健壮
安装ORM：

go get github.com/astaxie/beego/orm
　　
快速入门
简单示例：
package main
 
import (
    "fmt"
    "github.com/astaxie/beego/orm"
    _ "github.com/go-sql-driver/mysql" // import your used driver
)
 
// Model Struct
type User struct {
    Id   int
    Name string `orm:"size(100)"`
}
 
func init() {
    // set default database
    orm.RegisterDataBase("default", "mysql", "username:password@tcp(127.0.0.1:3306)/db_name?charset=utf8", 30)
 
    // register model
    orm.RegisterModel(new(User))
 
    // create table
    orm.RunSyncdb("default", false, true)
}

==============
// 4.根据注册的模型创建表
// 第一个参数: 数据库的别名(在哪个数据库中创建)
// 第二个参数: 是否强制更新(销毁过去的再重新创建)
// 第三个参数: 是否显示创建SQL语句
orm.RunSyncdb("default", false, true)
}
 
func main() {
    o := orm.NewOrm()
 
    user := User{Name: "slene"}
 
    // insert
    id, err := o.Insert(&user)
    fmt.Printf("ID: %d, ERR: %v\n", id, err)
 
    // update
    user.Name = "astaxie"
    num, err := o.Update(&user)
    fmt.Printf("NUM: %d, ERR: %v\n", num, err)
 
    // read one
    u := User{Id: user.Id}
    err = o.Read(&u)
    fmt.Printf("ERR: %v\n", err)
 
    // delete
    num, err = o.Delete(&u)
    fmt.Printf("NUM: %d, ERR: %v\n", num, err)
}
　　

关联查询
type Post struct {
    Id    int    `orm:"auto"`
    Title string `orm:"size(100)"`
    User  *User  `orm:"rel(fk)"`
}
 
var posts []*Post
qs := o.QueryTable("post")
num, err := qs.Filter("User__Name", "slene").All(&posts)
　　

SQL查询
当你无法使用ORM来达到您的需求的时候，也可以直接使用SQL来完成查询/映射操作。

var maps []orm.Params
num, err := o.Raw("SELECT * FROM user").Values(&maps)
for _,term := range maps{
    fmt.Println(term["id"],":",term["name"])
}
　　

事务处理
o.Begin()
...
user := User{Name: "slene"}
id, err := o.Insert(&user)
if err == nil {
    o.Commit()
} else {
    o.Rollback()
}
　　

调试查询日志
在开发环境下，您可以使用以下指令来开启调试模式：

orm.Debug = true
开启后将会输出所有的查询语句，包括执行、准备、事务等。例如

[ORM] - 2013-08-09 13:18:16 - [Queries/default] - [    db.Exec /     0.4ms] -   [INSERT INTO `user` (`name`) VALUES (?)] - `slene`

=============================================================
模型定义
复杂的模型定义不是必须的，此功能用作数据库数据转换和自动建表

默认的表名规则，使用驼峰转蛇形：

AuthUser -> auth_user
Auth_User -> auth__user
DB_AuthUser -> d_b__auth_user
除了开头的大写字母以外，遇到大写会增加 _，原名称中的下划线保留。

自定义表名
type User struct {
    Id int
    Name string
}
 
func (u *User) TableName() string {
    return "auth_user"
}
如果前缀设置为prefix_那么表名为：prefix_auth_user

自定义索引
为单个或多个字段增加索引

type User struct {
    Id    int
    Name  string
    Email string
}
 
// 多字段索引
func (u *User) TableIndex() [][]string {
    return [][]string{
        []string{"Id", "Name"},
    }
}
 
// 多字段唯一键
func (u *User) TableUnique() [][]string {
    return [][]string{
        []string{"Name", "Email"},
    }
}

自定义引擎
仅支持 MySQL

默认使用的引擎，为当前数据库的默认引擎，这个是由你的 mysql 配置参数决定的。

你可以在模型里设置 TableEngine 函数，指定使用的引擎

type User struct {
    Id    int
    Name  string
    Email string
}
 
// 设置引擎为 INNODB
func (u *User) TableEngine() string {
    return "INNODB"
}
设置参数
orm:"null;rel(fk)"
多个设置间使用 ; 分隔，设置的值如果是多个，使用 , 分隔。

忽略字段

设置 - 即可忽略 struct 中的字段

type User struct {
...
    AnyField string `orm:"-"`
...
}

auto
当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健
当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增健。
鉴于 go 目前的设计，即使使用了 uint64，但你也不能存储到他的最大值。依然会作为 int64 处理。

参见 issue 6113

pk
设置为主键，适用于自定义其他类型为主键

null
数据库表默认为 NOT NULL，设置 null 代表 ALLOW NULL

Name string `orm:"null"`
index
为单个字段增加索引

unique
为单个字段增加 unique 键

Name string `orm:"unique"`
column
为字段设置 db 字段的名称

Name string `orm:"column(user_name)"`
size
string 类型字段默认为 varchar(255)

设置 size 以后，db type 将使用 varchar(size)

Title string `orm:"size(60)"`
digits / decimals

设置 float32, float64 类型的浮点精度
Money float64 `orm:"digits(12);decimals(4)"`
总长度 12 小数点后 4 位 eg: 99999999.9999


auto_now / auto_now_add

Created time.Time `orm:"auto_now_add;type(datetime)"`
Updated time.Time `orm:"auto_now;type(datetime)"`
auto_now 每次 model 保存时都会对时间自动更新
auto_now_add 第一次保存时才设置时间
对于批量的 update 此设置是不生效的

type
设置为 date 时，time.Time 字段的对应 db 类型使用 date

Created time.Time `orm:"auto_now_add;type(date)"`
设置为 datetime 时，time.Time 字段的对应 db 类型使用 datetime

Created time.Time `orm:"auto_now_add;type(datetime)"`
default

为字段设置默认值，类型必须符合（目前仅用于级联删除时的默认值）

type User struct {
    ...
    Status int `orm:"default(1)"`
    ...
}


================================================================
Operators
在beego ORM中也有类似于SQL语句中的操作符，欲善其事，必利其器，我们先来了解他们，beego ORM目前支持的操作符为:

操作符	说明	等同Sql操作符
gt	greater的缩写，表示大于的意思	>
gte	greater than or equal的缩写，即大于等于	>=
lt	less than的缩写，表示小于	<
lte	less thanor equal的缩写，小于等于	<=
in	等同与sql语言中的in	in
exact	等于	=
contains	包含，一般用于字符类型，如包含某某字符	like '%查询内容%'
startswith	以…起始，一般用于字符类型，如从什么字符开始	like '开始字符%'
endswith	以…结束 ，一般用于字符类型，如以什么字符结束	like '%结束字符'
isnull	表示改字段不能为空
在beego中 操作符前面添加 字母 i 表示忽略大小写，如 iexact、icontains 、istartswith 和iendswith 

exact
我们最先演示下exact 它相当于 = ，现在我们需要通过它查询出 stu_id =3 的一条数据。

func (this *OperatorsController) GetExact() {
    orm := orm.NewOrm()
    // 获取表句柄
    stu := Student{}
    qs := orm.QueryTable("student")
    // select * from student where id =3;
    err := qs.Filter("stu_id__exact", 3).One(&stu) // 过滤器
    if err != nil {
        this.Ctx.WriteString(strconv.Itoa(stu.StuId) + " " + stu.Name + " " + stu.Age + " " + stu.Hobby)
    }else{
        this.Ctx.WriteString("查询失败")    
    }
}


上面的代码相当于sql语句 ：

select * from student where id =3;
————————————————
