1. 之前项目说明只是搭建一个网页,通过session来保存登录状态
2. 这个文档用于来设计如下功能
  1. 区分接口的API调用还是页面调用
  2. 用户-分组-资源添加修改表设计
  3. 配置文件读取
  4. 同一路由处理
  5. 统一配置错误处理
  6. 资源管理器将资源重定向
  7. 验证码
  8. 统一错误返回
  
  
1. 区分接口的API调用还是页面调用

  
  
2. 用户-分组-资源添加修改表设计
每个表要带几个时间
create_time
update_time
delete_time

资源表
id   id 
pid  父节点
type 资源类型
name 名称  
icon 图标
path 路径
stat 状态

角色表
id
name 角色名
stat 状态

用户表
id
name
...
role_id 角色ID

角色和资源对应表
id
role_id
res_id

//鉴权的一般思路
//1、判断当前的角色id roleid
//2、获取该角色所有的权限roleauth,获取系统全部权限allauth
//3、获取当前的uri := ctx.Request.RequestURI
//4、判断uri是否在allauth中,如果不在,则表面无需鉴权,通过,
//5、否则检测uri是否在roleauth中,如果是则通过,否则鉴权失败

=========================
CREATE TABLE resource(
  id INT PRIMARY KEY AUTO_INCREMENT COMMENT 'id',
  pid INT COMMENT '父节点',
  type INT COMMENT '资源类型',
  name VARCHAR(50) COMMENT '资源名',
  icon VARCHAR(50) COMMENT '图标',
  path VARCHAR(50) COMMENT '路径',
  stat INT COMMENT '状态',
  create_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  update_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP
) COMMENT='资源信息';

CREATE TABLE role(
  id INT PRIMARY KEY AUTO_INCREMENT COMMENT 'id',
  name VARCHAR(50) COMMENT '角色名',
  stat INT COMMENT '状态',
  create_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  update_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP
) COMMENT='角色信息';

CREATE TABLE role_resource(
  id INT PRIMARY KEY AUTO_INCREMENT COMMENT 'id',
  roleid INT COMMENT '角色ID',
  resourceid INT COMMENT '资源ID',
  create_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  update_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP
) COMMENT='关系信息';

CREATE TABLE user(
  id INT PRIMARY KEY AUTO_INCREMENT COMMENT 'id',
  name VARCHAR(50) COMMENT '用户名',
  password VARCHAR(200) COMMENT '密码',
  roleids VARCHAR(100) COMMENT '角色IDS',
  stat INT COMMENT '状态',
  create_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  update_time datetime DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP
) COMMENT='用户信息';

========================


3. 配置文件读取


8. 统一错误返回
定义protocol方法
type Gin struct {
	c *gin.Context
}

type response struct {
	Code string      `json "code"`
	Data interface{} `json "data"`
	Msg  string      `json "msg"`
}

func NewNetTools(c *gin.Context) *Gin {
	return &Gin{c}
}

func (this *Gin) SendNoramlResponse(code string, msg string, data interface{}) {
	this.c.JSON(200,
		response{
			Code: code,
			Data: data,
			Msg:  msg})
}

func (this *Gin) SendErrorResponse(err_rsp response) {
	this.c.JSON(
		200,
		err_rsp
	)
}

定义error
var (
	ErrorNoAuthUser   = &response{Code: "401", Msg: "No Auth User!!!", Data: ""}
	ErrorNoPermitUser = &response{Code: "403", Msg: "No Auth User!!!", Data: ""}
)

使用
common.NewNetTools(c).SendResponse("200", "log", "")
common.NewNetTools(c).SendErrorResponse(common.ErrorNoAuthUser)







