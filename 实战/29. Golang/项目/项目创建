参考 https://github.com/xinliangnote/go-gin-api/

1. 规划目录结构
├─ go-gin-api
│  ├─ app
│     ├─ config           //配置文件
│        ├─ config.go
│     ├─ controller       //控制器层
│        ├─ param_bind
│        ├─ param_verify
│        ├─ ...
│     ├─ model            //数据库ORM
│        ├─ proto
│        ├─ ...
│     ├─ repository       //数据库操作层
│        ├─ ...
│     ├─ route            //路由
│        ├─ middleware
│        ├─ route.go
│     ├─ service          //业务层
│        ├─ ...
│     ├─ util             //工具包
│        ├─ ...
│  ├─ vendor  //依赖包
│     ├─ ...
│  ├─ go.mod
│  ├─ go.sum
│  ├─ main.go //入口文件

2. 路由方案
配置路由(route.go)：指向controller的执行方法
func registerRouter(router *gin.Engine) {
    ProductRouter := engine.Group("")
    {
      // 新增产品
      ProductRouter.POST("/product", product.Add)
      // 更新产品
      ProductRouter.PUT("/product/:id", product.Edit)
      // 删除产品
      ProductRouter.DELETE("/product/:id", product.Delete)
      // 获取产品详情
      ProductRouter.GET("/product/:id", product.Detail)
    }
}

3. 参数绑定
参数绑定(param_bind/product.go)：
type ProductAdd struct {
	Name string `form:"name" json:"name" binding:"required"`
}
复制代码控制器调用(controller/product.go)：
if err := c.ShouldBind(&param_bind.ProductAdd{}); err != nil {
	utilGin.Response(-1, err.Error(), nil)
	return
}
复制代码咱们用 Postman 模拟 post 请求时，name 参数不传或传递为空，会出现：
Key: 'ProductAdd.Name' Error:Field validation for 'Name' failed on the 'required' tag
这就使用到了参数设置的 binding:"required"。
那么还能使用 binding 哪些参数，有文档吗？
有。Gin 使用 go-playground/validator.v8 进行验证，相关文档：
godoc.org/gopkg.in/go…
接下来，咱们实现一下自定义验证器。

自定义验证器
比如，有一个创建商品的接口，商品名称不能为空并且参数名称不能等于 admin。
类似于这种业务需求，无法 binding 现成的方法，需要我们自己写验证方法，才能实现。
自定义验证方法(param_verify/product.go)
func NameValid (
	v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value,
	field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string,
) bool {
	if s, ok := field.Interface().(string); ok {
		if s == "admin" {
			return false
		}
	}
	return true
}
复制代码参数绑定(param_bind/product.go)：
type ProductAdd struct {
	Name string `form:"name" json:"name" binding:"required,NameValid"`
}
复制代码同时还要绑定验证器:
// 绑定验证器
if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
	v.RegisterValidation("NameValid", param_verify.NameValid)
}
复制代码咱们用 Postman 模拟 post 请求时，name 参数不传或传递为空，会出现：
Key: 'ProductAdd.Name' Error:Field validation for 'Name' failed on the 'required' tag
name=admin 时：
Key: 'ProductAdd.Name' Error:Field validation for 'Name' failed on the 'NameValid' tag
OK，上面两个验证都生效了！

4.请求返回对象协议格式
制定 API 返回结构
{
    "code": 1,
    "msg": "",
    "data": null
}
复制代码API 接口的返回的结构基本都是这三个字段。
比如 code=1 表示成功，code=-1 表示失败。
msg 表示提示信息。
data 表示要返回的数据。
那么，我们怎么在 gin 框架中实现它，其实很简单 基于 c.JSON() 方法进行封装即可，直接看代码。
package util

import "github.com/gin-gonic/gin"

type Gin struct {
	Ctx *gin.Context
}

type response struct {
	Code     int         `json:"code"`
	Message  string      `json:"msg"`
	Data     interface{} `json:"data"`
}

func (g *Gin)Response(code int, msg string, data interface{}) {
	g.Ctx.JSON(200, response{
		Code    : code,
		Message : msg,
		Data    : data,
	})
	return
}

控制器调用(controller/product.go)：
utilGin := util.Gin{Ctx:c}
if err := c.ShouldBind(&param_bind.ProductAdd{}); err != nil {
	utilGin.Response(-1, err.Error(), nil)
	return
}
咱们用 Postman 模拟 post 请求时，name 参数不传或传递为空，会出现：
{
    "code": -1,
    "msg": "Key: 'ProductAdd.Name' Error:Field validation for 'Name' failed on the 'required' tag",
    "data": null
}
name=admin 时：
{
    "code": -1,
    "msg": "Key: 'ProductAdd.Name' Error:Field validation for 'Name' failed on the 'NameValid' tag",
    "data": null
}
复制代码OK，上面两个验证都生效了！

5. 异常捕获
什么是异常？
在 Go 中异常就是 panic，它是在程序运行的时候抛出的，当 panic 抛出之后，如果在程序里没有添加任何保护措施的话，控制台就会在打印出 panic 的详细情况，然后终止运行。
我们可以将 panic 分为两种：
一种是有意抛出的，比如，
panic("自定义的 panic 信息")
复制代码输出：
2019/09/10 20:25:27 http: panic serving [::1]:61547: 自定义的 panic 信息
goroutine 8 [running]:
...
复制代码一种是无意抛出的，写程序马虎造成，比如，
var slice = [] int {1, 2, 3, 4, 5}

slice[6] = 6
复制代码输出：
2019/09/10 15:27:05 http: panic serving [::1]:61616: runtime error: index out of range
goroutine 6 [running]:
...
复制代码想象一下，如果在线上环境出现了 panic，命令行输出的，因为咱们无法捕获就无法定位问题呀，想想都可怕，那么问题来了，怎么捕获异常？
怎么捕获异常？
当程序发生 panic 后，在 defer(延迟函数) 内部可以调用 recover 进行捕获。
不多说，直接上代码：
defer func() {
	if err := recover(); err != nil {
		fmt.Println(err)
	}
}()
复制代码在运行一下 “无意抛出的 panic ”，输出：
runtime error: index out of range
复制代码OK，错误捕获到了，这时我们可以进行做文章了。
做啥文章，大家应该都知道了吧：

获取运行时的调用栈（debug.Stack()）
获取当时的 Request 数据
组装数据，进行发邮件

那么，Go 怎么发邮件呀，有没有开源包呀？
当然有，请往下看。
封装发邮件方法
使用包：gopkg.in/gomail.v2
直接上代码：
func SendMail(mailTo string, subject string, body string) error {
	
	if config.ErrorNotifyOpen != 1 {
		return nil
	}

	m := gomail.NewMessage()

	//设置发件人
	m.SetHeader("From", config.SystemEmailUser)

	//设置发送给多个用户
	mailArrTo := strings.Split(mailTo, ",")
	m.SetHeader("To", mailArrTo...)

	//设置邮件主题
	m.SetHeader("Subject", subject)

	//设置邮件正文
	m.SetBody("text/html", body)

	d := gomail.NewDialer(config.SystemEmailHost, config.SystemEmailPort, config.SystemEmailUser, config.SystemEmailPass)

	err := d.DialAndSend(m)
	if err != nil {
		fmt.Println(err)
	}
	return err
}
复制代码在这块我加了一个开关，想开想关，您随意。
现在会发送邮件了，再整个邮件模板就完美了。
自定义邮件模板
如图：

这就是告警邮件的模板，还不错吧，大家还想记录什么，可以自定义去修改。
封装一个中间件
最后，封装一下。
直接上代码：
func SetUp() gin.HandlerFunc {

	return func(c *gin.Context) {
		defer func() {
			if err := recover(); err != nil {

				DebugStack := ""
				for _, v := range strings.Split(string(debug.Stack()), "\n") {
					DebugStack += v + "<br>"
				}

				subject := fmt.Sprintf("【重要错误】%s 项目出错了！", config.AppName)

				body := strings.ReplaceAll(MailTemplate, "{ErrorMsg}", fmt.Sprintf("%s", err))
				body  = strings.ReplaceAll(body, "{RequestTime}", util.GetCurrentDate())
				body  = strings.ReplaceAll(body, "{RequestURL}", c.Request.Method + "  " + c.Request.Host + c.Request.RequestURI)
				body  = strings.ReplaceAll(body, "{RequestUA}", c.Request.UserAgent())
				body  = strings.ReplaceAll(body, "{RequestIP}", c.ClientIP())
				body  = strings.ReplaceAll(body, "{DebugStack}", DebugStack)

				_ = util.SendMail(config.ErrorNotifyUser, subject, body)

				utilGin := util.Gin{Ctx: c}
				utilGin.Response(500, "系统异常，请联系管理员！", nil)
			}
		}()
		c.Next()
	}
}
复制代码当发生 panic 异常时，输出：
{
    "code": 500,
    "msg": "系统异常，请联系管理员！",
    "data": null
}
复制代码同时，还会收到一封 panic 告警邮件。

6.调用追踪


7.签名验证
为什么使用签名验证？
这个就不用多说了吧，主要是为了保证接口安全和识别调用方身份，基于这两点，咱们一起设计下签名。
调用方需要申请 App Key 和 App Secret，App Key 用来识别调用方身份，App Secret 用来加密生成签名使用。
当然生成的签名还需要满足以下几点：

可变性：每次的签名必须是不一样的。
时效性：每次请求的时效性，过期作废。
唯一性：每次的签名是唯一的。
完整性：能够对传入数据进行验证，防止篡改。

举个例子：
/api?param_1=xxx&param_2=xxx，其中 param_1 和 param_2 是两个参数。
如果增加了签名验证，需要再传递几个参数：

ak 表示App Key，用来识别调用方身份。
ts 表示时间戳，用来验证接口的时效性。
sn 表示签名加密串，用来验证数据的完整性，防止数据篡改。

sn 是通过 App Secret 和 传递的参数 进行加密的。
最终传递的参数如下：
/api?param_1=xxx&param_2=xxx&ak=xxx&ts=xxx&sn=xxx
在这要说一个调试技巧，ts 和 sn 参数每次都手动生成太麻烦了，当传递 debug=1 的时候，会返回 ts 和 sn , 具体看下代码就清楚了。
这篇文章分享三种实现签名的方式，分别是：MD5 组合加密、AES 对称加密、RSA 非对称加密。
废话不多说，进入主题。
MD5 组合
生成签名
首先，封装一个 Go 的 MD5 方法：
func MD5(str string) string {
	s := md5.New()
	s.Write([]byte(str))
	return hex.EncodeToString(s.Sum(nil))
}
复制代码进行加密：
appKey     = "demo"
appSecret  = "xxx"
encryptStr = "param_1=xxx&param_2=xxx&ak="+appKey+"&ts=xxx"

// 自定义验证规则
sn = MD5(appSecret + encryptStr + appSecret)
复制代码验证签名
通过传递参数，再次生成签名，如果将传递的签名与生成的签名进行对比。
相同，表示签名验证成功。
不同，表示签名验证失败。
中间件 - 代码实现
var AppSecret string

// MD5 组合加密
func SetUp() gin.HandlerFunc {

	return func(c *gin.Context) {
		utilGin := util.Gin{Ctx: c}

		sign, err := verifySign(c)

		if sign != nil {
			utilGin.Response(-1, "Debug Sign", sign)
			c.Abort()
			return
		}

		if err != nil {
			utilGin.Response(-1, err.Error(), sign)
			c.Abort()
			return
		}

		c.Next()
	}
}

// 验证签名
func verifySign(c *gin.Context) (map[string]string, error) {
	_ = c.Request.ParseForm()
	req   := c.Request.Form
	debug := strings.Join(c.Request.Form["debug"], "")
	ak    := strings.Join(c.Request.Form["ak"], "")
	sn    := strings.Join(c.Request.Form["sn"], "")
	ts    := strings.Join(c.Request.Form["ts"], "")

	// 验证来源
	value, ok := config.ApiAuthConfig[ak]
	if ok {
		AppSecret = value["md5"]
	} else {
		return nil, errors.New("ak Error")
	}

	if debug == "1" {
		currentUnix := util.GetCurrentUnix()
		req.Set("ts", strconv.FormatInt(currentUnix, 10))
		res := map[string]string{
			"ts": strconv.FormatInt(currentUnix, 10),
			"sn": createSign(req),
		}
		return res, nil
	}

	// 验证过期时间
	timestamp := time.Now().Unix()
	exp, _    := strconv.ParseInt(config.AppSignExpiry, 10, 64)
	tsInt, _  := strconv.ParseInt(ts, 10, 64)
	if tsInt > timestamp || timestamp - tsInt >= exp {
		return nil, errors.New("ts Error")
	}

	// 验证签名
	if sn == "" || sn != createSign(req) {
		return nil, errors.New("sn Error")
	}

	return nil, nil
}

// 创建签名
func createSign(params url.Values) string {
	// 自定义 MD5 组合
	return util.MD5(AppSecret + createEncryptStr(params) + AppSecret)
}

func createEncryptStr(params url.Values) string {
	var key []string
	var str = ""
	for k := range params {
		if k != "sn" && k != "debug" {
			key = append(key, k)
		}
	}
	sort.Strings(key)
	for i := 0; i < len(key); i++ {
		if i == 0 {
			str = fmt.Sprintf("%v=%v", key[i], params.Get(key[i]))
		} else {
			str = str + fmt.Sprintf("&%v=%v", key[i], params.Get(key[i]))
		}
	}
	return str
}
复制代码AES 对称加密
在使用前，咱们先了解下什么是对称加密？
对称加密就是使用同一个密钥即可以加密也可以解密，这种方法称为对称加密。
常用算法：DES、AES。
其中 AES 是 DES 的升级版，密钥长度更长，选择更多，也更灵活，安全性更高，速度更快，咱们直接上手 AES 加密。
优点
算法公开、计算量小、加密速度快、加密效率高。
缺点
发送方和接收方必须商定好密钥，然后使双方都能保存好密钥，密钥管理成为双方的负担。
应用场景
相对大一点的数据量或关键数据的加密。
生成签名
首先，封装 Go 的 AesEncrypt 加密方法 和 AesDecrypt 解密方法。
// 加密 aes_128_cbc
func AesEncrypt (encryptStr string, key []byte, iv string) (string, error) {
	encryptBytes := []byte(encryptStr)
	block, err   := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	blockSize := block.BlockSize()
	encryptBytes = pkcs5Padding(encryptBytes, blockSize)

	blockMode := cipher.NewCBCEncrypter(block, []byte(iv))
	encrypted := make([]byte, len(encryptBytes))
	blockMode.CryptBlocks(encrypted, encryptBytes)
	return base64.URLEncoding.EncodeToString(encrypted), nil
}

// 解密
func AesDecrypt (decryptStr string, key []byte, iv string) (string, error) {
	decryptBytes, err := base64.URLEncoding.DecodeString(decryptStr)
	if err != nil {
		return "", err
	}

	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	blockMode := cipher.NewCBCDecrypter(block, []byte(iv))
	decrypted := make([]byte, len(decryptBytes))

	blockMode.CryptBlocks(decrypted, decryptBytes)
	decrypted = pkcs5UnPadding(decrypted)
	return string(decrypted), nil
}

func pkcs5Padding (cipherText []byte, blockSize int) []byte {
	padding := blockSize - len(cipherText)%blockSize
	padText := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(cipherText, padText...)
}

func pkcs5UnPadding (decrypted []byte) []byte {
	length := len(decrypted)
	unPadding := int(decrypted[length-1])
	return decrypted[:(length - unPadding)]
}
复制代码进行加密：
appKey     = "demo"
appSecret  = "xxx"
encryptStr = "param_1=xxx&param_2=xxx&ak="+appKey+"&ts=xxx"

sn = AesEncrypt(encryptStr, appSecret)
复制代码验证签名
decryptStr = AesDecrypt(sn, app_secret)
复制代码将加密前的字符串与解密后的字符串做个对比。
相同，表示签名验证成功。
不同，表示签名验证失败。
中间件 - 代码实现
var AppSecret string

// AES 对称加密
func SetUp() gin.HandlerFunc {

	return func(c *gin.Context) {
		utilGin := util.Gin{Ctx: c}

		sign, err := verifySign(c)

		if sign != nil {
			utilGin.Response(-1, "Debug Sign", sign)
			c.Abort()
			return
		}

		if err != nil {
			utilGin.Response(-1, err.Error(), sign)
			c.Abort()
			return
		}

		c.Next()
	}
}

// 验证签名
func verifySign(c *gin.Context) (map[string]string, error) {
	_ = c.Request.ParseForm()
	req   := c.Request.Form
	debug := strings.Join(c.Request.Form["debug"], "")
	ak    := strings.Join(c.Request.Form["ak"], "")
	sn    := strings.Join(c.Request.Form["sn"], "")
	ts    := strings.Join(c.Request.Form["ts"], "")

	// 验证来源
	value, ok := config.ApiAuthConfig[ak]
	if ok {
		AppSecret = value["aes"]
	} else {
		return nil, errors.New("ak Error")
	}

	if debug == "1" {
		currentUnix := util.GetCurrentUnix()
		req.Set("ts", strconv.FormatInt(currentUnix, 10))

		sn, err := createSign(req)
		if err != nil {
			return nil, errors.New("sn Exception")
		}

		res := map[string]string{
			"ts": strconv.FormatInt(currentUnix, 10),
			"sn": sn,
		}
		return res, nil
	}

	// 验证过期时间
	timestamp := time.Now().Unix()
	exp, _    := strconv.ParseInt(config.AppSignExpiry, 10, 64)
	tsInt, _  := strconv.ParseInt(ts, 10, 64)
	if tsInt > timestamp || timestamp - tsInt >= exp {
		return nil, errors.New("ts Error")
	}

	// 验证签名
	if sn == "" {
		return nil, errors.New("sn Error")
	}

	decryptStr, decryptErr := util.AesDecrypt(sn, []byte(AppSecret), AppSecret)
	if decryptErr != nil {
		return nil, errors.New(decryptErr.Error())
	}
	if decryptStr != createEncryptStr(req) {
		return nil, errors.New("sn Error")
	}
	return nil, nil
}

// 创建签名
func createSign(params url.Values) (string, error) {
	return util.AesEncrypt(createEncryptStr(params), []byte(AppSecret), AppSecret)
}

func createEncryptStr(params url.Values) string {
	var key []string
	var str = ""
	for k := range params {
		if k != "sn" && k != "debug" {
			key = append(key, k)
		}
	}
	sort.Strings(key)
	for i := 0; i < len(key); i++ {
		if i == 0 {
			str = fmt.Sprintf("%v=%v", key[i], params.Get(key[i]))
		} else {
			str = str + fmt.Sprintf("&%v=%v", key[i], params.Get(key[i]))
		}
	}
	return str
}
复制代码RSA 非对称加密
和上面一样，在使用前，咱们先了解下什么是非对称加密？
非对称加密就是需要两个密钥来进行加密和解密，这两个秘钥分别是公钥（public key）和私钥（private key），这种方法称为非对称加密。
常用算法：RSA。
优点
与对称加密相比，安全性更好，加解密需要不同的密钥，公钥和私钥都可进行相互的加解密。
缺点
加密和解密花费时间长、速度慢，只适合对少量数据进行加密。
应用场景
适合于对安全性要求很高的场景，适合加密少量数据，比如支付数据、登录数据等。
创建签名
首先，封装 Go 的 RsaPublicEncrypt 公钥加密方法 和 RsaPrivateDecrypt 解密方法。
// 公钥加密
func RsaPublicEncrypt(encryptStr string, path string) (string, error) {
	// 打开文件
	file, err := os.Open(path)
	if err != nil {
		return "", err
	}
	defer file.Close()

	// 读取文件内容
	info, _ := file.Stat()
	buf := make([]byte,info.Size())
	file.Read(buf)

	// pem 解码
	block, _ := pem.Decode(buf)

	// x509 解码
	publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		return "", err
	}

	// 类型断言
	publicKey := publicKeyInterface.(*rsa.PublicKey)

	//对明文进行加密
	encryptedStr, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, []byte(encryptStr))
	if err != nil {
		return "", err
	}

	//返回密文
	return base64.URLEncoding.EncodeToString(encryptedStr), nil
}

// 私钥解密
func RsaPrivateDecrypt(decryptStr string, path string) (string, error) {
	// 打开文件
	file, err := os.Open(path)
	if err != nil {
		return "", err
	}
	defer file.Close()

	// 获取文件内容
	info, _ := file.Stat()
	buf := make([]byte,info.Size())
	file.Read(buf)

	// pem 解码
	block, _ := pem.Decode(buf)

	// X509 解码
	privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	if err != nil {
		return "", err
	}
	decryptBytes, err := base64.URLEncoding.DecodeString(decryptStr)

	//对密文进行解密
	decrypted, _ := rsa.DecryptPKCS1v15(rand.Reader,privateKey,decryptBytes)

	//返回明文
	return string(decrypted), nil
}

复制代码调用方 申请 公钥（public key），然后进行加密：
appKey     = "demo"
appSecret  = "公钥"
encryptStr = "param_1=xxx&param_2=xxx&ak="+appKey+"&ts=xxx"

sn = RsaPublicEncrypt(encryptStr, appSecret)
复制代码验证签名
decryptStr = RsaPrivateDecrypt(sn, app_secret)
复制代码将加密前的字符串与解密后的字符串做个对比。
相同，表示签名验证成功。
不同，表示签名验证失败。
中间件 - 代码实现
var AppSecret string

// RSA 非对称加密
func SetUp() gin.HandlerFunc {

	return func(c *gin.Context) {
		utilGin := util.Gin{Ctx: c}

		sign, err := verifySign(c)

		if sign != nil {
			utilGin.Response(-1, "Debug Sign", sign)
			c.Abort()
			return
		}

		if err != nil {
			utilGin.Response(-1, err.Error(), sign)
			c.Abort()
			return
		}

		c.Next()
	}
}

// 验证签名
func verifySign(c *gin.Context) (map[string]string, error) {
	_ = c.Request.ParseForm()
	req   := c.Request.Form
	debug := strings.Join(c.Request.Form["debug"], "")
	ak    := strings.Join(c.Request.Form["ak"], "")
	sn    := strings.Join(c.Request.Form["sn"], "")
	ts    := strings.Join(c.Request.Form["ts"], "")

	// 验证来源
	value, ok := config.ApiAuthConfig[ak]
	if ok {
		AppSecret = value["rsa"]
	} else {
		return nil, errors.New("ak Error")
	}

	if debug == "1" {
		currentUnix := util.GetCurrentUnix()
		req.Set("ts", strconv.FormatInt(currentUnix, 10))

		sn, err := createSign(req)
		if err != nil {
			return nil, errors.New("sn Exception")
		}

		res := map[string]string{
			"ts": strconv.FormatInt(currentUnix, 10),
			"sn": sn,
		}
		return res, nil
	}

	// 验证过期时间
	timestamp := time.Now().Unix()
	exp, _    := strconv.ParseInt(config.AppSignExpiry, 10, 64)
	tsInt, _  := strconv.ParseInt(ts, 10, 64)
	if tsInt > timestamp || timestamp - tsInt >= exp {
		return nil, errors.New("ts Error")
	}

	// 验证签名
	if sn == "" {
		return nil, errors.New("sn Error")
	}

	decryptStr, decryptErr := util.RsaPrivateDecrypt(sn, config.AppRsaPrivateFile)
	if decryptErr != nil {
		return nil, errors.New(decryptErr.Error())
	}
	if decryptStr != createEncryptStr(req) {
		return nil, errors.New("sn Error")
	}
	return nil, nil
}

// 创建签名
func createSign(params url.Values) (string, error) {
	return util.RsaPublicEncrypt(createEncryptStr(params), AppSecret)
}

func createEncryptStr(params url.Values) string {
	var key []string
	var str = ""
	for k := range params {
		if k != "sn" && k != "debug" {
			key = append(key, k)
		}
	}
	sort.Strings(key)
	for i := 0; i < len(key); i++ {
		if i == 0 {
			str = fmt.Sprintf("%v=%v", key[i], params.Get(key[i]))
		} else {
			str = str + fmt.Sprintf("&%v=%v", key[i], params.Get(key[i]))
		}
	}
	return str
}
复制代码如何调用？
与其他中间件调用方式一样，根据自己的需求自由选择。
比如，使用 MD5 组合：
.Use(sign_md5.SetUp())
复制代码使用 AES 对称加密：
.Use(sign_aes.SetUp())
复制代码使用 RSA 非对称加密：
.Use(sign_rsa.SetUp())
复制代码性能测试
既然 RSA 非对称加密，最安全，那么统一都使用它吧。
NO！NO！NO！绝对不行！
为什么我要激动，因为我以前遇到过这个坑呀，都是血泪的教训呀...
咱们挨个测试下性能：
MD5
func Md5Test(c *gin.Context) {
	startTime  := time.Now()
	appSecret  := "IgkibX71IEf382PT"
	encryptStr := "param_1=xxx&param_2=xxx&ak=xxx&ts=1111111111"
	count      := 1000000
	for i := 0; i < count; i++ {
		// 生成签名
		util.MD5(appSecret + encryptStr + appSecret)

		// 验证签名
		util.MD5(appSecret + encryptStr + appSecret)
	}
	utilGin := util.Gin{Ctx: c}
	utilGin.Response(1, fmt.Sprintf("%v次 - %v", count, time.Since(startTime)), nil)
}
复制代码模拟 一百万 次请求，大概执行时长在 1.1s ~ 1.2s 左右。
AES
func AesTest(c *gin.Context) {
	startTime  := time.Now()
	appSecret  := "IgkibX71IEf382PT"
	encryptStr := "param_1=xxx&param_2=xxx&ak=xxx&ts=1111111111"
	count      := 1000000
	for i := 0; i < count; i++ {
		// 生成签名
		sn, _ := util.AesEncrypt(encryptStr, []byte(appSecret), appSecret)

		// 验证签名
		util.AesDecrypt(sn, []byte(appSecret), appSecret)
	}
	utilGin := util.Gin{Ctx: c}
	utilGin.Response(1, fmt.Sprintf("%v次 - %v", count, time.Since(startTime)), nil)
}
复制代码模拟 一百万 次请求，大概执行时长在 1.8s ~ 1.9s 左右。
RSA
func RsaTest(c *gin.Context) {
	startTime  := time.Now()
	encryptStr := "param_1=xxx&param_2=xxx&ak=xxx&ts=1111111111"
	count      := 500
	for i := 0; i < count; i++ {
		// 生成签名
		sn, _ := util.RsaPublicEncrypt(encryptStr, "rsa/public.pem")

		// 验证签名
		util.RsaPrivateDecrypt(sn, "rsa/private.pem")
	}
	utilGin := util.Gin{Ctx: c}
	utilGin.Response(1, fmt.Sprintf("%v次 - %v", count, time.Since(startTime)), nil)
}
复制代码我不敢模拟 一百万 次请求，还不知道啥时候能搞定呢，咱们模拟 500 次试试。
模拟 500 次请求，大概执行时长在 1s 左右。
上面就是我本地的执行效果，大家可以质疑我的电脑性能差，封装的方法有问题...
你们也可以试试，看看性能差距是不是这么大。

8. API设计原则
API 接口设计规范
概述
这篇文章分享 API 接口设计规范，目的是提供给研发人员做参考。

规范是死的，人是活的，希望自己定的规范，不要被打脸。

路由命名规范
动作	前缀	备注
获取	get	get{XXX}
获取	get	get{XXX}List
新增	add	add{XXX}
修改	update	update{XXX}
保存	save	save{XXX}
删除	delete	delete{XXX}
上传	upload	upload{XXX}
发送	send	send{XXX}
请求方式
请求方式	描述
GET	获取数据
POST	新增数据
PUT	更新数据
DELETE	删除数据
请求参数
Query
url?后面的参数，存放请求接口的参数数据。

Header
请求头，存放公共参数、requestId、token、加密字段等。

Body
Body 体，存放请求接口的参数数据。

公共参数
APP 端请求

参数	说明	备注
network	网络	WIFI、4G
operator	运营商	中国联通/移动
platform	平台	iOS、Android
system	系统	ios 13.3、android 9
device	设备型号	iPhone XR、小米9
udid	设备唯一标示	
apiVersion	API 版本号	v1.1、v1.2
WEB 端请求

参数	说明	备注
appKey	授权Key	字符串
调用方需向服务方申请 appKey（请求时使用） 和 secretKey（加密时使用）。

安全规范
敏感参数加密处理

登录密码、支付密码，需加密后传输，建议使用非对称加密。

其他规范
参数命名规范 建议使用驼峰命名，首字母小写。
requestId 建议携带唯一标示追踪问题。
返回参数
参数	类型	说明	备注
code	Number	结果码	成功=1
失败=-1
未登录=401
无权限=403
showMsg	String	显示信息	系统繁忙，稍后重试
errorMsg	String	错误信息	便于研发定位问题
data	Object	数据	JSON 格式
若有分页数据返回的，格式如下：

{
    "code": 1,
    "showMsg": "success",
    "errorMsg": "",
    "data": {
        "list": [],
        "pagination": {
            "total": 100,
            "currentPage": 1,
            "prePageCount": 10
        }
    }
}
复制代码
安全规范
敏感数据脱敏处理

用户手机号、用户邮箱、身份证号、支付账号、邮寄地址等要进行脱敏，部分数据加 * 号处理。

其他规范
属性名命名时，建议使用驼峰命名，首字母小写。
属性值为空时，严格按类型返回默认值。
金额类型/时间日期类型的属性值，如果仅用来显示，建议后端返回可以显示的字符串。
业务逻辑的状态码和对应的文案，建议后端两者都返回。
调用方不需要的属性，不要返回。
签名设计
签名验证没有确定的规范，自己制定就行，可以选择使用 对称加密、非对称加密、单向散列加密 等，分享下原来写的签名验证，供参考。

Go 签名验证
PHP 签名验证
日志平台设计
日志平台有利于故障定位和日志统计分析。

日志平台的搭建可以使用的是 ELK 组件，使用 Logstash 进行收集日志文件，使用 Elasticsearch 引擎进行搜索分析，最终在 Kibana 平台展示出来。

幂等性设计
我们无法保证接口的每一次调用都是有返回结果的，要考虑到出现网络异常的情况。

举个例子，订单创建时，我们需要去减库存，这时接口发生了超时，调用方进行了重试，这时是否会多扣一次库存？

解决这类问题有 2 种方案：

一、服务方提供相应的查询接口，调用方在请求超时后进行查询，如果查到了，表示请求处理成功了，没查到就走失败流程。

二、调用方只管重试，服务方保证一次和多次的请求结果是一样的。

对于第二种方案，就需要服务方的接口支持幂等性。

大致设计思路是这样的：

调用接口前，先获取一个全局唯一的令牌（Token）
调用接口时，将 Token 放到 Header 头中
解析 Header 头，验证是否为有效 Token，无效直接返回失败
完成业务逻辑后，将业务结果与 Token 进行关联存储，设置失效时间
重试时不要重新获取 Token，用要上次的 Token

