0.常用模块
golang sync.map
golang httprouter
golang sync/atomic
golang unsafe
golang reflect
goland 简单聊天室服务端
golang io/ioutil包
golang net\http包
golang Timer和Ticker的使用
golang channel基本操作
golang 文件基本操作
golang json基本操作
golang strconv包部分函数使用
golang strings包部分函数使用
golang http下载文件
golang http上传文件
golang字符串拼接的几种比较

1. 字符串方法
strings

2. 字符串转化
strconv

3. time包的使用
    //time.Time代表一个纳秒精度的时间点
    var t time.Time;
    //返回当前时间
    t = time.Now();
    //当前时间的unix值
    time.Now().Unix()
    
    //根据时间戳返回本地时间
    //参数分别表示秒数和纳秒数
    t2 := time.Unix(1487780010, 0);
    fmt.Println(t2);
    
    //根据指定时间返回time.Time
    //分别指定年，月，日，时，分，秒，纳秒，时区
    t3 := time.Date(2017, time.Month(5), 26, 15, 30, 20, 0, t.Location());
    fmt.Println(t3);
    
    //格式化输出时间
    t4 := time.Now();
    fmt.Println(t4.Format("2006-01-02 15:04:05"));
    
    //获取时间信息
    t5 := time.Now();
    //返回日期
    fmt.Println(t5.Date());
    //返回年
    fmt.Println(t5.Year());
    //返回月
    fmt.Println(t5.Month());
    //返回日
    fmt.Println(t5.Day());
    //返回星期
    fmt.Println(t5.Weekday());
    //返回ISO 9601标准下的年份和星期编号
    fmt.Println(t5.ISOWeek());
    //返回时分秒
    fmt.Println(t5.Clock());
    //返回小时
    fmt.Println(t5.Hour());
    //返回分钟
    fmt.Println(t5.Minute());
    //返回秒
    fmt.Println(t5.Second());
    //返回纳秒
    fmt.Println(t5.Nanosecond());
    //返回一年中对应的天
    fmt.Println(t5.YearDay());
    //返回时区
    fmt.Println(t5.Location());
    //返回时区的规范名,时区相对于UTC的时间偏移量(秒)
    fmt.Println(t5.Zone());
    //返回时间戳
    fmt.Println(t5.Unix());
    //返回纳秒时间戳
    fmt.Println(t5.UnixNano());
    
    //时间的比较与计算
    t6 := time.Now();
    //是否零时时间
    fmt.Println(t6.IsZero());
    //t6时间在t5时间之后，返回真
    fmt.Println(t6.After(t5));
    //t5时间在t6时间之前，返回真
    fmt.Println(t5.Before(t6));
    //时间是否相同
    fmt.Println(t6.Equal(t6));
    //返回t6加上纳秒的时间
    fmt.Println(t6.Add(10000));
    //返回两个时间之差的纳秒数
    fmt.Println(t6.Sub(t5));
    //返回t6加1年，1月，1天的时间
    fmt.Println(t6.AddDate(1, 1, 1));
 
 //时间段time.Duration
    dur := time.Duration(6666666600000);
    //返回字符串表示
    fmt.Println(dur.String());
    //返回小时表示
    fmt.Println(dur.Hours());
    //返回分钟表示
    fmt.Println(dur.Minutes());
    //返回秒表示
    fmt.Println(dur.Seconds());
    //返回纳秒表示
    fmt.Println(dur.Nanoseconds());

 //定时器time.Timer
    //创建一个1秒后触发定时器
    timer1 := time.NewTimer(time.Second * 1);
    <-timer1.C;
    fmt.Println("timer1 end");
 
    //1秒后运行函数
    time.AfterFunc(time.Second * 1, func() {
        fmt.Println("wait 1 second");
    });
    time.Sleep(time.Second * 3);
 
    //打点器time.Ticker
    //创建一个打点器，在固定1秒内重复执行
    ticker := time.NewTicker(time.Second);
    num := 1;
    for {
        if num > 5 {
            //大于5次关闭打点器
            ticker.Stop();
            break;
        }
        //否则从打点器中获取chan
        select {
        case <-ticker.C:
            num++;
            fmt.Println("1 second...");
        }
    }
 
 ==============================================
  time.NewTimer(2 * time.Second)
  func AfterFunc(d Duration, f func()) *Timer // 在时间d后自动执行函数f
  func After(d Duration) <-chan Time { return NewTimer(d).C }
  func (t *Timer) Reset(d Duration) bool
  func (t *Timer) Stop() bool
  
  
  
  time.Ticker
  如果学会了Timer那么Ticker就很简单了，Timer和Ticker结构体的结构是一样的，举一反三，其实Ticker就是一个重复版本的Timer，它会重复的在时间d后向Ticker中写数据

  func NewTicker(d Duration) *Ticker // 新建一个Ticker
  func (t *Ticker) Stop() // 停止Ticker
  func Tick(d Duration) <-chan Time // Ticker.C 的封装
  Ticker 和 Timer 类似，区别是：Ticker 中的runtimeTimer字段的 period 字段会赋值为 NewTicker(d Duration) 中的d，表示每间隔d纳秒，定时器就会触发一次。

  除非程序终止前定时器一直需要触发，否则，不需要时应该调用 Ticker.Stop 来释放相关资源。
  如果程序终止前需要定时器一直触发，可以使用更简单方便的 time.Tick 函数，因为 Ticker 实例隐藏起来了，因此，该函数启动的定时器无法停止。
  那么这样我们就可以把发"I Love You!"的例子写得简单一些。

  func main() {
      //定义一个ticker
      ticker := time.NewTicker(time.Millisecond * 500)
      //Ticker触发
      go func() {
          for t := range ticker.C {
              fmt.Println(t)
              fmt.Println("I Love You!")
          }
      }()

      time.Sleep(time.Second * 18)
      //停止ticker
      ticker.Stop()
  }
  定时器的实际应用
  在实际开发中，定时器用的较多的会是 Timer，如模拟超时，而需要类似 Tiker 的功能时，可以使用实现了 cron spec 的库 cron。

 
 
 //时间的序列化
    t7 := time.Now();
    //序列化二进制
    bin, _ := t7.MarshalBinary();
    //反序列化二进制
    t7.UnmarshalBinary(bin)
    fmt.Println(t7);
    //序列化json
    json, _ := t7.MarshalJSON();
    fmt.Println(string(json));
    //反序列化json
    t7.UnmarshalJSON(json);
    fmt.Println(t7);
    //序列化文本
    txt, _ := t7.MarshalText();
    fmt.Println(string(txt));
    //反序列化文本
    t7.UnmarshalText(txt);
    fmt.Println(t7);
    //gob编码
    gob, _ := t7.GobEncode();
    t7.GobDecode(gob);
    fmt.Println(t7);


4. ioutil包
    r1 := strings.NewReader("aaa")
    //返回ReadCloser对象提供close函数
    rc1 := ioutil.NopCloser(r1)
    defer rc1.Close()
    
    // Discard 是一个 io.Writer 接口，调用它的 Write 方法将不做任何事情
    // 并且始终成功返回。
    var Discard io.Writer = devNull(0)

    // ReadAll 读取 r 中的所有数据，返回读取的数据和遇到的错误。
    // 如果读取成功，则 err 返回 nil，而不是 EOF，因为 ReadAll 定义为读取
    // 所有数据，所以不会把 EOF 当做错误处理。
    func ReadAll(r io.Reader) ([]byte, error)

    // ReadFile 读取文件中的所有数据，返回读取的数据和遇到的错误。
    // 如果读取成功，则 err 返回 nil，而不是 EOF
    func ReadFile(filename string) ([]byte, error)

    // WriteFile 向文件中写入数据，写入前会清空文件。
    // 如果文件不存在，则会以指定的权限创建该文件。
    // 返回遇到的错误。
    func WriteFile(filename string, data []byte, perm os.FileMode) error

    // ReadDir 读取指定目录中的所有目录和文件（不包括子目录）。
    // 返回读取到的文件信息列表和遇到的错误，列表是经过排序的。
    func ReadDir(dirname string) ([]os.FileInfo, error)

    // NopCloser 将 r 包装为一个 ReadCloser 类型，但 Close 方法不做任何事情。
    func NopCloser(r io.Reader) io.ReadCloser

    // TempFile 在 dir 目录中创建一个以 prefix 为前缀的临时文件，并将其以读
    // 写模式打开。返回创建的文件对象和遇到的错误。
    // 如果 dir 为空，则在默认的临时目录中创建文件（参见 os.TempDir），多次
    // 调用会创建不同的临时文件，调用者可以通过 f.Name() 获取文件的完整路径。
    // 调用本函数所创建的临时文件，应该由调用者自己删除。
    func TempFile(dir, prefix string) (f *os.File, err error)

    // TempDir 功能同 TempFile，只不过创建的是目录，返回目录的完整路径。
    func TempDir(dir, prefix string) (name string, err error)

5. byte.buffer缓冲器
    声明一个Buffer的四种方法：
    var b bytes.Buffer       //直接定义一个Buffer变量，不用初始化，可以直接使用
    b := new(bytes.Buffer)   //使用New返回Buffer变量
    b := bytes.NewBuffer(s []byte)   //从一个[]byte切片，构造一个Buffer
    b := bytes.NewBufferString(s string)   //从一个string变量，构造一个Buffer

    往Buffer中写入数据
    b.Write(d []byte)        //将切片d写入Buffer尾部
    b.WriteString(s string)  //将字符串s写入Buffer尾部
    b.WriteByte(c byte)     //将字符c写入Buffer尾部
    b.WriteRune(r rune)     //将一个rune类型的数据放到缓冲器的尾部
    b.WriteTo(w io.Writer)  //将Buffer中的内容输出到实现了io.Writer接口的可写入对象中

    注：将文件中的内容写入Buffer,则使用ReadForm(i io.Reader)


    从Buffer中读取数据到指定容器
    c := make([]byte,8)
    b.Read(c)      //一次读取8个byte到c容器中，每次读取新的8个byte覆盖c中原来的内容
    b.ReadByte()   //读取第一个byte，b的第1个byte被拿掉，赋值给a => a, _ := b.ReadByte()

    b.ReadRune()   //读取第一个rune，b的第1个rune被拿掉，赋值给r => r, _ := b.ReadRune()
    b.ReadBytes(delimiter byte)   //需要一个byte作为分隔符，读的时候从缓冲器里找第一个出现的分隔符（delim），找到后，把从缓冲器头部开始到分隔符之间的所有byte进行返回，作为byte类型的slice，返回后，缓冲器也会空掉一部分
    b.ReadString(delimiter byte)  //需要一个byte作为分隔符，读的时候从缓冲器里找第一个出现的分隔符（delim），找到后，把从缓冲器头部开始到分隔符之间的所有byte进行返回，作为字符串返回，返回后，缓冲器也会空掉一部分
    b.ReadForm(i io.Reader)  //从一个实现io.Reader接口的r，把r里的内容读到缓冲器里，n 返回读的数量
        file, _ := os.Open("./text.txt")    
        buf := bytes.NewBufferString("Hello world")    
        buf.ReadFrom(file)              //将text.txt内容追加到缓冲器的尾部    
        fmt.Println(buf.String())

    清空数据
    b.Reset()

    字符串化
    b.String()

    ===============使用实例:
    binary作用把可读写byte流转数据类型 或者把数据类型转可读写byte流
    buffer的话是转换为可读写流
    
    读取的话首先读取到byte流转为buffer然后用binary读取
    写入的话buffer构造后然后通过binary把数据类型转为byte流写入缓冲后统一写到可写流
    
  服务端：
  package network

    import (
        "net"
        "bufio"
        "bytes"
        "encoding/binary"
    )

    type TcpClient struct {
        tag  string
        conn net.Conn
        r    *bufio.Reader
    }

    func NewTcpClint(conn net.Conn) *TcpClient {
        return &TcpClient{conn: conn, r: bufio.NewReader(conn)}
    }

    func (c *TcpClient) LocalAddr() net.Addr {
        return c.conn.LocalAddr()
    }

    func (c *TcpClient) RemoteAddr() net.Addr {
        return c.conn.RemoteAddr()
    }

    func (c *TcpClient) Close() error {
        return c.conn.Close()
    }

    func (c *TcpClient) Write(message []byte) (int, error) {
        // 读取消息的长度
        var length = int32(len(message))
        var pkg = new(bytes.Buffer)
        //写入消息头
        err := binary.Write(pkg, binary.BigEndian, length)
        if err != nil {
            return 0, err
        }
        //写入消息体
        err = binary.Write(pkg, binary.BigEndian, message)
        if err != nil {
            return 0, err
        }
        nn, err := c.conn.Write(pkg.Bytes())
        if err != nil {
            return 0, err
        }
        return nn, nil
    }

    func (c *TcpClient) Read() ([]byte, error) {
        // Peek 返回缓存的一个切片，该切片引用缓存中前 n 个字节的数据，
        // 该操作不会将数据读出，只是引用，引用的数据在下一次读取操作之
        // 前是有效的。如果切片长度小于 n，则返回一个错误信息说明原因。
        // 如果 n 大于缓存的总大小，则返回 ErrBufferFull。
        lengthByte, err := c.r.Peek(4)
        if err != nil {
            return nil, err
        }
        //创建 Buffer缓冲器
        lengthBuff := bytes.NewBuffer(lengthByte)
        var length int32
        // 通过Read接口可以将buf中得内容填充到data参数表示的数据结构中
        err = binary.Read(lengthBuff, binary.BigEndian, &length)
        if err != nil {
            return nil, err
        }
        // Buffered 返回缓存中未读取的数据的长度
        if int32(c.r.Buffered()) < length+4 {
            return nil, err
        }
        // 读取消息真正的内容
        pack := make([]byte, int(4+length))
        // Read 从 b 中读出数据到 p 中，返回读出的字节数和遇到的错误。
        // 如果缓存不为空，则只能读出缓存中的数据，不会从底层 io.Reader
        // 中提取数据，如果缓存为空，则：
        // 1、len(p) >= 缓存大小，则跳过缓存，直接从底层 io.Reader 中读
        // 出到 p 中。
        // 2、len(p) < 缓存大小，则先将数据从底层 io.Reader 中读取到缓存
        // 中，再从缓存读取到 p 中。
        _, err = c.r.Read(pack)
        if err != nil {
            return nil, err
        }
        return pack[4:], nil
    }


    package controller

    import (
        "fmt"
        "test/tcp/network"
        "io"
        "net"
    )

    func ServerRun() {
        lister, err := net.Listen("tcp", "192.168.2.28:8888")
        fmt.Println("服务启动成功：192.168.2.28:8888")
        CheckErr(err)
        defer lister.Close()
        for {
            conn, err := lister.Accept()
            CheckErr(err)
            fmt.Println("用户接入")
            client := network.NewTcpClint(conn)
            go func() {
                defer client.Close()
                for {
                    data, err := client.Read()
                    if err == io.EOF {
                        fmt.Println("断开链接")
                        return
                    }
                    if err != nil {
                        continue
                    }
                    switchController(data, client)
                }
            }()
        }
    }
    func CheckErr(err error) {
        if err != nil {
            panic(err)
        }
    }

    func switchController(data []byte, c *network.TcpClient) {
        fmt.Println("读到的数据: " + string(data))
        switch string(data) {
        case "ping":
            c.Write([]byte("pong"))
            fmt.Println("发出的数据: pong")
            break
        }
    }
    
    客户端
    package main

    import (
        "testing"
        "net"
        "log"
        "fmt"
        "encoding/binary"
        "bytes"
        "time"
    )

    func Test(t *testing.T) {
        conn, err := net.Dial("tcp", "192.168.2.28:8888")
        if err != nil {
            log.Println("dial error:", err)
            return
        }
        defer conn.Close()
        for {
            data, _ := Encode("1")
            time.Sleep(time.Second * 4)
            _, err := conn.Write(data)
            fmt.Println(err)
        }
    }
    func Encode(message string) ([]byte, error) {
        // 读取消息的长度
        var length = int32(len(message))
        var pkg = new(bytes.Buffer)
        // 写入消息头
        err := binary.Write(pkg, binary.BigEndian, length)
        if err != nil {
            return nil, err
        }
        // 写入消息实体
        err = binary.Write(pkg, binary.BigEndian, []byte(message))
        if err != nil {
            return nil, err
        }
        return pkg.Bytes(), nil
    }
    =================
    1、golang包中的binary包是什么？
    2、binary为我们开发者提供了哪些内容？以及怎么使用？
    3、编解码有哪几种方法？

    转化成二进制格式与原本数据转字符串相比会更节省空间

    一、golang包中的binary包是什么？
    此包实现了对数据与byte之间的转换，以及varint的编解码。

    二、binary为我们开发者提供了哪些内容？以及怎么使用？
    数据的byte序列化转换

    func Read(r io.Reader, order ByteOrder, data interface{}) error
    func Write(w io.Writer, order ByteOrder, data interface{}) error
    func Size(v interface{}) int
    uvarint和varint的编解码

    func PutUvalint(buf []byte, x uint64) int
    func PutVarint(buf []byte, x int64) int
    func Uvarint(buf []byte) (uint64, int)
    func Varint(buf []byte) (int64, int)
    func ReadUvarint(r io.ByteReader) (uint64, error)
    func ReadVarint(r io.ByteReader) (int64, error)

6. bufio
    1、Reader类型

    type Reader struct {
        buf             []byte      // 缓存
        rd              io.Reader   // 底层的io.Reader 
        r, w            int
        err             error       // 读过程中遇到的错误
        lastByte        int         // 最后一次读到的字节      
        lastRuneSize    int         // 最后一次读到的Rune的大小  
    }

    NewReaderSize
    func NewReaderSize(rd io.Reader, size int) *Reader
    作用：NewReaderSize将rd封装成一个带缓存的bufio.Reader对象。缓存大小由size指定（如果小于16则会被设为16）。如果rd的基类型就是有足够缓存的bufio.Reader类型，则直接将rd转换为基类型返回。
    NewReader

    func NewReader(rd io.Reader) *Reader
    funcReader相当于NewReaderSize(rd, 4096)
    Peek

    func (b *Reader) Peek(n int) ([]byte, error)
    Peek返回缓存的一个切片，该切片引用缓存中前n个字节的数据，该操作不会将数据读出，只是引用，引用的数据在下一次读取操作之前有效的。如果切片长度小于n，则返回一个错误信息说明原因。如果n大于缓存的总大小，则返回ErrBufferFull。
    Read

    func (b *Reader) Read(p []byte) (n int, err error)
    Read从b中数据到p中，返回读出的字节数和遇到的错误。如果缓存不为空，则只能读出缓冲中的数据，不会从底层io.Reader中提取数据，如果缓存为空，则：
    1、len(p) >= 缓存大小，则跳过缓存，直接从底层io.Reader中读出到p中
    2、len(p)< 缓存大小，则先将数据从底层io.Reader中读取到缓存中，再从缓存读取到p中。
    Buffered

    func (b *Reader) Buffered() int
    Buffered返回缓存中未读取的数据的长度。
    Discard

    func (b *Reader) Discard(n int) (discarded int, err error)
    Discard跳过后续的n个字节的数据，返回跳过的字节数。

    Writer类型和方法
    write结构

    type Write struct {
        err error       // 写过程中遇到的错误
        buf []byte      // 缓存
        n   int         // 当前缓存中的字节数
        wr  io.Writer   // 底层的io.Writer对象
    }
    NewWriteSize

    func NewWriteSize(wr io.Write, size int) *Write
    NewWriterSize将wr封装成一个带缓存的bufio.Writer对象，缓存大小由size指定（如果小于4096则会被设置未4096）。
    NewWrite

    func NewWriter(wr io.Writer) *Writer
    NewWriter相等于NewWriterSize(wr, 4096)

    WriteString

    func (b *Write) WriteString(s string) (int, error)
    WriteString功能同Write，只不过写入的是字符串
    WriteRune

    func (b *Writer) WriteRune(r rune) (size int, err error)
    WriteRune向b写入r的UTF-8编码，返回r的编码长度。
    Flush

    func (b *Writer) Flush() error
    Available

    func (b *Writer) Available() int
    Available 返回缓存中未使用的空间的长度
    Buffered

    func (b *Writer) Buffered() int
    Buffered返回缓存中未提交的数据长度
    Reset

    func (b *Write) Reset(w io.Writer)
    Reset将b的底层Write重新指定为w，同时丢弃缓存中的所有数据，复位所有标记和错误信息。相当于创建了一个新的bufio.Writer。






