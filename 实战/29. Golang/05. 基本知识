Go语言字符串基本知识:
一个字符串是一个不可改变的字节序列，字符串可以包含任意的数据

Go语言的字符有以下两种：
一种是 uint8 类型，或者叫 byte 型，代表了 ASCII 码的一个字符。
另一种是 rune 类型，代表一个 UTF-8 字符，当需要处理中文、日文或者其他复合字符时，则需要用到 rune 类型。rune 类型等价于 int32 类型。

1.  可以按照数组方式访问
    字符串的内容（纯字节）可以通过标准索引法来获取，在方括号[]内写入索引，索引从 0 开始计数：
    字符串 str 的第 1 个字节：str[0]
    第 i 个字节：str[i - 1]
    最后 1 个字节：str[len(str)-1]

    需要注意的是，这种转换方案只对纯 ASCII 码的字符串有效。
    注意：获取字符串中某个字节的地址属于非法行为，例如 &str[i]。
 
 
 2. 字符串拼接
    两个字符串 s1 和 s2 可以通过 s := s1 + s2 拼接在一起。将 s2 追加到 s1 尾部并生成一个新的字符串 s。
    也可以使用“+=”来对字符串进行拼接：

    s := "hel" + "lo,"
    s += "world!"
    fmt.Println(s) //输出 “hello, world!”
    
    
 3. 定义多行字符串
    const str = `第一行
    第二行
    第三行
    \r\n
    `
    fmt.Println(str)
    
====================
例子：
下面用一个简单的程序来演示字符类型：

package main
import (
    "fmt"
    "reflect"
)
func main() {
    r := '我'
    fmt.Printf("%q的类型为：%t 二进制为：%b\n", r, r, r)
    rType := reflect.TypeOf(r).Kind()
    fmt.Printf("r的实际类型为：%s\n", rType)
}

程序输出：
'我'的类型为：%!t(int32=25105) 二进制为：110001000010001
r的实际类型为：int32

====================
Go语言的字符串是以UTF-8格式编码并存储的，下面有一个简单的例子：

package main
import (
    "fmt"
)
func main() {
    s := "我"
    fmt.Printf("s的类型为：%t, 长度为：%d, 16进制为：%x\n", s, len(s), s)
    for i, b := range []byte(s) {
        fmt.Printf("第%d个字节为：%b\n", i, b)
    }

程序输出:

s的类型为：%!t(string=我), 长度为：3, 16进制为：e68891
第0个字节为：11100110
第1个字节为：10001000
第2个字节为：10010001

变量s中存放的是这个字符串的UTF-8编码，当你使用len(s)函数获取字符串的长度时，获取的是该字符串的UTF-8编码长度，存储一个字符可能需要 2个、3个或者4个字节，它是不固定的。

UTF-8的编码遵循如下2条规则：

对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。
对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。


===========================================================================
rune数据类型
rune是Go语言中一种特殊的数据类型,它是int32的别名,几乎在所有方面等同于int32,用于区分字符值和整数值

package main

import "fmt"
func main() {

    var str = "hello 世界"
    fmt.Println("len(str):", len(str))

}

这段代码的执行结果为:
len(str):12

从字符串字面值看len(str)的结果应该是8,但在Golang中string类型的底层是通过byte数组实现的,在unicode编码中,中文字符占两个字节,而在utf-8编码中,中文字符占三个字节而Golang的默认编码正是utf-8.
如果想要获得真实的字符串长度而不是其所占用字节数,有两种方法实现
方法一:

使用unicode/utf-8包中的RuneCountInString方法
str := "hello 世界"
fmt.Println("RuneCountInString:", utf8.RuneCountInString(str))

方法二:
将字符串转换为rune类型的数组再计算长度
str := "hello 世界"
fmt.Println("rune:", len([]rune(str)))



================================================================================
Go strings 字符串处理包常用方法详解
golang字符串相关操作主要使用strings包下相对应方法，本文主要介绍strings包下一些常用方法的使用方法。
函数：Contain(s,str string) bool
说明：查找子串是否在指定的字符串中
实例:

package main
import (
    "fmt"
    "strings"
)
func main() {
    fmt.Println(strings.Contains("TigerwolfC", "wolf")) //true
    fmt.Println(strings.Contains("TigerwolfC", "bar")) //false
    fmt.Println(strings.Contains("TigerwolfC", ""))    //true
    fmt.Println(strings.Contains("", ""))    //true 这里要特别注意
    fmt.Println(strings.Contains("我是中国人", "我"))     //true
}

函数: ContainsAny(s, chars string) bool
说明: 判断字符串 s 中是否包含 chars 中的任何一个字符,如果有返回 true,否则返回false
实例:

 str := "Hello World"
 fmt.Println(strings.ContainsAny(str, "W"))          // true
 fmt.Println(strings.ContainsAny("foo", ""))          // false
 fmt.Println(strings.ContainsAny(str, "def"))        // true
 fmt.Println(strings.ContainsAny("", ""))             // false

函数: Count(s, sep string) int
说明: 判断字符 sep 在字符串 s 总共出现的次数,如果不存在返回0
实例:

 str := "Hello World"
 fmt.Println(strings.Count(str, "e"))   //程序输出 1
 str1 := "Hello Weed"
 fmt.Println(strings.Count(str1, "e"))   //程序输出 3
 str2 := "Hello World"
 fmt.Println(strings.Count(str2, "p"))   //程序输出 0

函数: EqualFold(s, t string) bool
说明: 判断字符串 s 是否与字符串 t 相等，并且不区分大小写
实例:
str := "Hello World"
fmt.Println(strings.EqualFold(str, "hello world"))  //程序输出 true


函数: Fields(s string) []string
说明: 将字符串 s 以空格为分隔符拆分成若干个字符串，若成功则返回分割后的字符串切片
实例:

  str := "Hello World"
  for _, v := range strings.Fields(str) {
        fmt.Println(v)
   }
//程序输出 “Hello” 和 "World"

函数: HasPrefix(s, prefix string) bool
说明: 判断字符串 s 是否是以字符 prefix 开头，如果是返回 true 否则返回 false
实例:

  str := "Hello World"
  fmt.Println(strings.HasPrefix(str, "He"))  //程序输出 true
  
函数: HasSuffix(s, suffix string) bool
说明: 判断字符串 s 是否是以字符 suffix 结束，如果是返回 true 否则返回 false
实例:

str := "Hello World"
fmt.Println(strings.HasSuffix("str ", "orld")) //程序输出 true

函数: Index(s, sep string) int
说明: 判断字符 sep 在字符串 s 中第一次出现的位置，如果成功则返回sep位置的索引，如果字符 sep 不在字符串 s 中则返回 -1
实例:

 str := "Hello World"
 fmt.Println(strings.Index(str, "e"))   //程序输出 1
 fmt.Println(strings.Index(str, "c"))   //程序输出 -1
 
函数: func LastIndex(s, sep string) int
说明:返回子串 sep 在字符串 s 中最后一次出现的位置，如果找不到，则返回 -1，如果 sep 为空，则返回字符串的长度
实例：

 str := "Hello World"
 fmt.Println(strings.LastIndex(str, "h"))   //程序输出 -1
 fmt.Println(strings.LastIndex(str, "o"))   //程序输出 7
 fmt.Println(strings.LastIndex(str, ""))    //程序输出 11
 
函数:func IndexAny(s, chars string) int
说明:返回字符串 chars 中的任何一个字符在字符串 s 中第一次出现的位置, 如果找不到，则返回 -1，如果 chars 为空，则返回 -1
实例：

str := "Hello World"
fmt.Println(strings.IndexAny(str, "abc"))   //程序输出 -1
fmt.Println(strings.IndexAny(str, "dof"))   //程序输出 4
fmt.Println(strings.IndexAny(str, ""))      //程序输出 -1

函数:func Join(a []string, sep string) string
说明:Join 将 a 中的子串连接成一个单独的字符串，子串之间用 sep 分隔
实例：
s := []string{"foo", "baa", "bae"}
fmt.Println(strings.Join(s, ", ")) // 返回字符串：foo, baa, bae

函数:func Repeat(s string, count int) string
说明:将 count 个字符串 s 连接成一个新的字符串
实例：
s := "Good!"
fmt.Println(strings.Repeat(s, 3)) // "Good!Good!Good!"

函数:func ToUpper(s string) string
说明:将 s 中的所有字符修改为其大写格式,对于非 ASCII 字符，它的大写格式需要查表转换
// ToLower

函数:func ToLower(s string) string
说明:将 s 中的所有字符修改为其小写格式,对于非 ASCII 字符，它的小写格式需要查表转换

函数:func ToTitle(s string) string
说明:ToTitle 将 s 中的所有字符修改为其 Title 格式,大部分字符的 Title 格式就是其 Upper 格式,只有少数字符的 Title 格式是特殊字符, 这里的 ToTitle 主要给 Title 函数调用

s := "heLLo worLd Ａｂｃ"
fmt.Println(us := strings.ToUpper(s)) // "HELLO WORLD ＡＢＣ"
fmt.Println(strings.ToLower(s)) // "hello world ａｂｃ"
fmt.Println(strings.ToTitle(s)) // "HELLO WORLD ＡＢＣ"

函数:func Trim(s string, cutset string) string
说明:将删除 s 首尾连续的包含在 cutset 中的字符

函数:func TrimLeft(s string, cutset string) string
说明:TrimLeft 将删除 s 头部连续的包含在 cutset 中的字符

函数:func TrimRight(s string, cutset string) string
说明:TrimRight 将删除 s 尾部连续的包含在 cutset 中的字符

实例：
s := " Hello 世界! "
ts := strings.Trim(s, " Helo!")
fmt.Printf("%q\n", ts) // "世界"
fmt.Printf("[%q]", strings.Trim(" !!! Achtung !!! ", "! ")) // ["Achtung"]

tr := strings.TrimLeft(s, " Helo")
fmt.Printf("%q\n", tr) // "世界! "

tx := strings.TrimRight(s, " 世界!")
fmt.Printf("%q\n", tx) // " Hello"


// TrimPrefix 删除 s 头部的 prefix 字符串
// 如果 s 不是以 prefix 开头，则返回原始 s

函数:func TrimPrefix(s, prefix string) string
说明:TrimPrefix 删除 s 头部的 prefix 字符串,如果 s 不是以 prefix 开头，则返回原始 s
实例：

s := "@Hello@世界!"
ts := strings.TrimPrefix(s, "@")
fmt.Printf("%q\n", ts) // " Hello@世界!"
tx:= strings.TrimPrefix(s, "$")
fmt.Printf("%q\n", tx) // " @Hello@世界!"

函数:func TrimSuffix(s, suffix string) string
说明:TrimSuffix 删除 s 尾部的 suffix 字符串,如果 s 不是以 suffix 结尾，则返回原始 s
实例：

s := "Hello 世界!!!!!"
ts := strings.TrimSuffix(s, "!!!!")
fmt.Printf("%q\n", ts) // "Hello 世界!"

函数:func Replace(s, old, new string, n int) string
说明:Replace 返回 s 的副本，并将副本中的 old 字符串替换为 new 字符串替换次数为 n 次，如果 n 为 -1，则全部替换，如果 old 为空，则在副本的每个字符之间都插入一个 new
实例：

fmt.Println(strings.Replace("ABAACEDF", "A", "a", 2)) // aBaACEDF
fmt.Println(strings.Replace("ABAACEDF", "A", "a", -1)) // aBaaCEDF

golang中字符串和各种int类型之间的相互转换方式
string转成int：
int, err := strconv.Atoi(string)
string转成int64：
int64, err := strconv.ParseInt(string, 10, 64)
int转成string：
string := strconv.Itoa(int)
int64转成string：
string := strconv.FormatInt(int64,10)



=================================================================================================================
常量
在Go语言中，你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。
显式类型定义： const b string = "abc"
隐式类型定义： const b = "abc"

常量的值必须是能够在编译时就能够确定的，可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。
正确的做法：const c1 = 2/3
错误的做法：const c2 = getNumber() // 引发构建错误: getNumber() 用做值

和变量声明一样，可以批量声明多个常量：
const (
    e  = 2.7182818
    pi = 3.1415926
)

如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，如果省略初始化表达式则表示使用前面常量的初始化表达式，对应的常量类型也是一样的。例如：
const (
    a = 1
    b
    c = 2
    d
)
fmt.Println(a, b, c, d) // "1 1 2 2"
如果只是简单地复制右边的常量表达式，其实并没有太实用的价值。但是它可以带来其它的特性，那就是 iota 常量生成器语法。

批量生成常量
枚举类型
const (
    Sunday Weekday = iota
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
)
周日将对应 0，周一为 1，以此类推。


Go语言现阶段没有枚举类型，但是可以使用 const 常量配合上一节《Go语言常量》中介绍的 iota 来模拟枚举类型，请看下面的代码：
type Weapon int
const (
     Arrow Weapon = iota    // 开始生成枚举值, 默认为0
     Shuriken
     SniperRifle
     Rifle
     Blower
)
// 输出所有枚举值
fmt.Println(Arrow, Shuriken, SniperRifle, Rifle, Blower)
// 使用枚举类型并赋初值
var weapon Weapon = Blower
fmt.Println(weapon)
代码输出如下：
0 1 2 3 4
4

代码说明如下：
第 1 行中，将 int 定义为 Weapon 类型，就像枚举类型的本质是一个 int 类型一样。当然，某些情况下，如果需要 int32 和 int64 的枚举，也是可以的。

第 4 行中，将常量 Arrow 的类型标识为 Weapon，这样标识后，const 下方的常量可以使用 Weapon 作为默认类型。该行使用 iota 进行常量值自动生成，iota 的起始值为 0，一般情况下也是建议枚举从 0 开始，让每个枚举类型都有一个空值，方便业务和逻辑的灵活使用。

一个 const 声明内的每一行常量声明，将会自动套用前面的 iota 格式，并自动增加，类似于电子表格中单元格自动填充的效果，只需要建立好单元格之间的变化关系，拖动右下方的小点就可以自动生成单元格的值。

当然，iota 不仅可以生成每次增加 1 的枚举值。还可以利用 iota 来做一些强大的枚举常量值生成器。下面的代码可以方便的生成标志位常量：
const (
    FlagNone = 1 << iota
    FlagRed
    FlagGreen
    FlagBlue
)
fmt.Printf("%d %d %d\n", FlagRed, FlagGreen, FlagBlue)
fmt.Printf("%b %b %b\n", FlagRed, FlagGreen, FlagBlue)
代码输出如下：
2 4 8
10 100 1000

在代码中编写一些标志位时，我们往往手动编写常量值，常量值特别多时，很容易重复或者写错，因此，使用 ioto 自动生成更加方便。

代码说明如下：
第 2 行中 iota 使用了一个移位操作，每次将上一次的值左移一位（二进制位），以得出每一位的常量值。
第 8 行，将 3 个枚举按照常量输出，分别输出 2、4、8，都是将 1 每次左移一位的结果。
第 9 行，将枚举值按二进制格式输出，可以清晰地看到每一位的变化。
将枚举值转换为字符串
枚举在 C# 中是一个独立的类型，可以通过枚举值获取该值对应的字符串。例如，C# 中 Week 枚举值 Monday 为 1，那么可以通过 Week.Monday.ToString() 函数获得 Monday 字符串。

Go语言中也可以实现这一功能，代码如下所示：

转换字符串：
纯文本复制
package main
import "fmt"
// 声明芯片类型
type ChipType int
const (
    None ChipType = iota
    CPU    // 中央处理器
    GPU    // 图形处理器
)
func (c ChipType) String() string {
    switch c {
    case None:
        return "None"
    case CPU:
        return "CPU"
    case GPU:
        return "GPU"
    }
    return "N/A"
}
func main() {
    // 输出CPU的值并以整型格式显示
    fmt.Printf("%s %d", CPU, CPU)
}
运行结果：
CPU 1

代码说明如下：
第 6 行，将 int 声明为 ChipType 芯片类型。
第 9 行，将 const 里定义的常量值设为 ChipType 类型，且从 0 开始，每行值加 1。
第 14 行，定义 ChipType 类型的方法 String()，返回值为字符串类型。
第 15～22 行，使用 switch 语句判断当前的 ChitType 类型的值，返回对应的字符串。
第 30 行，按整型的格式输出 CPU 的值。

String() 方法的 ChipType 在使用上和普通的常量没有区别。当这个类型需要显示为字符串时，Go语言会自动寻找 String() 方法并进行调用。
