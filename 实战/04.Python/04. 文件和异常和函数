极客时间课程训练
文件的基本操作
===================================================================
文件操作基本函数
文件的内建函数
open
read
readline 读取一行
readlines
seek
write
writeline 写入一行
writelines
close
tell  告知文件指针在哪

例子
file01 = open("hello","w")
file01.write("诸葛亮")
file01.close()

file02 = open("hello","a")
file02.write("刘备")
file02.close()

file03 = open("hello","a")
file03.write("马超")
file03.close()

文件多行读取其中一行
readline
如果读取后要回到文件的开头需要用seek

=====================================================================
网络操作也会用到相应的读写操作


=====================================================================
异常
墨菲定律：会出错的问题无论概率多么小都会出错
程序检测错误发生,坚持到错误引发异常

try:
  监控异常
except Exception
finally:
  无论异常是否发生都会执行


比如try中放打开文件
在finally放关闭异常

try:
    year = int(input("input year"))
except ValueError:
    print("please input number")
finally:
    pass

可以捕获多种异常
try:
    year = int(input("input year"))
except (ValueError,AttributeError,KeyError):
    print("please input number")
finally:
    pass
    
如果还要打印出异常
try:
    year = int(input("input year"))
except ValueError as e:
    print("please input number %s" %e)
finally:
    pass

捕获全部的异常Exception
try:
    year = int(input("input year"))
except Exception as e:
    print("please input number %s" %e)
finally:
    pass

自定义异常
使用NameError
try:
    raise NameError("customer error")
except NameError as e:
    print("please input number %s"%e)
finally:
    pass

python的文件处理和异常处理

=================================================================
方法
def functionname():
  pass

变长参数
def functionname(var1,*var234):
  pass

函数变量的范围：
var01 = 123
def func()
    print(var01)

外面定义会影响内部的.
如果要内部能影响外部的
需要内部加上global var01

方法的迭代器,什么是迭代器比如for in 迭代每个元素
iter和next方法
list01 = [1,2,3,4,5,6]
it = iter(list01)
print(next(it))
print(next(it))
print(next(it))
print(next(it))
print(next(it))
print(next(it))
print(next(it))
最后一个到结束了抛出异常


带yield的函数为生成器或者叫迭代器

要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：

>>> L = [x * x for x in range(10)]
>>> L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x1022ef630>
创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。

===========================================================================
常用内置函数
filter      过滤可迭代对象
map         对每个可迭代对象进行处理
reduce      对可迭代对象内部数据做内部加和或者乘法等等.
zip         zip((1,2,3),(4,5,6)) => (1,4) (2,5) (3,6)
            zip对调key value zip(dic.values(),dict.keys())
            比较智能:转为print(dict(zip([1,2],[3,4])))
                    转为print(list(zip([1,2],[3,4])))
            
===========================================================================
lambda表达式就是对于函数的简化
去掉函数名和return字样

def hello():
    return 123

lambda ：123
就是这么简单
            
            
            










    












