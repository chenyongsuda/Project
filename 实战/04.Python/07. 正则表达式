正则表达式

. 点表示1个=================>前字符无关

      import re
      p = re.compile("c.t")
      print(p.match("cat"))
      #OK

      import re
      p = re.compile("c.t")
      print(p.match("ct"))
      #None


* 星号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）=================>前字符相关
      import re
      p = re.compile("c*t")
      print(p.match("cat"))
      #None

? 问号代表前面的字符最多只可以出现一次（0次、或1次）=================>前字符相关

+ 前面字符的1个或多个 =================>前字符相关

{m} 出现次数为m次 =================>前字符相关

{n,m} 出现次数是n到m个 =================>前字符相关

[] 数字组合,表示或的关系 =================>前字符无关

() 分组
            例子：
            import re
            p = re.compile("(\d+)-(\d+)-(\d+)")
            print(p.match("2018-01-18").groups())

^  以什么开始

$  以什么结束

\d 表示数字
      import re
      p = re.compile("\d")
      print(p.match("123"))
      #OK

\D 表示数字
      import re
      p = re.compile("\D")
      print(p.match("qqq"))
      #OK
      
函数：      
      find
      findall
      例子：
            p = re.compile("(\d+)-(\d+)-(\d+)")
            print(p.findall("2018-01-18---------2019-09-20"))
      
      sub函数
            re.sub(pattern, repl, string, count=0, flags=0)
            pattern：表示正则表达式中的模式字符串；
            repl：被替换的字符串（既可以是字符串，也可以是函数）；
            string：要被处理的，要被替换的字符串；
            count：匹配的次数, 默认是全部替换
            flags：具体用处不详
            
      replace
            str.replace(old, new[, max])
            参数
            old -- 将被替换的子字符串。
            new -- 新字符串，用于替换old子字符串。
            max -- 可选字符串, 替换不超过 max 次
            
      strip()
      对于这个函数要记住3点：
      1. 默认删除行首或者行尾的空白符（包括'\n', '\r',  '\t',  ' ')
      2. 能使用，分隔去除多个值
      3.lstrip()表示删除左边的，rstrip()表示删除右边的
