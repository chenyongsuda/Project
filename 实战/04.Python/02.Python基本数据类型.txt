python基本数据
==================
字符串
int
bool
float
序列------->包含字符串,元祖,列表表示有序的的排列并且可以通过唯一下标访问.
：访问方式serise[:]
元祖
列表
map
==================
判断数据类型 type(123)

==================
数据类型转换
int(xxx)
float(xxx)
bool(xxx)


==========================================================================
Python序列（Sequence）
 Sequence是Python的一种内置类型（built-in type），内置类型就是构建在Python Interpreter里面的类型，三种基本的Sequence Type是list（表），tuple（定值表，或翻译为元组），range（范围）。可以看作是Python Interpreter定义了这样三个class。

字符串也是一种序列

序列的构建：
1.1 list object的构建

>>> list = []
>>> list = [1,3]
>>> list
[1, 3]
还可以这样构建
>>> list()   # empty list
[]
>>> [x for x in range(11)]    ＃ ［x for x in iterable］
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> list((3,5,6))   #  list(iterable)
[3, 5, 6]

1.2，改变list元素值

 list和string不一样的是，string是不可变（immutable）的类型，list是可变的（mutable），可以对list整体或一部分进行改变

复制代码
>>> list = [list, 5]
>>> list
[[1, 3], 5]
>>> list[1] = 6
>>> list
[[1, 3], 6]
复制代码
 可以对list进行“切片”slice，得到一个子list，也可以对“切片”进行赋值，改变list

范围引用的语法是[下限:上限:步长]，默认步长是1，从前数下标从0开始，从后数下标从－1开始

>>> list = [1,2,3,4,5]
>>> list[2:4]
[3, 4]
>>> list[-3:]
[3, 4, 5]
对切片进行赋值，改变list

>>> list
[1, 2, 3, 4, 5]
>>> list[3:] = [5,4]
>>> list
[1, 2, 3, 5, 4]


2，tuple

tuple是不可变的（immutable）

class tuple([iterable])

tuple的构建

seq = ()  或  seq = tuple()   #构建empty tuple
seq = (4,)  或  4,     #构建只有一个元素的tuple (4)，逗号是必不可少的，不然会返回数字4
seq = (3,4,5) 或  seq = 3,4,5
seq =  tuple([3,4,5])  # 生成 （3,4,5）
 

iterable可以是任何支持iteration的Sequence，Container。上面我们使用的参数是list [3,4,5]，也可以就是用tuple  (3,4,5)

对于tuple来说，重要的是逗号","，而不是括号，从上面我们可以看到括号没有歧义可以省去，但是有些地方必须要，比如：

f(a,b,c)表示这个函数接受三个参数

而f((a,b,c))表示这个函数接受一个参数，这个参数是一个三元的tuple。

tuple是不可被赋值的，所以tuple常用来做不同type（异质）的元素的序列集合，而list就常用来做相同type（同质）的元素集合。


3，range

range也是一种类型（type），它是一个数字的序列（s sequence of numbers），而且是不可变的，通常用在for循环中

class range(stop)

class range(start, stop [, step])

对于第一种构造方式，start默认值为0，step默认值为1

当step为正时，一个range的元素值为r[i] = start + i * step 且 r[i] < stop； step为负时，r[i] > stop

>>> range(6)
[0, 1, 2, 3, 4, 5]
>>> tuple(range(0,-10,-2))
(0, -2, -4, -6, -8)

4.多重赋值（multiple assignment）

多重赋值就是这样的赋值表达式。

1 t = a,b,c
2 a,b,c = t
而多重赋值本质就是tuple packing （元组打包）和 Sequence unpacking（序列解包）。

>>> t = a, b, c      #这就是tuple packing，按照tuple的构建的语法，我们知道这里t肯定是个tuple。

>>>a, b, c  = t      #这就是Sequence unpacking，这里t只要是三元的Sequence就可以了，不一定是tuple，如果t不是三元的，会抛出一个ValueError异常。


================================================================================================================
序列的特征
1. 序列的拼接
>>> [1,'苹果']+[2,'香蕉']
[1, '苹果', 2, '香蕉']

2. 乘法
>>> ['苹果']*3
['苹果', '苹果', '苹果']

3.索引

4.切片

5.长度

6.in 布尔运算（判断成员是否在序列中）
>>> 3 in [1,2,3,4]
True
>>> 3 not in [1,2,3,4]
False

7.len() 计算列表元素个数
>>>len([1,2,3,4,5])
5
>>>len((1,2,3,4,5))
5
>>>len('Hello')
5

8. 最大最小
max(),min()求序列中的最大最小元素
>>> max([1,2,3,4])
4
>>> min((1,2,3,4))
1
>>> min('abcd')
'a'

============================================================================================
tuple 比较大小
print((6,8) > (8,8))  先比第一个再比第二个



=============================================================================================
Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。

语法：

for循环的语法格式如下：

for iterating_var in sequence:
   statements(s)
for letter in 'Python':     # 第一个实例
   print '当前字母 :', letter
 
fruits = ['banana', 'apple',  'mango']
for fruit in fruits:        # 第二个实例
   print '当前水果 :', fruit
 
print "Good bye!"


通过序列索引迭代
另外一种执行循环的遍历方式是通过索引，如下实例：

实例
#!/usr/bin/python
# -*- coding: UTF-8 -*-
 
fruits = ['banana', 'apple',  'mango']
for index in range(len(fruits)):
   print '当前水果 :', fruits[index]
 
print "Good bye!"































