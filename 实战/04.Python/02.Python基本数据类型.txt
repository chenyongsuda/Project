python基本数据
==================
字符串
int
bool
float
序列------->包含字符串,元祖,列表表示有序的的排列并且可以通过唯一下标访问.
：访问方式serise[:]
元祖
列表
map
==================
判断数据类型 type(123)

==================
数据类型转换
int(xxx)
float(xxx)
bool(xxx)


==========================================================================
Python序列（Sequence）
 Sequence是Python的一种内置类型（built-in type），内置类型就是构建在Python Interpreter里面的类型，三种基本的Sequence Type是list（表），tuple（定值表，或翻译为元组），range（范围）。可以看作是Python Interpreter定义了这样三个class。

字符串也是一种序列

序列的构建：
1.1 list object的构建

>>> list = []
>>> list = [1,3]
>>> list
[1, 3]
还可以这样构建
>>> list()   # empty list
[]
>>> [x for x in range(11)]    ＃ ［x for x in iterable］
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> list((3,5,6))   #  list(iterable)
[3, 5, 6]

1.2，改变list元素值

 list和string不一样的是，string是不可变（immutable）的类型，list是可变的（mutable），可以对list整体或一部分进行改变

复制代码
>>> list = [list, 5]
>>> list
[[1, 3], 5]
>>> list[1] = 6
>>> list
[[1, 3], 6]
复制代码
 可以对list进行“切片”slice，得到一个子list，也可以对“切片”进行赋值，改变list

范围引用的语法是[下限:上限:步长]，默认步长是1，从前数下标从0开始，从后数下标从－1开始

>>> list = [1,2,3,4,5]
>>> list[2:4]
[3, 4]
>>> list[-3:]
[3, 4, 5]
对切片进行赋值，改变list

>>> list
[1, 2, 3, 4, 5]
>>> list[3:] = [5,4]
>>> list
[1, 2, 3, 5, 4]


2，tuple

tuple是不可变的（immutable）

class tuple([iterable])

tuple的构建

seq = ()  或  seq = tuple()   #构建empty tuple
seq = (4,)  或  4,     #构建只有一个元素的tuple (4)，逗号是必不可少的，不然会返回数字4
seq = (3,4,5) 或  seq = 3,4,5
seq =  tuple([3,4,5])  # 生成 （3,4,5）
 

iterable可以是任何支持iteration的Sequence，Container。上面我们使用的参数是list [3,4,5]，也可以就是用tuple  (3,4,5)

对于tuple来说，重要的是逗号","，而不是括号，从上面我们可以看到括号没有歧义可以省去，但是有些地方必须要，比如：

f(a,b,c)表示这个函数接受三个参数

而f((a,b,c))表示这个函数接受一个参数，这个参数是一个三元的tuple。

tuple是不可被赋值的，所以tuple常用来做不同type（异质）的元素的序列集合，而list就常用来做相同type（同质）的元素集合。


3，range

range也是一种类型（type），它是一个数字的序列（s sequence of numbers），而且是不可变的，通常用在for循环中

class range(stop)

class range(start, stop [, step])

对于第一种构造方式，start默认值为0，step默认值为1

当step为正时，一个range的元素值为r[i] = start + i * step 且 r[i] < stop； step为负时，r[i] > stop

>>> range(6)
[0, 1, 2, 3, 4, 5]
>>> tuple(range(0,-10,-2))
(0, -2, -4, -6, -8)

4.多重赋值（multiple assignment）

多重赋值就是这样的赋值表达式。

1 t = a,b,c
2 a,b,c = t
而多重赋值本质就是tuple packing （元组打包）和 Sequence unpacking（序列解包）。

>>> t = a, b, c      #这就是tuple packing，按照tuple的构建的语法，我们知道这里t肯定是个tuple。

>>>a, b, c  = t      #这就是Sequence unpacking，这里t只要是三元的Sequence就可以了，不一定是tuple，如果t不是三元的，会抛出一个ValueError异常。


================================================================================================================
序列的特征
1. 序列的拼接
>>> [1,'苹果']+[2,'香蕉']
[1, '苹果', 2, '香蕉']

2. 乘法
>>> ['苹果']*3
['苹果', '苹果', '苹果']

3.索引

4.切片

5.长度

6.in 布尔运算（判断成员是否在序列中）
>>> 3 in [1,2,3,4]
True
>>> 3 not in [1,2,3,4]
False

7.len() 计算列表元素个数
>>>len([1,2,3,4,5])
5
>>>len((1,2,3,4,5))
5
>>>len('Hello')
5

8. 最大最小
max(),min()求序列中的最大最小元素
>>> max([1,2,3,4])
4
>>> min((1,2,3,4))
1
>>> min('abcd')
'a'

============================================================================================
tuple 比较大小
print((6,8) > (8,8))  先比第一个再比第二个



=============================================================================================
Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。

语法：

for循环的语法格式如下：

for iterating_var in sequence:
   statements(s)
for letter in 'Python':     # 第一个实例
   print '当前字母 :', letter
 
fruits = ['banana', 'apple',  'mango']
for fruit in fruits:        # 第二个实例
   print '当前水果 :', fruit
 
print "Good bye!"


通过序列索引迭代
另外一种执行循环的遍历方式是通过索引，如下实例：

实例
#!/usr/bin/python
# -*- coding: UTF-8 -*-
 
fruits = ['banana', 'apple',  'mango']
for index in range(len(array)):
    print(str(index)+".."+array[index])


for index,val in enumerate(array):
print(str(index)+"--"+val);

enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。

Python 2.3. 以上版本可用，2.6 添加 start 参数。

以下是 enumerate() 方法的语法:

enumerate(sequence, [start=0])
>>>seasons = ['Spring', 'Summer', 'Fall', 'Winter']
>>> list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
>>> list(enumerate(seasons, start=1))       # 下标从 1 开始
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
enumerate参数为可遍历的变量，如 字符串，列表等； 返回值为enumerate类。

=====================================================================================
字符串的常用操作
1. mystr.find(str, start=0, end=len(mystr))
　　检测str是否包含在mystr中，如果是返回开始的索引值，否则返回-1.
  
2. mystr.index(str, start=0, end=len(mystr))
 　　跟find()方法一样，只不过如果str不在mystr中会报一个异常.

3. mystr.count(str, start=0, end=len(mystr))
 　　返回str在star和end之间 在mystr里面出现的次数
   
4.  mystr.replace(str1, str2, mystr.count(str1))
　　把mystr中的str1替换成str2，若果count指定，则替换不超过count次。  

5. mystr.split(str, maxsplit)
　　以str为分隔符切片mystr， 如果maxsplit有指定值，则仅分隔maxsplit个字符串。
  
6. mystr.capitalize()
　　把字符串的第一个字符大写
  
7. mystr.title()
　　把字符串的每个单词首字母大写
  
8. mystr.startswith(obj)
　　检查字符串是否以obj开头，是则返回True，否则返回False. 

9. mystr.endswith(obj)
　　检查字符串是否以obj结束，是则返回True，否则返回False. 
  
10. mystr.lower()
　　转换字符串中所有大写字符为小写. 

11. mystr.upper()
　　转换字符串中所有大写字符为小写. 
　　----可以用于用户退出输入字符的判断。

12. mystr.ljust(width)
　　返回一个原字符串左对齐，并使用空格填充至长度width的新字符串. 

13. mystr.rjust(width)
　　返回一个原字符串右对齐，并使用空格填充至长度width的新字符串. 
　　----请回想print（）左对齐展示和右对齐展示。

14. mystr.center(width)
　　返回一个原字符串居中，并使用空格填充至长度width的新字符串. 
  
15. mystr.lstrip()
　　删除mystr字符串左端的空白字符.

16. mystr.rstrip()
　　删除mystr字符串末尾的空白字符.

17. mystr.strip()
　　删除mystr字符串两端的空白字符.
  
18. mystr.rfind()
　　类似于find()，不过是从右边开始查找.

19. mystr.rindex()
　　类似于index()，不过是从右边开始.
  
20. mystr.partition(str)
　　把mystr分割成三部分，str前，str和str后.

21. mystr.rpartition(str)
　　类似于partition()，不过是从右边开始.

22. mystr.splitlines()
　　 按照行分隔，返回一个包含各行作为元素的列表。
　　----文件的读取

23. mystr.isalpha()
　　如果mystr所有字符都是字母则返回True, 否则返回False. 

24. mystr.isdigit()
　　如果mystr只包含数字则返回True, 否则返回False. 

25. mystr.isalnum()
　　 如果mystr所有字符都是字母或数字则返回True, 否则返回False. 

26. mystr.isspace()
　　如果mystr只包含空格，则返回True, 否则返回False. 
  
27. str.join(mystr)
　　mystr中每个字符后面插入str, 构造出一个新的字符串。 链接列表。


1. List的组合
join()
sep.join(seq) 连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字符串
# 创建一个列表
name = ['张学友','刘德华','郭富城','黎明']
print('--'.join(name))

输出结果如下:
张学友--刘德华--郭富城--黎明


2. count()
String.count() 统计字符出现的次数
name = 'xiaoming'
name_num = name.count('i')
print(name_num)  # 2


