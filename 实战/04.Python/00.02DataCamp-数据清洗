1. 数据存在哪些质量问题
  # 需要调整的columns,包括column的字段多空格啊等
  # 数据丢失 有一些行是none啊等
  # 数据值无效或者异常值
  # 重复行
  # 需要处理后才能分析的列

2. 一般通过
df.columns 看出columns的一些情况
df.shape() 看出一共多少数据
df.info() 看一看出各列非none多少行等信息
df.xxx.value_counts(dropna=False) 判断某列值的评率
df.discribe() 查看数值型类的均值最大最小等信息

3.统计数据可视化
比如直方图
      df.xxxxxx.plot('hist')
      import matplotlib.pyplot as plt
      plt.show()
      这样直接看图中的异常值.
      通过df[df.xxxxxx > xxxxx]来浏览数据
      
比如箱线图可以看出异常点和25,50,75,100范围值
      Histograms are great ways of visualizing single variables. To visualize multiple variables, boxplots are useful, 
      especially when one of the variables is categorical.
      # Create the boxplot
      df.boxplot(column='initial_cost', by='Borough', rot=90)
      
 点图比较适合两个比较
      Boxplots are great when you have a numeric column that you want to compare across different categories. When you want to visualize two numeric columns, scatter plots are ideal.
      # Import necessary modules
      import pandas as pd
      import matplotlib.pyplot as plt
      # Create and display the first scatter plot
      df.plot(kind='scatter', x='initial_cost', y='total_est_fee', rot=70)
      plt.show()
      # Create and display the second scatter plot
      df_subset.plot(kind='scatter', x='initial_cost', y='total_est_fee', rot=70)
      plt.show()
4. 整洁的数据包含哪几方面
    每个变量作为单独的列。
    Each variable as a separate column.
    每行作为一个单独的观察。
    Each row as a separate observation.
    使用pd.melt方法类似于转置操作,将列的值转置为行数据,含义是将多列溶解为类型列一个值域
    
    举例:
    In this exercise, you will practice melting a DataFrame using pd.melt(). There are two parameters you should be aware of: 
    id_vars and value_vars. The id_vars represent the columns of the data you do not want to melt (i.e., keep it in its current shape), 
    while the value_vars represent the columns you do wish to melt into rows. By default, if no value_vars are provided, 
    all columns not set in the id_vars will be melted. This could save a bit of typing, 
    depending on the number of columns that need to be melted.
    # Melt airquality: airquality_melt
    airquality_melt = pd.melt(airquality, id_vars=['Month','Day'])
    
    # Melt airquality: airquality_melt
    Melt the columns of airquality with the defaultvariablecolumn renamed to'measurement'and the defaultvaluecolumn renamed to'reading'. 
    You can do this by specifying, respectively, thevarnameandvaluename` parameters.
    airquality_melt = pd.melt(airquality, id_vars=['Month', 'Day'], var_name='measurement', value_name='reading')
    
    melt的反向操作pivot
    # Pivot airquality_melt: airquality_pivot
    # pivot_table() has an index parameter which you can use to specify the columns that you don't want pivoted: 
    # It is similar to the id_vars parameter of pd.melt(). Two other parameters that you have to specify are columns
    # (the name of the column you want to pivot), and values (the values to be used when the column is pivoted). 
    # The melted DataFrame airquality_melt has been pre-loaded for you.
    airquality_pivot = airquality_melt.pivot_table(index=['Month', 'Day'], columns='measurement', values='reading')
    
    
