模块
导入模块
import xxx
或者如果模块名字太长可以简写as
import xxx as xxx
如果导入子功能
from xxx import xxx
例如
from time import sleep

如何写一个模块呢.
有个单独文件就是一个模块.导入就可以了.

import 模块的时候会首先包含模块的内容.
所有说如果是模块一般不在里面直接调用方法.


==============================================================
类       面向对象的编程

以前都是面向过程的编程
user01 = {"name" : "tom","hp":100}
user02 = {"name" : "jerry","hp":100}

def display_info(user):
    print("name is %s hp is %d" %(user["name"],user["hp"]))

display_info(user01)
display_info(user02)

面向对象的写法写类
class Player:
    '''
    类的描述信息
    '''
    def __init__(self, name, hp):
        self.name = name
        self.hp = hp
    
    def displayRole(self):
        print("name is %s hp is %d" %(self.name,self.hp))


player01 = Player("tom", 100)
player02 = Player("jerry", 100)
player01.displayRole()
player02.displayRole()


类属性的私有和共有(也叫类的封装)
如果类的属性前面加__比如name变成__name在实例前面访问instance.__name就无法修改.表示类属性为私有.


================================================================================
类的继承
class Base():
    def __init__(self,hp):
        self.hp = hp
    def run(self):
        print("this is %d" %self.hp)


class Xman(Base):
    def __init__(self,hp):
        self.hp = hp
    
    def xman_run(self):
        print("xman run %d" %self.hp)


sample = Xman(1)
sample.xman_run()

print(isinstance(sample,Base))

不过一般在初始化下级类的话也可以直接初始化话上级类的变量使用
如下:
class Xman(Base):
    def __init__(self,hp):
        super().__init__(hp)
    
    def xman_run(self):
        print("xman run %d" %self.hp)

======================================================================================
划重点
super不是父类，而是继承顺序的下一个类
在多重继承时会涉及继承顺序，super（）相当于返回继承顺序的下一个类，而不是父类，类似于这样的功能：

#mro()用来获得类的继承顺序。


例如：

class Base(object):
    def __init__(self):
        print 'Base create'
 
class childA(Base):
    def __init__(self):
        print 'enter A '
        # Base.__init__(self)
        super(childA, self).__init__()
        print 'leave A'
 
 
class childB(Base):
    def __init__(self):
        print 'enter B '
        # Base.__init__(self)
        super(childB, self).__init__()
        print 'leave B'
 
class childC(childA, childB):
    pass
 
c = childC()
print c.__class__.__mro__

#输出：

enter A 
enter B 
Base create
leave B
leave A
(<class '__main__.childC'>, <class '__main__.childA'>, <class '__main__.childB'>, <class '__main__.Base'>, <type 'object'>)

复制代码
supder和父类没有关联，因此执行顺序是A —> B—>—>Base
执行过程相当于：初始化childC()时，先会去调用childA的构造方法中的 super(childA, self).__init__()， 
super(childA, self)返回当前类的继承顺序中childA后的一个类childB；然后再执行childB().__init()__,这样顺序执行下去。
在多重继承里，如果把childA()中的 super(childA, self).__init__() 换成Base.__init__(self)，
在执行时，继承childA后就会直接跳到Base类里，而略过了childB：

enter A 
Base create
leave A
(<class '__main__.childC'>, <class '__main__.childA'>, <class '__main__.childB'>, <class '__main__.Base'>, <type 'object'>)

从super()方法可以看出，super（）的第一个参数可以是继承链中任意一个类的名字，
如果是本身就会依次继承下一个类；
如果是继承链里之前的类便会无限递归下去；
如果是继承链里之后的类便会忽略继承链汇总本身和传入类之间的类；
比如将childA()中的super改为：super(childC, self).__init__()，程序就会无限递归下去。




===================================================================================================
class和with连起来用
class DealWithExp():
    def __enter__(self):
        print("start...")
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_tb is None :
            print("end success")
        else:
            print("end error")


with DealWithExp() :
    raise NameError("system error")

用with的话会先进__enter__再进__exit__

===================================================
例子：
一个例子:
class TmpTest:
    def __init__(self,filename):
        self.filename=filename
    def __enter__(self):
        self.f = open(self.filename, 'r')
       # return self.f
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.f.close()

test=TmpTest('file')

with test as t:
    print ('test result: {}'.format(t))

返回:
test result: None

这个例子里面__enter__没有返回，所以with语句里的"as t"到的是None，修改一下上面的例子:

===================================================
class TmpTest:
    def __init__(self,filename):
        self.filename=filename
    def __enter__(self):
        self.f = open(self.filename, 'r')
        return self.f
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.f.close()

test=TmpTest('file')

with test as t:
    print ('test result: {}'.format(t))

返回:
test result: <_io.TextIOWrapper name='file' mode='r' encoding='cp936'>

===================================================
如果在__init__或者__enter__中抛出异常，则不会进入到__exit__中:
class TmpTest:
    def __init__(self,filename):
        self.filename=filename
        print("__init__")
        raise ImportError
    def __enter__(self):
        self.f = open(self.filename, 'r')
        print("__enter__")
        return self.f
    def __exit__(self, exc_type, exc_val, exc_tb):
        print("__exit__")
        self.f.close()

test=TmpTest('file')
with test as t:
    print ('test result: {}'.format(t))


返回:
__init__
Traceback (most recent call last):
  File "D:/pythonScript/leetcode/leetcode.py", line 14, in <module>
    test=TmpTest('file')
  File "D:/pythonScript/leetcode/leetcode.py", line 5, in __init__
    raise ImportError
ImportError

===================================================
如果在__exit__中返回True,则不会产生异常:
复制代码
class TmpTest:
    def __init__(self,filename):
        self.filename=filename
        print("__init__")

    def __enter__(self):
        self.f = open(self.filename, 'r')
        print("__enter__")
        return self.f

    def __exit__(self, exc_type, exc_val, exc_tb):
        print("__exit__ {} ".format(exc_type))
        self.f.close()
        return True

test=TmpTest('file')
with test as t:
    print ('test result: {}'.format(t))
    raise ImportError
print("no error")

返回:
__init__
__enter__
test result: <_io.TextIOWrapper name='file' mode='r' encoding='cp936'>
__exit__ <class 'ImportError'>
no error

==============================================================================
线程
py3 中导入import threading

import threading
import time

def my_th_test(i,j):
    time.sleep(1)
    print("%s %s \n" %(i,j))

for i in range(1,6,1):
    # my_th_test(i, i+1)
    t = threading.Thread(target=my_th_test,args=(i,i+1))
    t.start()

加入current thread 信息的代码示例
import threading
import time

def my_th_test(i,j):
    print("%s start",threading.current_thread().name)
    time.sleep(1)
    print("%s %s" %(i,j))
    print("%s end",threading.current_thread().name)

for i in range(1,6,1):
    # my_th_test(i, i+1)
    t = threading.Thread(target=my_th_test,args=(i,i+1))
    t.start()

调用线程的start方法相当于调用线程的内部run方法.
用新的类继承threading.Thread,重写run方法.就能自己的线程类

线程还有线程的依赖关系





