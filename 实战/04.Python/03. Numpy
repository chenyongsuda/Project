数据类型
np.ndarray    ========>   np的数组

=======================================================================================================
NumPy的数组类型叫做ndarray。更多重要的ndarray对象属性有：

ndarray.ndim 数组中轴的个数。
ndarray.shape 数组的维度，输出是一个整数元组。如一个n行m列的矩阵，shape函数输出为(n, m)，元组的长度与ndim的输出相同。
ndarray.size 数组元素的总个数，相当于shape属性中元组元素的乘积
ndarray.dtype 数组中元素类型，数据类型可以是Python中的标准数据类型，也可以是numpy的特殊数据类型，如numpy.int32等。
ndarray.itemsize 数组中元素的字节大小。如元素类型为float64，字节大小为8；若元素类型为complex32，字节大小为4。与ndarray.dtype.itemsize效果相同
=======================================================================================================
nparray 初始化

>>> a = np.array([2,3,4])
>>> a
array([2, 3, 4])
>>> a.dtype
dtype('int32')
>>> b = np.array([1.2, 3.5, 5.1])
>>> b.dtype
dtype('float64')
======================================================================================================
数组类型也可以在创建的时候被定义。

>>> c = np.array([[1,2],[3,4]],dtype = complex)
>>> c
array([[1.+0.j, 2.+0.j],
       [3.+0.j, 4.+0.j]])
=======================================================================================================
range 和 arange

有三个参数，依次为start，end(不包含)，step。在不指明start或者step的情况下，默认起始点为0，步长为1。
>>> range(2,8,2)
[2, 4, 6]
>>> np.arange(2,8,2)
array([2, 4, 6])

arange返回的是一个ndarray，使用前需要引入numpy，即import numpy as np；而range返回一个list。
>>> type(L)
<type 'list'>

>>> type(LL)
<type 'numpy.ndarray'>

arange允许步长为小数，而range不允许。
>>> np.arange(2,10,0.5)
array([ 2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ,  5.5,  6. ,  6.5,  7. ,
        7.5,  8. ,  8.5,  9. ,  9.5])
>>> range(2,10,0.5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: range() integer step argument expected, got float.


===============================================================================================================
初始化数组
zeros创建全0数组，ones创建全1数组，empty函数创建的数组初始内容随机，并且与内存状态有关。默认的数据类型为float64。

>>> np.zeros([3,4])
array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])
>>> np.ones((2,3,4),dtype = np.int16)
array([[[1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]],
 
       [[1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]]], dtype=int16)
>>> np.empty((2,3))
array([[1.5, 2. , 3. ],
       [4. , 5. , 6. ]])
--------------------- 

===============================================================================================================
折叠数组成多维度的
一维数组被打印成行，二维数组被打印成矩阵，三维数组被打印成矩阵列表。

>>> a = np.arange(6)
>>> print(a)
[0 1 2 3 4 5]
>>> b = np.arange(12).reshape(4,3)
>>> print(b)
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
>>> c = np.arange(24).reshape(2,3,4)
>>> print(c)
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]
 
 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]
--------------------- 

ndarray.fill 函数就是把所有值fill成目标值
