URL请求库常用
1. URL库 (内置URL库)
2. Requests (第三方)
3. Beautifulsoap (XML解析库)

升级pip
python -m pip install --upgrade pip

from urllib import request
resp = request.urlopen("http://www.baidu.com",timeout=5)
print(resp.read())

如果带data表示post请求
如：
data = bytes(parse.urlencode({"hello":"world"}),encoding='utf-8')
resp = request.urlopen("http://www.baidu.com",data=data)
print(resp.read())

超时捕获
import os
import sys
from urllib import request
import urllib
import socket

BASE_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_PATH)

try:
    resp = request.urlopen("http://www.baidu.com",timeout=0.0001)
    print(resp.read())
except urllib.error.URLError as e:
    if isinstance(e.reason,socket.timeout):
        print("error")

Request模块 Get和POST模块

resp = requests.get("http://www.baidu.com")
print(resp.text)

data = {"hello":"world"}
resp = requests.post("http://www.baidu.com",data=data)
print(resp.json())



============================================================================
模拟登录网页
最终形成的登录模式
因为cookie是有有效期的，所以没法做到一次登录，终生有效。所以，一般的登录模式，就是： 
第一步：先尝试cookie登录
第二步：如果cookie无法登录成功，就使用用户名密码登录，将新的cookie保存下来。
# -*- coding: utf-8 -*-

import requests

# python2 和 python3的兼容代码
try:
    # python2 中
    import cookielib
    print(f"user cookielib in python2.")
except:
    # python3 中
    import http.cookiejar as cookielib
    print(f"user cookielib in python3.")

# session代表某一次连接
mafengwoSession = requests.session()
# 因为原始的session.cookies 没有save()方法，所以需要用到cookielib中的方法LWPCookieJar，这个类实例化的cookie对象，就可以直接调用save方法。
mafengwoSession.cookies = cookielib.LWPCookieJar(filename = "mafengwoCookies.txt")

userAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36"
header = {
    # "origin": "https://passport.mafengwo.cn",
    "Referer": "https://passport.mafengwo.cn/",
    'User-Agent': userAgent,
}

注意登录的时候如果用post或者get碰见302跳转登录页面的话需要加个参数忽略跳转否则会直接返回后面页面的200状态就无法区分登录成功或者失败了
resp = requests.post(loginURL, loginData,allow_redirects=False)

# 马蜂窝模仿 登录
def mafengwoLogin(account, password):
    print("开始模拟登录马蜂窝")
    postUrl = "https://passport.mafengwo.cn/login/"
    postData = {
        "passport": account,
        "password": password,
    }
    # 使用session直接post请求
    responseRes = mafengwoSession.post(postUrl, data = postData, headers = header)
    # 无论是否登录成功，状态码一般都是 statusCode = 200
    print(f"statusCode = {responseRes.status_code}")
    print(f"text = {responseRes.text}")
    # 登录成功之后，将cookie保存在本地文件中，好处是，以后再去获取马蜂窝首页的时候，就不需要再走mafengwoLogin的流程了，因为已经从文件中拿到cookie了
    mafengwoSession.cookies.save()


# 通过访问个人中心页面的返回状态码来判断是否为登录状态
def isLoginStatus():
    routeUrl = "http://www.mafengwo.cn/plan/route.php"
    # 下面有两个关键点
        # 第一个是header，如果不设置，会返回500的错误
        # 第二个是allow_redirects，如果不设置，session访问时，服务器返回302，
        # 然后session会自动重定向到登录页面，获取到登录页面之后，变成200的状态码
        # allow_redirects = False  就是不允许重定向
    responseRes = mafengwoSession.get(routeUrl, headers = header, allow_redirects = False)
    print(f"isLoginStatus = {responseRes.status_code}")
    if responseRes.status_code != 200:
        return False
    else:
        return True


if __name__ == "__main__":
    # 第一步：尝试使用已有的cookie登录
    mafengwoSession.cookies.load()
    isLogin = isLoginStatus()
    print(f"is login mafengwo = {isLogin}")
    if isLogin == False:
        # 第二步：如果cookie已经失效了，那就尝试用帐号登录
        print(f"cookie失效，用户重新登录...")
        mafengwoLogin("13756567832", "000000001")

    resp = mafengwoSession.get("http://www.mafengwo.cn/plan/fav_type.php", headers = header, allow_redirects = False)
    print(f"resp.status = {resp.status_code}")
    
\d	匹配数字，即0-9
\D	匹配非数字，即不是数字
\s	匹配空白，即 空格，tab键
\S	匹配非空白
\w	匹配非特殊字符，即a-z、A-Z、0-9、_、汉字
\W	匹配特殊字符，即非字母、非数字、非汉字、非_

正则表达式中跨行匹配问题
闲话少叙，今天写爬虫的时候发现要匹配一个跨很多很多行的内容，之前是(.+?)在手，爬虫我有，
不过这次这个神匹配也不好使了，查了点资料，发现是（.）不能匹配跨行内容，ok，上利器，[\s\S]* or [\w\W]* or [\d\D]*。搞定。

=====================================================================================================================
页面解析方式基本包含三种,正则表达式,beautifulsoap,xpath
xpath可以通过chrome浏览器右键查看可以方便地查看路径.



--------------------- 
作者：Kosmoo 
来源：CSDN 
原文：https://blog.csdn.net/zwq912318834/article/details/79571110 
版权声明：本文为博主原创文章，转载请附上博文链接！


Request库参考文档
http://docs.python-requests.org/zh_CN/latest/user/quickstart.html
http://docs.python-requests.org/zh_CN/latest/user/advanced.html#ssl

