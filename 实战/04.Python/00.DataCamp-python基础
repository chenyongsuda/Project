1. string方法     index,count
2. List方法       list + list   list.reverse

---------------------package
import numpy
numpy.array

可以这样用
from numpy import array
array 直接用array

复杂的还可以这样引入
from scipy.linalg import inv as my_inv


---------------------numpy
numpy为了支持list等的+ - * / 的方法,原生的语言不支持.

普通的list + list 是合并
np的array + array 是每个元素相加
np 的array > number 产生一个 bool数组,每个元素和number对比产生的bool值.

sample: arr1 = [12,13,14,15,16,17,18]
arr1 > 17
[False,False,False,False,False,False,True]

arr1[arr1 > 18] --------->numpy的子元素功能,提供bool数组给numpy数组拿到子元素
[18]

维度API
array.ndarray

形状
np.sharp

访问多维数组
array[x][y] 等价于array[x,y]
array[x,y] 可以比较灵活的 比如 array[:,1:3] array[1,:]

np_mat = np.array([[1, 2],
                   [3, 4],
                   [5, 6]])
print(np_mat + np.array([10, 10]))

[[11 12]
 [13 14]
 [15 16]]
 
np的加减乘除,如果两边的维度不一致的话,低纬度会自动扩展为相同纬度进行计算.

np的计算
np.mean
np.media 
np.std 标准差


模拟值生成
numpy.random.normal(loc=0.0, scale=1.0, size=None)
1参数的意义为：

loc：float
    此概率分布的均值（对应着整个分布的中心centre）
scale：float
    此概率分布的标准差（对应于分布的宽度，scale越大越矮胖，scale越小，越瘦高）
size：int or tuple of ints
    输出的shape，默认为None，只输出一个值

sample
np.round(numpy.random.normal(xx,xx,xx),2)

Column 合并
np01 = [1,2,3]
np02 = [7,8,9]
print(np.column_stack((np01,np02)))
[[1 7]
 [2 8]
 [3 9]]

------------------------------------------------------------------------
python 制图

可以参考
链接：https://www.jianshu.com/p/fe4eaa20a230

import matplotlib.pyplot as plt
plt.plot(x,y)
plt.show()
-------------------------------------------------制作基本线图
plt.scatter()
制作散点图,没有线连接

plt.xscale('log')  # 对x轴采用对数刻度

设置XLable YLabel 和Title
plt.xlabel('人均GDP（美元）') 
plt.ylabel('人均寿命（年）')   
plt.title('各国健康和经济水平关系（2015）') 

plt.plot(df.gdp, df.life, 'g.')  # 'g.' 表示用绿色的点绘制
plt.plot(df.gdp, df.life, 'r+')   # "r" 表示红色 "+"表示用+号来绘图

x坐标的数字一般自动可以重置坐标
设置轴刻度的显示形式
tick_val = [1000,10000,100000]
tick_lab = ['1k','10k','100k']
plt.xticks(tick_val, tick_lab)  # 重置x坐标刻度

设置各个数据点的大小，与人口数成正比
size = df.popu / 1e6 * 2  # 数据点大小，正比于人口数
plt.scatter(x=df.gdp, y=df.life, s=size)  # 参数s设置点的大小
plt.xscale('log')
plt.xlabel('人均GDP（美元）')
plt.ylabel('人均寿命（年）')
plt.title('全球健康和收入水平关系（2015）')
tick_val = [1000,10000,100000]
tick_lab = ['1k','10k','100k']
plt.xticks(tick_val, tick_lab)
plt.show()

赋予不同州的国家不同的颜色
# 新建一个字典来存取各洲对应的颜色.
map_dict = {      
    'Asia':'red',
    'Europe':'green',
    'Africa':'blue',
    'North America':'yellow',
    'South America':'yellow',
    'Oceania':'black'
}
colors = df.continent.map(map_dict)   # 将国家按所在州对于不同的颜色
size = df.popu / 1e6 * 2
plt.scatter(x=df.gdp, y=df.life, s=size, c=colors, alpha=0.5)  # 参数c设置颜色，alpha设置透明度
plt.xscale('log')
plt.xlabel('人均GDP（美元）')
plt.ylabel('人均寿命（年）')
plt.title('全球健康和收入水平关系（2015）')
tick_val = [1000,10000,100000]
tick_lab = ['1k','10k','100k']
plt.xticks(tick_val, tick_lab)
plt.show()

添加文本和网格
plt.text(1550, 73, 'India')   # 在图中添加文本
plt.text(5700, 81, 'China')
plt.grid(True)  # 添加网格



--------------------------------------------------制作直方图
Histogram
直方图Y轴多数为数量

plt.hist(array)

cla()   # Clear axis即清除当前图形中的当前活动轴。其他轴不受影响。
clf()   # Clear figure清除所有轴，但是窗口打开，这样它可以被重复使用。
close() # Close a figure window

--------------------------------------------------柱状图
plt.bar(array-x,array-y)


--------------------------------------------------饼图
plt.pie(conti_count, labels=conti, autopct='%1.1f%%')  # autopct 显示占比
plt.axis('equal')  # 调整坐标轴的比例
plt.show()


--------------------------------------------------
map

map的keys方法 导出所有keys
map的values方法 导出所有的values

map增加变量 直接  map[xxx] = xxx
判断在不在map中   xxx in map
删除              del map[xxx]


----------------------------------------------------
PANDAS 部分

df.columns 表示列的表头
pandas的表包含 x title  y title  和内容
x title 可以通过对象.index = xxxxx 赋值

可以通过多个map初始化 每个key为column title

读取csv文件
cars = pd.read_csv('cars.csv',index_col = 0)

     cars_per_cap        country  drives_right
US            809  United States          True
AUS           731      Australia         False
JAP           588          Japan         False
IN             18          India         False
RU            200         Russia          True
MOR            70        Morocco          True
EG             45          Egypt          True

访问columns使用
dataframe['xxx']    结果是serious
dataframe[['xxx']]  结果是df
dataframe[['xxx','yyy']]  结果是df

访问行
dataframe[slice]只能用slice不能用存数字


还有两种访问方式loc基于title text 或者 iloc基于interge
loc[]
或者
loc[[行,行,行],[列,列,列]]
loc[:,[xx,xx,xx]]

==========================================
python类型比较
int 可以和int比较
str 可以和str比较
int 不能和str比较

boolean操作符
and or not


===========================================
遍历map
for key,value in map.items():

numpy多维数组遍历
for val in np.nditer(array):
  一层一层数组遍历

pandas 迭代
for lab,row in df.iterrows():

增加一列数据 笨办法

# Code for loop that adds COUNTRY column
for rlab, row in cars.iterrows():
    cars.loc[rlab,"COUNTRY"] = row["country"].upper()
    
高效的办法
cars["COUNTRY"] = cars["country"].apply(str.upper)
print(cars)

矩阵转置
np_aw_t = np.transpose(np.array(all_walks))
plt.plot(np_aw_t)
plt.show()

np.mean(ends > 30)

-----------------------------------------------------------
python 方法
方法参数1+
返回值1+ 多个返回值用tuple表示


查看内置函数
import builtins
dir(builtins)

global 使用修改全局变量,如果不修改也可以不要用.
nolocal 使用外层变量

参数固定参数
不固定参数使用*args
不固定keyval参数 **kvargs

for key,val in kvargs.items()

--------------------------------------------------
可迭代对象
创建iter
it = iter(item)
通过next(it)拿到值

或者通过*it拿到所有的值一次性迭代所有对象

sum函数里面是可迭代对象

enumrate可在任何可迭代对象上

zip后的对象也是可迭代对象
for x,y in zip(xx,xx)

LIST(zip/enumrate) 构造List对象
zip/enumrate也可以直接迭代

unzip使用如下所示
result1, result2 = zip(*z1)


1.查看DataFrame前xx行或后xx行
a=DataFrame(data);
a.head(6)表示显示前6行数据，若head()中不带参数则会显示全部数据。
a.tail(6)表示显示后6行数据，若tail()中不带参数则也会显示全部数据。

2.查看DataFrame的index，columns以及values
a.index ; a.columns ; a.values 即可


dataframe append dataframe
data = data.append(df_pop_ceb)




