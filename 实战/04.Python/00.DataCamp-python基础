1. string方法     index,count
2. List方法       list + list   list.reverse

---------------------package
import numpy
numpy.array

可以这样用
from numpy import array
array 直接用array

复杂的还可以这样引入
from scipy.linalg import inv as my_inv


---------------------numpy
numpy为了支持list等的+ - * / 的方法,原生的语言不支持.

普通的list + list 是合并
np的array + array 是每个元素相加
np 的array > number 产生一个 bool数组,每个元素和number对比产生的bool值.

sample: arr1 = [12,13,14,15,16,17,18]
arr1 > 17
[False,False,False,False,False,False,True]

arr1[arr1 > 18] --------->numpy的子元素功能,提供bool数组给numpy数组拿到子元素
[18]

维度API
array.ndarray

形状
np.sharp

访问多维数组
array[x][y] 等价于array[x,y]
array[x,y] 可以比较灵活的 比如 array[:,1:3] array[1,:]

np_mat = np.array([[1, 2],
                   [3, 4],
                   [5, 6]])
print(np_mat + np.array([10, 10]))

[[11 12]
 [13 14]
 [15 16]]
 
np的加减乘除,如果两边的维度不一致的话,低纬度会自动扩展为相同纬度进行计算.

np的计算
np.mean
np.media 
np.std 标准差


模拟值生成
numpy.random.normal(loc=0.0, scale=1.0, size=None)
1参数的意义为：

loc：float
    此概率分布的均值（对应着整个分布的中心centre）
scale：float
    此概率分布的标准差（对应于分布的宽度，scale越大越矮胖，scale越小，越瘦高）
size：int or tuple of ints
    输出的shape，默认为None，只输出一个值

sample
np.round(numpy.random.normal(xx,xx,xx),2)

Column 合并
np01 = [1,2,3]
np02 = [7,8,9]
print(np.column_stack((np01,np02)))
[[1 7]
 [2 8]
 [3 9]]

------------------------------------------------------------------------
python 制图

可以参考
链接：https://www.jianshu.com/p/fe4eaa20a230

import matplotlib.pyplot as plt
plt.plot(x,y)
plt.show()
-------------------------------------------------制作基本线图
plt.scatter()
制作散点图,没有线连接

plt.xscale('log')  # 对x轴采用对数刻度

设置XLable YLabel 和Title
plt.xlabel('人均GDP（美元）') 
plt.ylabel('人均寿命（年）')   
plt.title('各国健康和经济水平关系（2015）') 

plt.plot(df.gdp, df.life, 'g.')  # 'g.' 表示用绿色的点绘制
plt.plot(df.gdp, df.life, 'r+')   # "r" 表示红色 "+"表示用+号来绘图

x坐标的数字一般自动可以重置坐标
设置轴刻度的显示形式
tick_val = [1000,10000,100000]
tick_lab = ['1k','10k','100k']
plt.xticks(tick_val, tick_lab)  # 重置x坐标刻度

设置各个数据点的大小，与人口数成正比
size = df.popu / 1e6 * 2  # 数据点大小，正比于人口数
plt.scatter(x=df.gdp, y=df.life, s=size)  # 参数s设置点的大小
plt.xscale('log')
plt.xlabel('人均GDP（美元）')
plt.ylabel('人均寿命（年）')
plt.title('全球健康和收入水平关系（2015）')
tick_val = [1000,10000,100000]
tick_lab = ['1k','10k','100k']
plt.xticks(tick_val, tick_lab)
plt.show()

赋予不同州的国家不同的颜色
# 新建一个字典来存取各洲对应的颜色.
map_dict = {      
    'Asia':'red',
    'Europe':'green',
    'Africa':'blue',
    'North America':'yellow',
    'South America':'yellow',
    'Oceania':'black'
}
colors = df.continent.map(map_dict)   # 将国家按所在州对于不同的颜色
size = df.popu / 1e6 * 2
plt.scatter(x=df.gdp, y=df.life, s=size, c=colors, alpha=0.5)  # 参数c设置颜色，alpha设置透明度
plt.xscale('log')
plt.xlabel('人均GDP（美元）')
plt.ylabel('人均寿命（年）')
plt.title('全球健康和收入水平关系（2015）')
tick_val = [1000,10000,100000]
tick_lab = ['1k','10k','100k']
plt.xticks(tick_val, tick_lab)
plt.show()

添加文本和网格
plt.text(1550, 73, 'India')   # 在图中添加文本
plt.text(5700, 81, 'China')
plt.grid(True)  # 添加网格



--------------------------------------------------制作直方图
Histogram










