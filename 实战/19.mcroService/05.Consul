=========================================================================
安装Consul
下载https://releases.hashicorp.com/consul/1.4.0/consul_1.4.0_linux_amd64.zip
#unzip consul_1.4.0_linux_amd64.zip
#mv consul /usr/bin/
完成

==========================================================================
Consul有两种方式搭建方式：一是bootstrap模式，二是非bootstrap模式。
1. 在启动agent
在第一台节点上启动agent，以server模式运行，指定server角色的节点数目，指定节点名（在datacenter内节点名唯一），同时提供监听地址。
命令如下：
[ceph@node0 cousul]$ consul agent -server-bootstrap-expect=3 -data-dir=/tmp/consul -node=node0 -bind=192.168.192.120-dc=dc1
之所以失败，原因在于当前的Datacenter没有 leader server
依次在另外两台机器部署agent作为server

节点node1
[ceph@node1 consul]$ consul agent-server -bootstrap-expect=3 -data-dir=/tmp/consul -node=node1-bind=192.168.192.121 -dc=dc1

节点node2
[ceph@node2 consul]$ consul agent-server -bootstrap-expect=3 -data-dir=/tmp/consul -node=node2-bind=192.168.192.122 -dc=dc1

目前，三个节点均不知道其他Server节点的存在，以node0为例
[ceph@node0 consul]$ consul members
Node   Address               Status  Type   Build  Protocol  DC
node0  192.168.192.120:8301  alive  server  0.6.4  2        dc1

查看consul集群信息
[ceph@node0 consul]$ consul info

2. 触发选举leader
因为consul一般需要3~5个Server，因此，在节点node0上添加node1和node2。
[ceph@node0 consul]$ consul join192.168.192.121
Successfully joined cluster bycontacting 1 nodes.

[ceph@node0 consul]$ consul join192.168.192.122
Successfully joined cluster bycontacting 1 nodes.

3. 在node3上以client启动agent
[ceph@node3 consul]$ consul agent-data-dir=/tmp/consul -node=node3 -bind=192.168.192.123 -dc=dc1

在节点node0上添加node3
[ceph@node0 consul]$ consul join192.168.192.123
==============================================================================================================
别的集中集群参数组合
先配置一个单机节点启动,切换用户为root
[root@s1 vagrant]# consul agent -server -bootstrap-expect 1 -data-dir /etc/consul.d -node=node1 -bind=172.20.20.20 -ui -client 0.0.0.0

集群
搭建服务集群
登录虚机s1，切换用户为root，启动consul 设置节点数为3
[root@s1 vagrant]# consul agent -server -bootstrap-expect 3 -data-dir /etc/consul.d -node=node1 -bind=172.20.20.20 -ui -client 0.0.0.0
登录虚机s2，切换用户为root，启动consul 设置节点数为3 并加入到s1中,注意 node名称不能重复

[root@s2 vagrant]# consul agent -server -bootstrap-expect 3 -data-dir /etc/consul.d -node=node2 -bind=172.20.20.21 -ui -client 0.0.0.0 -join 172.20.20.20
登录虚机s3，重复在s2中的操作

[root@s3 vagrant]# consul agent -server -bootstrap-expect 3 -data-dir /etc/consul.d -node=node3 -bind=172.20.20.22 -ui -client 0.0.0.0 -join 172.20.20.20


集群搭建其他例子
服务器1，IP 192.168.1.100
consul agent -bootstrap-expect 2 -server -data-dir /data/consul -node=swoft01 -bind=0.0.0.0 -client=0.0.0.0 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=sunny -client=0.0.0.0
 
上面这个命令是以服务端模式启动一个代理，进群有两个扩展机器，设置集群持久化数据存放在/data/consul0下面，节点名称是swoft01，绑定0.0.0.0地址，服务配置文件存放在/etc/consul.d，开启检查心跳，数据中心的名称是dc1，可访问的客户端地址是0.0.0.0
服务器2，IP 192.168.1.110
consul agent -server -data-dir /data/consul -node=swoft02 -bind=0.0.0.0 -client=0.0.0.0 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=sunny -join 192.168.1.100
 
服务器3，IP 192.168.1.120
consul agent -server -data-dir /data/consul -node=swoft03 -bind=0.0.0.0 -client=0.0.0.0 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=sunny -join 192.168.1.100

以上服务器2和服务3使用 -join 加入集群，并且使用同一个数据名称sunny
4、Client配置
服务器4，IP 192.168.1.130
consul agent -ui -data-dir /data/consul -node=swoft04 -bind=0.0.0.0 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=sunny -ui -client=0.0.0.0 -join 192.168.1.100
客户端如果不使用-server就是客户端模式运行，其他参数同上，服务端和客户端都启动了之后可以在浏览器输入 http://192.168.1.130:8500 来查看信息



==============================================================================================================
配置文件的解析

Agent有各种各样的配置选项，这些配置选项可以通过命令行参数的方式设定，也可用通过配置文件的方式设定——所有的配置选项都是可选的，当然也是有默认值的。
当加载配置选项时，consul是按照词典顺序从所有配置文件或目录中加载。比如，basic_config.json会先于extra_config.json处理。
后面设定的配置选项会合并到前面的配置集合中，如果存在重复的配置选项则会覆盖。当然，在某些情况下，比如事件处理程序，
后面处理程序会追加到现有的配置选项中，形成事件处理程序列表。
Consul支持重新加载配置(在收到SIGHUP信号时)，但也不是所有的改变都可以重新加载，只有某些ReLoadable Configuration可以重新加载。
也可用通过命令重新加载，后面会介绍。

命令行参数
如下都是可以在命令行指定的参数：

Ø  -config-file
需要加载的配置文件，在文件中都是json格式的信息，该参数可以多次配置，后面文件中加载的参数会覆盖前面加载文件中的参数。

Ø  -config-dir
需要加载的配置文件目录，consul将加载目录下所有后缀为“.json”的文件，加载顺序为字母顺序，文件中配置选项合并方式如config-file。该参数可以多次配置。目录中的子目录是不会加载的。

Ø  -data-dir
此目录是为Agent存放state数据的。是所有Agent需要的，该目录应该存放在持久存储中（reboot不会丢失），对于server角色的Agent是很关键的——需要记录集群状态。并且该目录是支持文件锁。

Ø  -log-level
日志级别。默认为info。有如下级别："trace","debug", "info", "warn", and "err"。可以使用consul monitor来连接agent查看日志。日志级别可以在reload时进行改变。

Ø  -syslog
将日志记录进syslog（仅支持Linux和OSX平台）

Ø  -pid-file
记录pid的文件

Ø  -server
设置Agent是server模式还是client模式。Consul agent有两种运行模式：Server和Client。这里的Server和Client只是Consul集群层面的区分，与搭建在Cluster之上 的应用服务无关。Consule Server模式agent节点用于采用raft算法维护Consul集群的状态，官方建议每个Consul Cluster至少有3个或以上的运行在Server mode的Agent，Client节点不限。

Ø  -client
将绑定到client接口的地址，可以是HTTP、DNS、RPC服务器。默认为“127.0.0.1”——只允许回路连接。RPC地址会被其他的consul命令使用，比如consul members——查询agent列表

Ø  -node
节点在集群的名字，在集群中必须是唯一的。默认为节点的Hostname

Ø  -bootstrap
设置服务是否为“bootstrap”模式。如果数据中心只有1个server agent，那么需要设置该参数。从技术上来讲，处于bootstrap模式的服务器是可以选择自己作为Raft Leader的。在consul集群中，只有一个节点可以配置该参数，如果有多个参数配置该参数，那么难以保证一致性。

Ø  -bootstrap-expect
数据中心期望的server agent数目，不能与bootstrap一起使用。此参数要么不配置，要么consul集群中所有的server均配置相同的值。如果配置了该参数，只想当consul集群中有效server agent的数目达到此数量时才会引导集群启动。

Ø  -dc
数据中心的名字

Ø  -bind
用于集群内部通信的IP地址，与集群中其他节点互连可通。默认为“0.0.0.0”——consul将使用第一个有效的私有IPv4地址。如果指定“[::]”，consul将使用第一个有效的公共IPv6地址。使用TCP和UDP通信。注意防火墙，避免无法通信。

1.1.2 配置文件
除了命令行配置外，配置选项也可以存放在文件中。这种方式在某种情况下是非常方便的，比如，配置选项是由配置管理系统来管理。

配置文件都是json格式的，是易读和易编辑的——在文件中，每一个json对象都是格式化的。

配置文件不仅仅可以设置Agent，而且还能够提供Check和service定义。参见check配置和service配置。Check配置与service配置均是可通过reload更新的。

1.1.2.1    示例
配置文件示例

{
  "datacenter": "east-aws",
  "data_dir": "/opt/consul",
  "log_level": "INFO",
  "node_name": "foobar",
  "server": true,
  "watches": [
    {
        "type": "checks",
        "handler": "/usr/bin/health-check-handler.sh"
    }
  ],
  "telemetry": {
     "statsite_address": "127.0.0.1:2180"
  }
}
 

配置文件示例（TLS）

{
  "datacenter": "east-aws",
  "data_dir": "/opt/consul",
  "log_level": "INFO",
  "node_name": "foobar",
  "server": true,
  "addresses": {
    "https": "0.0.0.0"
  },
  "ports": {
    "https": 8080
  },
  "key_file": "/etc/pki/tls/private/my.key",
  "cert_file": "/etc/pki/tls/certs/my.crt",
  "ca_file": "/etc/pki/tls/certs/ca-bundle.crt"
}
 

参数说明
Ø  datacenter
同命令行参数-datacenter

Ø  data_dir
同命令行参数-data_dir

Ø  bootstrap
同命令行参数-bootstrap

Ø  bootstrap_expect
同命令行参数-bootstrap_expect

Ø  bind_addr
同命令行参数-bind

Ø  enable_syslog
同命令行参数-syslog

Ø  log_level
同命令行参数-log_level

Ø  node_name
同命令行参数node


1.1.3 可重载配置
Reload配置 并不能reload所有配置选项，下面的选项可以重载：
Ø  Log level
Ø  Checks
Ø  Services
Ø  Watches
Ø  HTTP Client Address
Ø  Atlas Token
Ø  Atlas Infrastructure
Ø  Atlas Endpoint

==========================================================================================================
【Consul】Consul实践指导-健康检查（Checks）


==========================================================================================================
【Consul】consul HTTP API及实践
服务增减测试，API和reload优先级测试
1、手动增减conf.d/*.json，然后操作consul reload，会增减对应的服务
2、通过HTTP API增减服务后，执行consul reload，会还原成conf.d/*.json的服务配置，之前HTTP API的增减服务操作会被覆盖，
也就是API会导致json文件和内存中的服务信息不一致。（尚未发现consul提供将当前内存中的服务配置信息dump出.json文件的功能）

实践结论1：consul reload会以conf.d/*.json为准去同步当前consul内存中当前机器注册的服务。
使用consul建议使用conf.d/*.json文件的方式增减服务，而非API，这样有落地的json文件多一份保障。

实践结论2：
Node名称唯一，通过修改json然后consul reload方式增加节点时会取当前机器的（内网）IP，具体如何区别的内外外网未知。
通过API注册服务时，json参数Node和Address必填，会使用Address覆盖掉Node当前的Address

实践结论3：
consul reload不会reload配置文件consul.json，只reload conf.d/*.json

实践结论4：
若干agent server会保存同样的数据到设置的data目录，agent client也会保存一部分数据至data目录，重启consul agent(server或client)的时候，
会重新加载data目录的信息，猜测client存放的是有版本号的服务信息，并且重启时会从server端同步最新的数据。

==============================================================================================================================
【Consul】consul HTTP API  KV篇
0、查看当前集群所有服务
curl -s 127.0.0.1:8500/v1/catalog/services | python -m json.tool

0.5、查看本机配置
curl -s 127.0.0.1:8500/v1/agent/self | python -m json.tool

1、查看服务状态
curl -s http://127.0.0.1:8500/v1/catalog/service/prometheus-pushgateway | python -m json.tool

1.5、查看本机服务
curl -s 127.0.0.1:8500/v1/agent/services | python -m json.tool

2、查看不健康的服务
curl -s http://localhost:8500/v1/health/state/critical | python -m json.tool

3、添加KV（值为test，url末尾的斜杠会算作key的一部分）
curl -X PUT-d 'test' http://localhost:8500/v1/kv/key1
curl -X PUT-d 'test' http://localhost:8500/v1/kv/key1/

4、查看当前所有的KV
curl -s http://localhost:8500/v1/kv/?recurse | python -m json.tool

5、查看单个KV
curl -s http://localhost:8500/v1/kv/petanne/key1 | python -m json.tool

6、查看指定路径下的KV（url末尾的斜杠会算作key的一部分，可以理解为以petanne开头的所有key）
curl-s http://localhost:8500/v1/kv/petanne?recurse | python -m json.tool
curl-s http://localhost:8500/v1/kv/petanne/?recurse | python -m json.tool

7、删除单个KV
curl -X DELETE http://localhost:8500/v1/kv/petanne

8、删除指定路径下的KV（末尾斜杠同查看）
curl -X DELETE http://localhost:8500/v1/kv/petanne?recurse

9、修改单个KV
curl -X PUT -d 'newval' http://localhost:8500/v1/kv/petanne/key1
curl -X PUT -d 'newval' http://localhost:8500/v1/kv/petanne/key1?cas=5820778

(cas == ModifyIndex 才能修改成功，防止多人同时修改时冲突)

10、查看KV（查看比指定index大的ModifyIndex的该key的值，最多等待5秒，否则返回当前最新值）
curl "http://localhost:8500/v1/kv/petanne/key2?index=5820781&wait=5s"

agent篇
agent endpoints用来和本地agent进行交互，一般用来服务注册和检查注册，支持以下接口

/v1/agent/checks : 返回本地agent注册的所有检查(包括配置文件和HTTP接口)
/v1/agent/services : 返回本地agent注册的所有 服务
/v1/agent/members : 返回agent在集群的gossip pool中看到的成员
/v1/agent/self : 返回本地agent的配置和成员信息
/v1/agent/join/<address> : 触发本地agent加入node
/v1/agent/force-leave/<node>>: 强制删除node
/v1/agent/check/register : 在本地agent增加一个检查项，使用PUT方法传输一个json格式的数据
/v1/agent/check/deregister/<checkID> : 注销一个本地agent的检查项
/v1/agent/check/pass/<checkID> : 设置一个本地检查项的状态为passing
/v1/agent/check/warn/<checkID> : 设置一个本地检查项的状态为warning
/v1/agent/check/fail/<checkID> : 设置一个本地检查项的状态为critical
/v1/agent/service/register : 在本地agent增加一个新的服务项，使用PUT方法传输一个json格式的数据
/v1/agent/service/deregister/<serviceID> : 注销一个本地agent的服务项
catalog篇
catalog endpoints用来注册/注销nodes、services、checks

/v1/catalog/register : Registers a new node, service, or check
/v1/catalog/deregister : Deregisters a node, service, or check
/v1/catalog/datacenters : Lists known datacenters
/v1/catalog/nodes : Lists nodes in a given DC
/v1/catalog/services : Lists services in a given DC
/v1/catalog/service/<service> : Lists the nodes in a given service
/v1/catalog/node/<node> : Lists the services provided by a node

health篇
health endpoints用来查询健康状况相关信息，该功能从catalog中单独分离出来

/v1/healt/node/<node>: 返回node所定义的检查，可用参数?dc=
/v1/health/checks/<service>: 返回和服务相关联的检查，可用参数?dc=
/v1/health/service/<service>: 返回给定datacenter中给定node中service
/v1/health/state/<state>: 返回给定datacenter中指定状态的服务，state可以是"any", "unknown", "passing", "warning", or "critical"，可用参数?dc=

session篇
session endpoints用来create、update、destory、query sessions

/v1/session/create: Creates a new session
/v1/session/destroy/<session>: Destroys a given session
/v1/session/info/<session>: Queries a given session
/v1/session/node/<node>: Lists sessions belonging to a node
/v1/session/list: Lists all the active sessions

acl篇
acl endpoints用来create、update、destory、query acl

/v1/acl/create: Creates a new token with policy
/v1/acl/update: Update the policy of a token
/v1/acl/destroy/<id>: Destroys a given token
/v1/acl/info/<id>: Queries the policy of a given token
/v1/acl/clone/<id>: Creates a new token by cloning an existing token
/v1/acl/list: Lists all the active tokens

event篇
event endpoints用来fire新的events、查询已有的events

/v1/event/fire/<name>: 触发一个新的event，用户event需要name和其他可选的参数，使用PUT方法
/v1/event/list: 返回agent知道的events

status篇
status endpoints用来或者consul 集群的信息

/v1/status/leader : 返回当前集群的Raft leader
/v1/status/peers : 返回当前集群中同事
