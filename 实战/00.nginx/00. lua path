openresty的lua_package_path
文档
lua_package_path可以配置openresty的文件寻址路径。官网文档如下：

 # 设置纯 Lua 扩展库的搜寻路径(';;' 是默认路径):
 lua_package_path '/foo/bar/?.lua;/blah/?.lua;;';

 # 设置 C 编写的 Lua 扩展模块的搜寻路径(也可以用 ';;'):
 lua_package_cpath '/bar/baz/?.so;/blah/blah/?.so;;';
然后require的字符串就会替换对应的问号?，一个文件就会去/foo/bar/下面寻找。

example
在代码中require "controller.test",会依次根据package.path匹配对应的lua文件。即替换掉对应的问号。（在lapis框架中，在框架的根目录中创建一个文件夹名字叫controllers，写一个文件test.lua，可以正常输出，改为controller，找不到对应的文件夹，打开日志，查看openresty的寻找方式）

首先输出package.path:

/usr/local/openresty/site/lualib/?.lua;/usr/local/openresty/site/lualib/?/init.lua;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/?/init.lua;./?.lua;/usr/local/openresty/luajit/share/luajit-2.1.0-beta2/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?/init.lua
在log中查看：

    no field package.preload['controller.test']
    no file '/usr/local/openresty/site/lualib/controller/test.lua'
    no file '/usr/local/openresty/site/lualib/controller/test/init.lua'
    no file '/usr/local/openresty/lualib/controller/test.lua'
    no file '/usr/local/openresty/lualib/controller/test/init.lua'
    no file './controller/test.lua'
    no file '/usr/local/openresty/luajit/share/luajit-2.1.0-beta2/controller/test.lua'
    no file '/usr/local/share/lua/5.1/controller/test.lua'
    no file '/usr/local/share/lua/5.1/controller/test/init.lua'
    no file '/usr/local/openresty/luajit/share/lua/5.1/controller/test.lua'
    no file '/usr/local/openresty/luajit/share/lua/5.1/controller/test/init.lua'
    no file '/usr/local/openresty/site/lualib/controller/test.so'
    no file '/usr/local/openresty/lualib/controller/test.so'
    no file './controller/test.so'
    no file '/usr/local/lib/lua/5.1/controller/test.so'
    no file '/usr/local/openresty/luajit/lib/lua/5.1/controller/test.so'
    no file '/usr/local/lib/lua/5.1/loadall.so'
    no file '/usr/local/openresty/site/lualib/controller.so'
    no file '/usr/local/openresty/lualib/controller.so'
    no file './controller.so'
    no file '/usr/local/lib/lua/5.1/controller.so'
    no file '/usr/local/openresty/luajit/lib/lua/5.1/controller.so'
    no file '/usr/local/lib/lua/5.1/loadall.so'
openresty根据package.path依次替换到寻找文件，全部寻找完毕还找不到就报错。


==========================================================================
Lua local 变量的使用

1.Lua 中的变量全是全局变量，无论语句块或是函数里，除非用 local 显式声明为局部变量，变量默认值均为nil
2.使用local创建一个局部变量，与全局变量不同，局部变量只在被声明的那个代码块内有效。（代码块：指的是一个控制结构内，一个函数体，
或者一个chunk（变量被声明的那个文件或者文本串））

x = 10
local i = 1                 --local to the chunk
 
while i <= x do
    local x = i * 2           --local to the while body
    print(x)
    i = i + 1
end
 
if i > 20 then 
    local x                     -- local to the "then" body
    x = 20
    print(x + 2)
else
    print(x)
end
 
print(x)

==========================================================================
Lua基本数据类型
lua的基本数据类型有nil、string、boolean、number、function类型。

nil 类型
nil类似于Java中的null ，表示空值。变量第一次赋值为nil。

local num
print(num)
num=100
print(num)

终端输出：
nil
100

number (数字)
Number 类型用于表示实数，和 Java里面的 double 类型很类似。可以使用数学函数
math.floor（向下取整） 和 math.ceil（向上取整） 进行取整操作。


local order = 3.99
local score = 98.01
print(math.floor(order))
print(math.ceil(score))

输出：
3

99

string 字符串
Lua 中有三种方式表示字符串:
1、使用一对匹配的单引号。例：‘hello’。
2、使用一对匹配的双引号。例："abclua
3.字符串还可以用一种长括号（即[[ ]]） 括起来的方式定义

ocal str1 = 'hello world'
local str2 = "hello lua"
local str3 = [["add\name",'hello']]
local str4 = [=[string have a [[]].]=]
print(str1) -->output:hello world
print(str2) -->output:hello lua
print(str3) -->output:"add\name",'hello'
print(str4) --

table (表)
Table 类型实现了一种抽象的“关联数组”。“关联数组”是一种具有特殊索引方式的数组，索引通常是字符串（string） 或者 number 类型，但也可以是除 nil 以外的任意类型的值。

local corp = {
    web = "www.google.com", --索引为字符串，key = "web",
                              -- value = "www.google.com"
    telephone = "12345678", --索引为字符串
    staff = {"Jack", "Scott", "Gary"}, --索引为字符串，值也是一个表
    100876, --相当于 [1] = 100876，此时索引为数字
            -- key = 1, value = 100876
    100191, --相当于 [2] = 100191，此时索引为数字
    [10] = 360, --直接把数字索引给出
    ["city"] = "Beijing" --索引为字符串
}

print(corp.web) -->output:www.google.com
print(corp["telephone"]) -->output:12345678
print(corp[2]) -->output:100191
print(corp["city"]) -->output:"Beijing"
print(corp.staff[1]) -->output:Jack
print(corp[10]) -->output:36

function(函数)
在 Lua 中，函数 也是一种数据类型，函数可以存储在变量中，可以通过参数传递给其他函
数，还可以作为其他函数的返回值。


local function foo()
   print("in the function")
   --dosomething()
   local x = 10
   local y = 20
   return x + y
end
local a = foo --把函数赋给变量
print(a())

--output:
in the function
30


~= 不等于

逻辑运算符	说明
and	逻辑与
or	逻辑或
not	逻辑非
a and b 如果 a 为 nil，则返回 a，否则返回 b;
a or b 如果 a 为 nil，则返回 b，否则返回 a。
local c = nil
local d = 0
local e = 100
print(c and d) -->打印 nil
print(c and e) -->打印 nil
print(d and e) -->打印 100
print(c or d) -->打印 0
print(c or e) -->打印 100
print(not c) -->打印 true
print(not d) --> 打印 false

在 Lua 中连接两个字符串，可以使用操作符“…”（两个点）.

print("Hello " .. "World") -->打印 Hello World
print(0 .. 1) -->打印 01

控制语句
控制语句
单个 if 分支 型

x = 10
if x > 0 then
    print("x is a positive number")
end


两个分支 if-else 型

x = 10
if x > 0 then
    print("x is a positive number")
else
    print("x is a non-positive number")
end

多个分支 if-elseif-else 型:

score = 90
if score == 100 then
    print("Very good!Your score is 100")
elseif score >= 60 then
    print("Congratulations, you have passed it,your score greater or equal to 60")
    --此处可以添加多个elseif
else
    print("Sorry, you do not pass the exam! ")
end


for 控制结构
Lua 提供了一组传统的、小巧的控制结构，包括用于条件判断的 if 用于迭代的 while、repeat
和 for，本章节主要介绍 for 的使用.

for 数字型
for 语句有两种形式：数字 for（numeric for） 和范型 for（generic for） 。
数字型 for 的语法如下：

for var = begin, finish, step do
--body
end

实例1：

for i = 1, 5 do
    print(i)
end
-- output:
1 2 3 4 5

实例2：

for i = 1, 10, 2 do
    print(i)
end
-- output:
1 3 5 7 9

for 泛型
泛型 for 循环通过一个迭代器（iterator） 函数来遍历所有值：

-- 打印数组a的所有值
local a = {"a", "b", "c", "d"}
for i, v in ipairs(a) do
    print("index:", i, " value:", v)
end

-- output:
index: 1 value: a
index: 2 value: b
index: 3 value: c
index: 4 value: d

--------------------- 
作者：方志朋 
来源：CSDN 
原文：https://blog.csdn.net/forezp/article/details/78616622 
版权声明：本文为博主原创文章，转载请附上博文链接！
