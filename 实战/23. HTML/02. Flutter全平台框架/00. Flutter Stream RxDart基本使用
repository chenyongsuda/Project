1. Stream的概念可视化与简单化，可以将它想成是管道（pipe）的两端，它只允许从一端插入数据并通过管道从另外一端流出数据。
在Flutter中，
单点订阅（单播）Stream
StreamController _streamCtl = StreamController();
该类型的Stream在其整个生命周期中只有一个监听者。
如果订阅已经被取消，就不能再次监听这个Stream。

多点订阅（广播）Stream
StreamController _streamCtl = StreamController.broadcast();
对比前者，该类型的Stream不限制监听者的数量。
我们可以在广播Stream的任何周期添加监听者，新的监听者会在监听的同时收到相应的订阅。

StreamBuilder是通过流数据封装的组件,带自动刷新功能,不需要调用setstat
StreamBuilder<List<String>>(
    stream: dataStream,
    initialData: ["none"],
    ///这里的 snapshot 是数据快照的意思
    builder: (BuildContext context, AsyncSnapshot<List<String>> snapshot) {
      ///获取到数据，为所欲为的更新 UI
      var data = snapshot.data;
      return Container();
    });

StreamController ：如类名描述，用于整个 Stream 过程的控制，提供各类接口用于创建各种事件流。
StreamSink：一般作为事件的入口，提供如 add ， addStream 等。
Stream：事件源本身，一般可用于监听事件或者对事件进行转换，如 listen 、 where 。
StreamSubscription：事件订阅后的对象，表面上用于管理订阅过等各类操作，如 cacenl 、pause ，同时在内部也是事件的中转关键。

例子通过流监控数据变化的组件.
body: 
Column(
      children: <Widget>[
        Container(
          child: StreamBuilder(
            stream: _streamCtl.stream,
            initialData: "...",
            builder: (ctx,snapShot){
              return Text("${snapShot.data}");
            }
          )
        ),
        RaisedButton(
          child: Text("Click Have words"),
          onPressed: (){
            count++;
            if(count%2 == 0){
              _streamCtl.sink.add("abc");
            }else{
              _streamCtl.sink.add("efg");
            }
        })
      ],
  ),

------------------------------------
Stream是单纯的管道？
肯定不是！Stream均可以在数据流入之前和流出之前对数据进行处理。
我们可以使用StreamTransformer来处理Stream中的数据，它具有以下特点：

它是Stream中能够捕获数据流的一系列函数；
可以对Stream中的数据进行处理加工；
经过处理的Stream依然是Stream（链式编码的前提）。
StreamTransformer可以用于以下场景（包括但不仅限于）：

过滤：过滤基于条件的任何类型数据；
修改：对任何类型数据进行修改；
重新分组：对数据进行重新分组；
向其他Stream注入数据；
缓存
其他基于数据的行为和操作；
...

-------------------------------------------------
RxDart
Observable实现并扩展了Stream。它将常用的stream和streamTransformer组合成了非常好用的api。你可以把它想像成stream。
Subject实现并扩展了StreamController,它符合StreamController的所有规范。假如您之前使用的StreamController,那么你可以直接替换为Subject。你可以把它想像成streamController。

1.你可以把stream直接包装成Observable
var obs = Observable(Stream.fromIterable([1,2,3,4,5]));
obs.listen(print);

2.通过Future创建：fromFuture
var obs = Observable.fromFuture(new Future.value("Hello"));
obs.listen(print); 

3.通过Iterable创建：fromIterable
var obs = Observable.fromInterable([1,2,3,4,5]);
obs.listen(print);

4.interval方法能够让流“吐出数据”后间隔一段时间再吐下一个数据。
  var obs = Observable(Stream.fromIterable([1,2,3,4,5]))
    .interval(new Duration(seconds: 1));
  obs.listen(print);
  
5.创建相同时间间隔下重复出现的
  Observable.periodic(_,_)

6.创建just
  Observable.just

7.map方法能够让我们迭代的处理每一个数据并返回一个新的数据
 var obs = Observable(Stream.fromIterable([1,2,3,4,5]))
    .map((item)=>++item);
 obs.listen(print);

8.expand方法能够让我们把把每个item扩展至多个流
 var obs = Observable(Stream.fromIterable([1,2,3,4,5]))
   .expand((item)=> [item,item.toDouble()]);

 obs.listen(print);
输出：1 1.0 2 2.0 3 3.0 4 4.0 5 5.0
这里我们将每个数据扩展成【item，item.toDouble】你可以扩展成任意组的流。假如这是一个广播Observable,并被多次收听，那么他可以单独调用expand并扩展自己。

9.合并流：merge
merge方法能够让我们合并多个流,请注意输出。
  var obs = Observable.merge([
    Stream.fromIterable([1,2,3]),
    Stream.fromIterable([4,5,6]),
    Stream.fromIterable([7,8,9]),
  ]);

  obs.listen(print);
  输出：1 4 7 2 5 8 3 6 9


10.顺序执行多个流：concat
concat方法能够让我们按照顺序执行一组流，当一组流执行完毕后，再开始执行下一组。
  var obs = Observable.concat([
    Stream.fromIterable([1,2,3]),
    Stream.fromIterable([4,5,6]),
    Stream.fromIterable([7,8,9]),
  ]);

  obs.listen(print);
  输出：1 2 3 4 5 6 7 8 9

11.检查每一个item：every
every会检查每个item是否符合要求，然后它将会返回一个能够被转化为 Observable 的 AsObservableFuture< bool>。
  var obs = Observable.fromIterable([1,2,3,4,5]);
  obs.every((x)=> x < 10).asObservable().listen(print);
输出结果：true


总结：
关于Observable你还需要知道这些
Dart中 Observables 默认是单一订阅。如果您尝试两次收听它，则会抛出 StateError 。你可以使用工厂方法或者 asBroadcastStream 将其转化为多订阅流。
  var obs = Observable(Stream.fromIterable([1,2,3,4,5])).asBroadcastStream();
很多方法的返回值并不是一个 Single 也不是一个 Observable 而是必须返回一个Dart的 Future。幸运的是你很容易找到一些方法，把他们转化成回 stream。
出现错误时，Dart中的Stream不会默认关闭。但是在Rxdart中，Error会导致Observable终止，除非它被运算符拦截。
默认情况下Dart中Stream是异步的，而Observables默认是同步的。
在处理多订阅Observable的时候，onListen方法只有在第一次会被调用。且各个订阅者之间不会互相干涉。
  var obs = Observable(Stream.fromIterable([1,2,3,4,5])).asBroadcastStream();

//第一个订阅者
  obs.interval(Duration(seconds: 1)).map((item) => ++item).listen(print);
//第二个订阅者
  obs.listen(print);
输出：1 2 3 4 5 2 3 4 5 6
---------------------------------------------

增强版StreamController——Subject

普通广播流控制器：PublishSubject
PublishSubject就是一个普通广播版StreamController，你可以多次收听，默认是sync是false，
也就是说里面是一个AsyncBroadcastStreamController 异步广播流。

缓存最新一次事件的广播流控制器：BehaviorSubject
BehaviorSubject也是一个广播流，但是它能记录下最新一次的事件，并在新的收听者收听的时候将记录下的事件作为第一帧发送给收听者。

final subject = BehaviorSubject<int>(seedValue: 0);
subject.add(1);
subject.add(2);
subject.add(3);
subject.stream.listen(print); // prints 3
subject.stream.listen(print); // prints 3
subject.stream.listen(print); // prints 3

广播流控制器：ReplaySubject
ReplaySubject
ReplaySubject也是广播StreamController，从字面上可以了解到它可以回放已经消失的事件。

示例代码：
final subject1 = ReplaySubject<int>();
subject1.add(1);
subject1.add(2);
subject1.add(3);

subject1.stream.listen(print); // prints 1, 2, 3
subject1.stream.listen(print); // prints 1, 2, 3
subject1.stream.listen(print); // prints 1, 2, 3

final subject2 = ReplaySubject<int>(maxSize: 2);
subject2.add(1);
subject2.add(2);
subject2.add(3);

subject2.stream.listen(print); // prints 2, 3
subject2.stream.listen(print); // prints 2, 3
subject2.stream.listen(print); // prints 2, 3
注意，当监听资源不在使用时请释放它，对于StreamController和Subject可以调用其close函数，对于Stream来讲可以使用cancel函数取消订阅。

Subject的释放
当你不再收听Subject，或者Subject不再使用时，请务必释放它。你可以调用subscription的cancel()方法让某个听众取消收听，或者Subject.close()，关闭整个流。

-----------------------------------------------------
其实我们在做项目的时候，不可能用的这么简单！我就把其他的方法直接复制出来，有兴趣的可以去多试试！

_textFieldSubject
     .map((item) => 'item: $item')
     .listen((data) => print(data));  //RxDart的数据转换方法(map)

    _textFieldSubject
     .where((item) => item.length > 10)
     .listen((data) => print(data));  //这个就像是给数据设置一个条件，满足条件的数据才通过。

    _textFieldSubject
     .debounceTime(Duration(seconds: 2))
     .listen((data) => print(data));  //可以设置间隔的时间，过一段时间才让数据通过。









