1. Stream的概念可视化与简单化，可以将它想成是管道（pipe）的两端，它只允许从一端插入数据并通过管道从另外一端流出数据。
在Flutter中，
单点订阅（单播）Stream
StreamController _streamCtl = StreamController();
该类型的Stream在其整个生命周期中只有一个监听者。
如果订阅已经被取消，就不能再次监听这个Stream。

多点订阅（广播）Stream
StreamController _streamCtl = StreamController.broadcast();
对比前者，该类型的Stream不限制监听者的数量。
我们可以在广播Stream的任何周期添加监听者，新的监听者会在监听的同时收到相应的订阅。

StreamBuilder是通过流数据封装的组件,带自动刷新功能,不需要调用setstat
StreamBuilder<List<String>>(
    stream: dataStream,
    initialData: ["none"],
    ///这里的 snapshot 是数据快照的意思
    builder: (BuildContext context, AsyncSnapshot<List<String>> snapshot) {
      ///获取到数据，为所欲为的更新 UI
      var data = snapshot.data;
      return Container();
    });

StreamController ：如类名描述，用于整个 Stream 过程的控制，提供各类接口用于创建各种事件流。
StreamSink：一般作为事件的入口，提供如 add ， addStream 等。
Stream：事件源本身，一般可用于监听事件或者对事件进行转换，如 listen 、 where 。
StreamSubscription：事件订阅后的对象，表面上用于管理订阅过等各类操作，如 cacenl 、pause ，同时在内部也是事件的中转关键。

例子通过流监控数据变化的组件.
body: 
Column(
      children: <Widget>[
        Container(
          child: StreamBuilder(
            stream: _streamCtl.stream,
            initialData: "...",
            builder: (ctx,snapShot){
              return Text("${snapShot.data}");
            }
          )
        ),
        RaisedButton(
          child: Text("Click Have words"),
          onPressed: (){
            count++;
            if(count%2 == 0){
              _streamCtl.sink.add("abc");
            }else{
              _streamCtl.sink.add("efg");
            }
        })
      ],
  ),

------------------------------------
Stream是单纯的管道？
肯定不是！Stream均可以在数据流入之前和流出之前对数据进行处理。
我们可以使用StreamTransformer来处理Stream中的数据，它具有以下特点：

它是Stream中能够捕获数据流的一系列函数；
可以对Stream中的数据进行处理加工；
经过处理的Stream依然是Stream（链式编码的前提）。
StreamTransformer可以用于以下场景（包括但不仅限于）：

过滤：过滤基于条件的任何类型数据；
修改：对任何类型数据进行修改；
重新分组：对数据进行重新分组；
向其他Stream注入数据；
缓存
其他基于数据的行为和操作；
...

-------------------------------------------------
RxDart
Observable实现并扩展了Stream。它将常用的stream和streamTransformer组合成了非常好用的api。你可以把它想像成stream。
Subject实现并扩展了StreamController,它符合StreamController的所有规范。假如您之前使用的StreamController,那么你可以直接替换为Subject。你可以把它想像成streamController。

1.你可以把stream直接包装成Observable
var obs = Observable(Stream.fromIterable([1,2,3,4,5]));
obs.listen(print);

2.通过Future创建：fromFuture
var obs = Observable.fromFuture(new Future.value("Hello"));
obs.listen(print); 

3.通过Iterable创建：fromIterable
var obs = Observable.fromInterable([1,2,3,4,5]);
obs.listen(print);

4.interval方法能够让流“吐出数据”后间隔一段时间再吐下一个数据。
  var obs = Observable(Stream.fromIterable([1,2,3,4,5]))
    .interval(new Duration(seconds: 1));
  obs.listen(print);
  
5.创建相同时间间隔下重复出现的
  Observable.periodic(_,_)

6.创建just
  Observable.just

7.map方法能够让我们迭代的处理每一个数据并返回一个新的数据
 var obs = Observable(Stream.fromIterable([1,2,3,4,5]))
    .map((item)=>++item);
 obs.listen(print);

8.expand方法能够让我们把把每个item扩展至多个流
 var obs = Observable(Stream.fromIterable([1,2,3,4,5]))
   .expand((item)=> [item,item.toDouble()]);

 obs.listen(print);
输出：1 1.0 2 2.0 3 3.0 4 4.0 5 5.0
这里我们将每个数据扩展成【item，item.toDouble】你可以扩展成任意组的流。假如这是一个广播Observable,并被多次收听，那么他可以单独调用expand并扩展自己。

9.合并流：merge
merge方法能够让我们合并多个流,请注意输出。
  var obs = Observable.merge([
    Stream.fromIterable([1,2,3]),
    Stream.fromIterable([4,5,6]),
    Stream.fromIterable([7,8,9]),
  ]);

  obs.listen(print);
  输出：1 4 7 2 5 8 3 6 9


10.顺序执行多个流：concat
concat方法能够让我们按照顺序执行一组流，当一组流执行完毕后，再开始执行下一组。
  var obs = Observable.concat([
    Stream.fromIterable([1,2,3]),
    Stream.fromIterable([4,5,6]),
    Stream.fromIterable([7,8,9]),
  ]);

  obs.listen(print);
  输出：1 2 3 4 5 6 7 8 9

11.检查每一个item：every
every会检查每个item是否符合要求，然后它将会返回一个能够被转化为 Observable 的 AsObservableFuture< bool>。
  var obs = Observable.fromIterable([1,2,3,4,5]);
  obs.every((x)=> x < 10).asObservable().listen(print);
输出结果：true


总结：
关于Observable你还需要知道这些
Dart中 Observables 默认是单一订阅。如果您尝试两次收听它，则会抛出 StateError 。你可以使用工厂方法或者 asBroadcastStream 将其转化为多订阅流。
  var obs = Observable(Stream.fromIterable([1,2,3,4,5])).asBroadcastStream();
很多方法的返回值并不是一个 Single 也不是一个 Observable 而是必须返回一个Dart的 Future。幸运的是你很容易找到一些方法，把他们转化成回 stream。
出现错误时，Dart中的Stream不会默认关闭。但是在Rxdart中，Error会导致Observable终止，除非它被运算符拦截。
默认情况下Dart中Stream是异步的，而Observables默认是同步的。
在处理多订阅Observable的时候，onListen方法只有在第一次会被调用。且各个订阅者之间不会互相干涉。
  var obs = Observable(Stream.fromIterable([1,2,3,4,5])).asBroadcastStream();

//第一个订阅者
  obs.interval(Duration(seconds: 1)).map((item) => ++item).listen(print);
//第二个订阅者
  obs.listen(print);
输出：1 2 3 4 5 2 3 4 5 6
---------------------------------------------

增强版StreamController——Subject

普通广播流控制器：PublishSubject
PublishSubject就是一个普通广播版StreamController，你可以多次收听，默认是sync是false，
也就是说里面是一个AsyncBroadcastStreamController 异步广播流。

缓存最新一次事件的广播流控制器：BehaviorSubject
BehaviorSubject也是一个广播流，但是它能记录下最新一次的事件，并在新的收听者收听的时候将记录下的事件作为第一帧发送给收听者。

final subject = BehaviorSubject<int>(seedValue: 0);
subject.add(1);
subject.add(2);
subject.add(3);
subject.stream.listen(print); // prints 3
subject.stream.listen(print); // prints 3
subject.stream.listen(print); // prints 3

广播流控制器：ReplaySubject
ReplaySubject
ReplaySubject也是广播StreamController，从字面上可以了解到它可以回放已经消失的事件。

示例代码：
final subject1 = ReplaySubject<int>();
subject1.add(1);
subject1.add(2);
subject1.add(3);

subject1.stream.listen(print); // prints 1, 2, 3
subject1.stream.listen(print); // prints 1, 2, 3
subject1.stream.listen(print); // prints 1, 2, 3

final subject2 = ReplaySubject<int>(maxSize: 2);
subject2.add(1);
subject2.add(2);
subject2.add(3);

subject2.stream.listen(print); // prints 2, 3
subject2.stream.listen(print); // prints 2, 3
subject2.stream.listen(print); // prints 2, 3
注意，当监听资源不在使用时请释放它，对于StreamController和Subject可以调用其close函数，对于Stream来讲可以使用cancel函数取消订阅。

Subject的释放
当你不再收听Subject，或者Subject不再使用时，请务必释放它。你可以调用subscription的cancel()方法让某个听众取消收听，或者Subject.close()，关闭整个流。

-----------------------------------------------------
其实我们在做项目的时候，不可能用的这么简单！我就把其他的方法直接复制出来，有兴趣的可以去多试试！

_textFieldSubject
     .map((item) => 'item: $item')
     .listen((data) => print(data));  //RxDart的数据转换方法(map)

    _textFieldSubject
     .where((item) => item.length > 10)
     .listen((data) => print(data));  //这个就像是给数据设置一个条件，满足条件的数据才通过。

    _textFieldSubject
     .debounceTime(Duration(seconds: 2))
     .listen((data) => print(data));  //可以设置间隔的时间，过一段时间才让数据通过。


-------------------------------------------------------
StreamBuilder简介
Stream
如今的app是高度异步的，事件可能在任意时刻、以任意顺序发生。如用户点击了某个按钮、网络中断了、推送消息到了、内存不足了、网络请求数据返回来了等等。现代的GUI编程框架，基本上都是基于事件驱动模型的，我们通过Target-Action、Notification、Listener等方式处理各种事件。近几年，响应式编程兴起，以Stream将各种事件统一抽象起来，将各种事件看作数据流，这样使得我们可以用一种模式处理所有的事件。

Dart对异步数据流提供了很好的支持，此处不做过多介绍。

Stream<int> count() async* {
  int i = 1;
  while (ture) {
    yield I++;
  }
}
StreamBuilder
在Flutter中，我们如何使用Stream呢？使用StreamBuilder这个widget。

StreamBuilder<int>(
  stream: _myStream,
  builder: _myBuilderFunction,
);

StreamBuilder监听来自数据流的事件，每当新事件到来时重建widget子树，并将最新的事件传递给子树的builder。
注意：
上面这句话是不准确的，每个事件并不严格对应一次build，使用不当会引发严重问题，这也是此篇文章的缘起。

给StreamBuilder一个Stream对象和builder函数，对于给定snapshot返回相应的widget子树。

StreamBuilder(
  stream: _myStream,
  builder: (context, snapshot) {
    return MyWidget(snapshot.data);
  },
);
可以给它一个初始值，以在第一个事件到来之前显示某些数据。

StreamBuilder(
  stream: _myStream,
  initialData: 42,
  builder: (context, snapshot) {
    return MyWidget(snapshot.data);
  },
);

确保使用snapshot之前检查是否有数据，如果还没有，可以展示一个Indicator。
StreamBuilder<int>(
  stream: _myStream,
  builder: (context, snapshot) {
    if (!snapshot.hasData) {
      return CircularProgressIndicator();
    }
    return MyWidget(snapshot.data);
  },
);
如果想做更细粒度的控制，还可以检查ConnectionState。

StreamBuilder(
  stream: _myStream,
  builder: (context, snapshot) {
    switch (snapshot.connectionState) {
      case ConnectionState.waiting:
      case ConnectionState.none:
        return LinearProgressIndicator();
      case ConnectionState.active:
        return MyWidget(snapshot.data);
      case ConnectionState.done:
        return MyFinalWidget(snapshot.data);
    }
  }
);
另外，我们还应该一如既往地检查错误，对吧？

StreamBuilder(
  stream: _myStream,
  builder: (context, snapshot) {
    if (snapshot.hasError) {
      return UhOh(snapshot.error);
    }
    ...
  }
);

实现原理
StreamBuilder的实现很简单，监听数据流的变化，并调用setState重建widget子树。
StreamBuilder是一个StatefulWidget，下面是State的实现代码：
class _StreamBuilderBaseState<T, S> extends State<StreamBuilderBase<T, S>> {
  StreamSubscription<T> _subscription;
  S _summary;

  @override
  void initState() {
    super.initState();
    _summary = widget.initial();
    _subscribe();
  }

  @override
  void didUpdateWidget(StreamBuilderBase<T, S> oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.stream != widget.stream) {
      if (_subscription != null) {
        _unsubscribe();
        _summary = widget.afterDisconnected(_summary);
      }
      _subscribe();
    }
  }

  @override
  Widget build(BuildContext context) => widget.build(context, _summary);

  @override
  void dispose() {
    _unsubscribe();
    super.dispose();
  }

  void _subscribe() {
    if (widget.stream != null) {
      _subscription = widget.stream.listen((T data) {
        setState(() {
          _summary = widget.afterData(_summary, data);
        });
      }, onError: (Object error) {
        setState(() {
          _summary = widget.afterError(_summary, error);
        });
      }, onDone: () {
        setState(() {
          _summary = widget.afterDone(_summary);
        });
      });
      _summary = widget.afterConnected(_summary);
    }
  }

  void _unsubscribe() {
    if (_subscription != null) {
      _subscription.cancel();
      _subscription = null;
    }
  }
}

在StreamBuilder中，只是将Stream的数据、错误等用AsyncSnapshot包装一下：
class StreamBuilder<T> extends StreamBuilderBase<T, AsyncSnapshot<T>> {
  const StreamBuilder({
    Key key,
    this.initialData,
    Stream<T> stream,
    @required this.builder,
  }) : assert(builder != null),
       super(key: key, stream: stream);

  final AsyncWidgetBuilder<T> builder;

  final T initialData;

  @override
  AsyncSnapshot<T> initial() => AsyncSnapshot<T>.withData(ConnectionState.none, initialData);

  @override
  AsyncSnapshot<T> afterConnected(AsyncSnapshot<T> current) => current.inState(ConnectionState.waiting);

  @override
  AsyncSnapshot<T> afterData(AsyncSnapshot<T> current, T data) {
    return AsyncSnapshot<T>.withData(ConnectionState.active, data);
  }

  @override
  AsyncSnapshot<T> afterError(AsyncSnapshot<T> current, Object error) {
    return AsyncSnapshot<T>.withError(ConnectionState.active, error);
  }

  @override
  AsyncSnapshot<T> afterDone(AsyncSnapshot<T> current) => current.inState(ConnectionState.done);

  @override
  AsyncSnapshot<T> afterDisconnected(AsyncSnapshot<T> current) => current.inState(ConnectionState.none);

  @override
  Widget build(BuildContext context, AsyncSnapshot<T> currentSummary) => builder(context, currentSummary);
}

setState简介
setState相信大家都不陌生了，它是如何触发build调用的？每次setState都会调用build吗？
当State对象的内部状态改变时，我们调用setState通知Flutter框架预定一次build。传入的回调函数是同步调用的，不支持异步函数，因为那样会搞不清楚状态具体的设置时间。如果不调用setState而直接修改内部状态，则UI不会刷新。
setState(() { _myState = newValue; });

推荐只把具体的内部状态修改放在setState中，相关的计算逻辑或其它操作不要放在里面。比如，有一个计数器，点击之后加1并存储，那么只应该把加1放在setState中。
Future<void> _incrementCounter() async {
  setState(() {
    _counter++;
  });
  Directory directory = await getApplicationDocumentsDirectory();
  final String dirName = directory.path;
  await File('$dir/counter.txt').writeAsString('$_counter');
}
在dispose之后，不应该再调用此方法，否则会引发错误。

来看一下setState的实现代码，对一些assert逻辑做了归纳：

void setState(VoidCallback fn) {
    assert(fn != null);
  // assert before dispose and after mounted
  ...
    final dynamic result = fn() as dynamic;
  // assert result isn't Future
  ...
      // We ignore other types of return values so that you can do things like:
      //   setState(() => x = 3);
      return true;
    }());
    _element.markNeedsBuild();
  }
代码很简单，检查生命周期状态以及result类型，然后标记element需要重建。setState调用Element的markNeedsBuild，标记Element为dirty，并将其添加到一个全局的widget列表中，下一帧时这个列表中的widget会重建。

-------
StreamBuilder与setState

背景知识介绍完，终于可以进入主题了。只聊一个问题：每次新事件，都会build吗？
我们知道，屏幕是有刷新频率的，智能手机的刷新频率目前一般是60次。有如下关系：

StreamBuilder调用setState刷新UI
    setState标记Element为dirty，在下一帧时重建widget子树
    因此，如果在一帧时间内多次调用setState，那么只有最后一次生效。换言之，如果在一帧时间内有多个事件，那么在builder函数中只会接收到最后一次。
    对于用户交互这样的事件来说，一帧的时间是很长的，这个问题基本可以忽略。但是对于网络请求这样的事件来说，一帧的时间又是很长的，同时发送多个请求，在同一帧时间片返回是很正常的。如果我们将每个接口的数据Push到数据流，StreamBuilder可能不会接收到所有的数据序列。

注意事项
    讨论这个问题的意义何在呢？这涉及到“如何设计状态？”这个关键问题。
    Flutter与React一样，都是基于响应式编程思想而设计的，UI就是状态的函数：
    flutter_widget_state
    所以，状态的设计质量直接决定代码的质量，请务必花心思设计状态，不要着急写UI。
    记住一点：用于widget的数据流，后面的数据对前面的应该是替代关系，而不能是补充关系。只有这样，上面的公式才成立。




