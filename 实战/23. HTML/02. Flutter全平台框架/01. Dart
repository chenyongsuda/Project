1. 入口方法
main(){
  
}
或者
void main(){
  
}

2.变量定义
可以通过var声明或者String类型声明

3.const 和 final 
const 不可改变量初始化时候赋值(定义时常量)
final 不一定要初始化时候赋值但是只能赋值一次(运行时常量)

4.常用类型
字符串 String  ''或者"" 或者''' '''多行字符串
字符串的拼接 print('$str1 $str2') str1+str2

字符串 int double
int型不可以接收double  double可以接收int型

bool类型
要不是true要不就是false
bool不能接收true或者false之外的


5. 集合【列表】
定义的两种方式
var ls = 【'','',''】

var ls = new List();
ls.add('')
ls.add('')
ls.add('')

ls.lenght

可以指定存储类型
var ls = new List<String>();

6. 集合【map】
两种定义方式
var person ={"name":"","age":20}
print(person["name"])

var person =new Map();
person["name"] = "aaa"

7.判断类型
var str = "123"

if(str is String) {
   
}

8.运算符
和java一样 有个没见过 
int b = 18
b??=23 如果b为空就赋值23

9. 类型转化
转数字型
int.parse("")
double.parse("")

转string
tostring()

str.isEmpty 判断是否为空

如果var xxx 没赋值的化就是null

10. 循环语句
for(int i=1;i<10;i++){

}

while(true/false){

}

do {

}while(true/false)

switch (){
case :
 break;
default:
 xxx;
}

11.详解集合类型
List讲解
属性：
   lenght 长度
   reversed 翻转 mylist.reversed.tolist()
   isEmpty
   isNotEmpty

常用方法：
   add 添加元素
   addAll([,,,,,]) 添加多个
   indexOf 查找数据
   remove  删除元素
   removeAt 删除指定index元素
   fillRange(start,end,value) 区域修改
   insert(index,val)
   insertAll(index,[xx,xx,xx]）
   join 连接
   split 字符串转list

Set讲解 去重集合
   var set = new Set()

map讲解 
   remove
   containsValue

集合通用方法
   forEach  
       for(var item in myList)
       myList.forEach((key,val){
         print(val)
       });
   map
       myList.map((val){
         return val*2;
       });
   where  返回满足条件的集合
       myList.where((val){
         return val>5;
       });
   any   集合中任意一个满足的就返回true
       myList.any((val){
         return val>5;
       });
   every 集合中所有都满足就返回true
       myList.where((val){
         return val>5;
       });
   
12. 方法
返回值 名字 参数{
  
}
可选参数[]
void 方法名(,['','']){
  
}
命名参数 {}
void 方法名(,{string name='',string age=''}){
  
}
方法名(,name:"",age:"")

箭头函数：
原：
myList.forEach((value){
  print(value)
})
里面的匿名函数可以变成
myList.forEach((value)=>print(value));

13. 对象,类

和java差不多
私有变量加_开头且类必须变成一个单独文件,私有属性为文件级别的
私有方法也是在方法名加_
get前缀快捷方法属性
get area{
  return 1+2+3;
}
和area属性一样使用

set area(value) {
}
set方法

够着函数快捷赋值
Rect(this.name,this.age)

构造函数初始化列表
Rect():height=100,width=80{
}

静态属性和静态方法
加上static关键字就是相对静态的属性或者方法

14.as is ? ..
as 类型转换 is 类型判断
.. 级联操作

Person p
p.print  
会错误英文Person没初始化new 
可以加上?
p?.print 如果没初始化不会打印

p1..name..age..print() 链式操作

15.接口
没有interface关键字
普通类和抽象类都可以当接口被实现

16.mixins 实现多继承
class a
class b
class c with a,b 
类似多继承
但是不能具有构造函数

17.泛型
比如不设定类型
getData(value){
  return ""
}

泛型
T getData<T>(T value){
  return T
}

泛型类
class a<T> 

18.库
自定义库
import "lib/xxx"
内部库
import "durt:io"
async加在方法外就是异步方法,通过await来表示同步等待
外部库
pub包管理

部分引入
import xxx as xxx show/hide xxx

























