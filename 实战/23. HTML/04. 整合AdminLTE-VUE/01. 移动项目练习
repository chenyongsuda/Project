基于Mint UI和MUI开发VUE项目

Mint UI 包含丰富的 CSS 和 JS 组件，能够满足日常的移动端开发需要。通过它，可以快速构建出风格统一的页面，提升开发效率。真正意义上的按需加载组件。可以只加载声明过的组件及其样式文件，无需再纠结文件体积过大。考虑到移动端的性能门槛，Mint UI 采用 CSS3 处理各种动效，避免浏览器进行不必要的重绘和重排，从而使用户获得流畅顺滑的体验。依托 Vue.js 高效的组件化方案，Mint UI 做到了轻量化。即使全部引入，压缩后的文件体积也仅有 ~30kb (JS + CSS) gzip。
注意：MUI不同于Mint-ui，Mui只是开发出来一套好用的代码片段，里面提供了配套的样式，配套的HTML代码段，类似于bootstrap，而Mint-UI是真正的组件库，是使用VUE技术封装出来的成套的组件可以无缝的和VUE项目进行集成开发；因此从体验上来说，Mint-UI体验更好，因为这是别人帮我们开发好的现成组件，从体验上看来MUI和Bootstrapt类似；理论上，任何项目都可以使用MUI和Bootstrapt，但是Mint-U只适用于Vue项目。
注意：MUI并不能使用npm去下载，需要手动从github上下载现成的包，自己解压出来，然后手动拷贝到项目中去使用
Mint-UI 官网：https://mint-ui.github.io/#!/zh-cn

====================
下载依赖
# Vue 2.0
npm install mint-ui -S

// 引入全部组件
import Vue from 'vue';
import Mint from 'mint-ui';
import 'mint-ui/lib/style.css' //必须引入样式不然就没有效果
Vue.use(Mint);
// 按需引入部分组件
import { Cell, Checklist } from 'mint-ui';
Vue.component(Cell.name, Cell);
Vue.component(Checklist.name, Checklist);

==================
熟悉下vue-route

***基本格式为
const User = {
  template: '<div>User</div>'
}

const router = new VueRouter({
  routes: [
    // 动态路径参数 以冒号开头
    { path: '/user/:id', component: User },
    { path: '/user/:id', component: User }
    { path: '/user/:id', component: User }
    ............
  ]
})

***嵌套路由,当模板中还有动态VIEW的话需要加嵌套路由
const User = {
  template: `
    <div class="user">
      <h2>User {{ $route.params.id }}</h2>
      <router-view></router-view>
    </div>
  `
}
要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置：
const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User,
      children: [
        {
          // 当 /user/:id/profile 匹配成功，
          // UserProfile 会被渲染在 User 的 <router-view> 中
          path: 'profile',
          component: UserProfile
        },
        {
          // 当 /user/:id/posts 匹配成功
          // UserPosts 会被渲染在 User 的 <router-view> 中
          path: 'posts',
          component: UserPosts
        }
      ]
    }
  ]
})

***路由的两种方式
1.this.$router.push()
描述：跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面。

2.this.$router.replace()
描述：同样是跳转到指定的url，但是这个方法不会向history里面添加新的记录，点击返回，会跳转到上上一个页面。上一个记录是不存在的。

3.this.$router.go(n)
相对于当前页面向前或向后跳转多少个页面,类似 window.history.go(n)。n可为正数可为负数。正数返回上一个页面
————————————————

***路由参数
const User = {
  template: '<div>User {{ $route.params.id }}</div>'
}

你可以在一个路由中设置多段“路径参数”，对应的值都会设置到 $route.params 中。例如：
模式	匹配路径	$route.params
/user/:username	/user/evan	{ username: 'evan' }
/user/:username/post/:post_id	/user/evan/post/123	{ username: 'evan', post_id: '123' }
除了 $route.params 外，$route 对象还提供了其它有用的信息，例如，$route.query (如果 URL 中有查询参数)、$route.hash 等等。你可以查看 API 文档 的详细说明。

***路由匹配
{
  // 会匹配所有路径
  path: '*'
}
{
  // 会匹配以 `/user-` 开头的任意路径
  path: '/user-*'
}

当使用一个通配符时，$route.params 内会自动添加一个名为 pathMatch 参数。它包含了 URL 通过通配符被匹配的部分：
// 给出一个路由 { path: '/user-*' }
this.$router.push('/user-admin')
this.$route.params.pathMatch // 'admin'
// 给出一个路由 { path: '*' }
this.$router.push('/non-existing')
this.$route.params.pathMatch // '/non-existing'

vue-router 使用 path-to-regexp 作为路径匹配引擎，所以支持很多高级的匹配模式，例如：可选的动态路径参数、匹配零个或多个、一个或多个，
甚至是自定义正则匹配。查看它的 文档 学习高阶的路径匹配，还有 这个例子  展示 vue-router 怎么使用这类匹配。

#匹配优先级
有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。

***命名视图
有时候需要多个视图需要多个view
命名视图
有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar (侧导航) 和 main (主内容) 两个视图，
这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。
<router-view class="view one"></router-view>
<router-view class="view two" name="a"></router-view>
<router-view class="view three" name="b"></router-view>
一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)：

const router = new VueRouter({
  routes: [
    {
      path: '/',
      components: {
        default: Foo,
        a: Bar,
        b: Baz
      }
    }
  ]
})

***
嵌套命名视图----------嵌套视图为视图后面还有视图包含
我们也有可能使用命名视图创建嵌套视图的复杂布局。这时你也需要命名用到的嵌套 router-view 组件。我们以一个设置面板为例：

/settings/emails                                       /settings/profile
+-----------------------------------+                  +------------------------------+
| UserSettings                      |                  | UserSettings                 |
| +-----+-------------------------+ |                  | +-----+--------------------+ |
| | Nav | UserEmailsSubscriptions | |  +------------>  | | Nav | UserProfile        | |
| |     +-------------------------+ |                  | |     +--------------------+ |
| |     |                         | |                  | |     | UserProfilePreview | |
| +-----+-------------------------+ |                  | +-----+--------------------+ |
+-----------------------------------+                  +------------------------------+
Nav 只是一个常规组件。
UserSettings 是一个视图组件。
UserEmailsSubscriptions、UserProfile、UserProfilePreview 是嵌套的视图组件。
注意：我们先忘记 HTML/CSS 具体的布局的样子，只专注在用到的组件上。

UserSettings 组件的 <template> 部分应该是类似下面的这段代码：

<!-- UserSettings.vue -->
<div>
  <h1>User Settings</h1>
  <NavBar/>
  <router-view/>
  <router-view name="helper"/>
</div>
嵌套的视图组件在此已经被忽略了，但是你可以在这里找到完整的源代码。

然后你可以用这个路由配置完成该布局：

{
  path: '/settings',
  // 你也可以在顶级路由就配置命名视图
  component: UserSettings,
  children: [{
    path: 'emails',
    component: UserEmailsSubscriptions
  }, {
    path: 'profile',
    components: {
      default: UserProfile,
      helper: UserProfilePreview
    }
  }]
}


======================
项目开始
***app.vue是初始模板
<template>
  <div id="app">
    <router-view/>
  </div>
</template>

想法是这样的这个一级模板可以放比如首页啊,登录啊等tab导航栏上建立一个模板页比如
<head>
<content>---------->view
<tabs>
建立一个二级模板页

***模板 MainFrame.vue
<template>
  <div>
    <!-- Header -->
    <mt-header fixed title="fixed top"></mt-header>
    <!-- Content -->
    <router-view></router-view>
    <!-- Footer -->
    <mt-tabbar v-model="selected">
        <mt-tab-item id="tab1">
            <img slot="icon" src="">
            tab1
        </mt-tab-item>
        <mt-tab-item id="tab2">
            <img slot="icon" src="">
            tab2
        </mt-tab-item>
        <mt-tab-item id="tab3">
            <img slot="icon" src="">
            tab3
        </mt-tab-item>
        <mt-tab-item id="tab4">
            <img slot="icon" src="">
            tab4
        </mt-tab-item>
    </mt-tabbar>
  </div>
</template>

***route那边采用
export default new Router({
  routes: [
    {
      path: '/',
      name: 'MainFrame',
      component: MainFrame
    },
    {
      path: '/pages',
      name: 'MainFrame',
      component: MainFrame,
      children: [
        { path: 'home', component: HomeContainer },
        { path: 'member', component: MemberContainer },
        { path: 'search', component: SearchContainer },
        { path: 'shopcar', component: ShopCarContainer }
      ]
    }
  ]
})

看了下这个tabs可以用

还可以用MUI中的
***使用MUI
1. 下载MUI
2. 拷贝MUI中的dist 目录中的文件到VUE中 在VUE中建立lib文件夹
3. 在main.js中导入样式 如import './lib/mui/css/mui.min.css'
4. 查看例子中源码程序赋值源码就行了

使用如下的代替上面的tab
<nav class="mui-bar mui-bar-tab">
  <a class="mui-tab-item mui-active" href="#tabbar">
    <span class="mui-icon mui-icon-home"></span>
    <span class="mui-tab-label">首页</span>
  </a>
  <a class="mui-tab-item" href="#tabbar-with-chat">
    <span class="mui-icon mui-icon-email"><span class="mui-badge">9</span></span>
    <span class="mui-tab-label">消息</span>
  </a>
  <a class="mui-tab-item" href="#tabbar-with-contact">
    <span class="mui-icon mui-icon-contact"></span>
    <span class="mui-tab-label">通讯录</span>
  </a>
  <a class="mui-tab-item" href="#tabbar-with-map">
    <span class="mui-icon mui-icon-gear"></span>
    <span class="mui-tab-label">设置</span>
  </a>
</nav>

改造超链接a 变成 route-link
<nav class="mui-bar mui-bar-tab">
  <router-link class="mui-tab-item mui-active" to="/pages/home">
    <span class="mui-icon mui-icon-home"></span>
    <span class="mui-tab-label">首页</span>
  </router-link>
  <router-link class="mui-tab-item" to="/pages/member">
    <span class="mui-icon mui-icon-email"><span class="mui-badge">9</span></span>
    <span class="mui-tab-label">消息</span>
  </router-link>
  <router-link class="mui-tab-item" to="/pages/search">
    <span class="mui-icon mui-icon-contact"></span>
    <span class="mui-tab-label">通讯录</span>
  </router-link>
  <router-link class="mui-tab-item" to="/pages/shopcar">
    <span class="mui-icon mui-icon-gear"></span>
    <span class="mui-tab-label">设置</span>
  </router-link>
</nav>


***修改小图标
如果要用扩展图标的话
    icons-extra.css
    mui-icons-extra.ttf
    
然后导入import './lib/mui/css/icons-extra.css'

样式变为 mui-icon mui-icon-extra mui-icon-extra-order 完成


***修改点击tab高亮切换
通过设置link的activeclass实现
export default new Router({
  linkActiveClass: 'active',//设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置
  routes: [
    
  ]
})

设置为
linkActiveClass: 'mui-active',

======如果还是使用mint ui的话使用如下
方案监听选中变化
//页面 和 数据
    <template>
        <div id="main">
            <mt-tabbar v-model="selected">
                <mt-tab-item :id="home">
                    首页
                </mt-tab-item>
                <mt-tab-item :id="car">
                    购物车
                </mt-tab-item>
                <mt-tab-item :id="person">
                    我的
                </mt-tab-item>
            </mt-tabbar>
        </div>
    </template>

    <script>
        export default {
            data(){
                return {
                    //页面刷新取数据
                    selected: sessionStorage.getItem('selected')? JSON.parse(sessionStorage.getItem('selected')):'首页',
                    home: '首页',
                    car: '购物车',
                    person: '我的',      
                }
            }
        }
    </script>
    
===========   
data(){
       return {
          //默认显示首页，但是一旦sessionStorage有数据 当浏览器刷新的时候，取出该值，就实现了刷新不跳转了
          selected: sessionStorage.getItem('selected')? JSON.parse(sessionStorage.getItem('selected')):'首页'
      }   
 },
 watch: {
      selected(val, oldVal){
          //一旦标签栏变化，把selected的值存到sessionStorage，保存当前值
          sessionStorage.setItem('selected', JSON.stringify(val))
          if(val === this.home){
              //路由跳转 到首页
              this.$router.replace('/home')          
          }else if(val === this.car){
              //路由跳转 到购物车
              this.$router.replace('/car')            
          }else if(val === this.person){
              //路由跳转 到个人中心
              this.$router.replace('/person')           
          }
      }






