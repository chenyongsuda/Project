项目结构
src   [项目核心文件]
        1、assets  静态资源
            资源目录，这里的资源会被webpack构建
        2、components  公共组件
           公共组件目录。
        3、route       路由（配置项目路由）
            所有的路由规则
        4、App.vue   根组件 App.vue 是一个Vue组件，也是项目的第一个Vue组件
             一个vue页面通常有三部分组成：模板[template]、js[javascript]、样式[style]
             A、模板template：其中模板只能包含一个父节点，也就是顶层的div只能有一个。
            <template>
              <div id="app">
              <img src="./assets/logo.png">
               <div> 这是一段测试的html </div>
              <router-view/>
              </div> 
            </template>
            <router-view></router-view>是一个子路由视图，后面的路由页面都显示在此处
            B、Script：vue通常都用es6来写的，用export default导出，其下面可以包含data，生命周期（mounted等），方法（methods）等，具体语法请看vue.js文档。
            C、style: 样式通过<style></style>包裹，默认是影响全局的，如需定义作用域只在
        5、main.js  入口文件 main.js相当于Java中的main方法，是整个项目的入口js
        
------------------------------
分析main.js
      new Vue({
          el: '#app',             //挂载点为id = app的元素
          router,
          store,
          render: h => h(App)     //渲染App这个模块
        })
 
 
-----------------------------
引入route

HTML
<script src="https://unpkg.com/vue/dist/vue.js"></script>
<script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>

<div id="app">
  <h1>Hello App!</h1>
  <p>
    <!-- 使用 router-link 组件来导航. -->
    <!-- 通过传入 `to` 属性指定链接. -->
    <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
    <router-link to="/foo">Go to Foo</router-link>
    <router-link to="/bar">Go to Bar</router-link>
  </p>
  <!-- 路由出口 -->
  <!-- 路由匹配到的组件将渲染在这里 -->
  <router-view></router-view>
</div>
#JavaScript
// 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)

// 1. 定义 (路由) 组件。
// 可以从其他文件 import 进来
const Foo = { template: '<div>foo</div>' }
const Bar = { template: '<div>bar</div>' }

// 2. 定义路由
// 每个路由应该映射一个组件。 其中"component" 可以是
// 通过 Vue.extend() 创建的组件构造器，
// 或者，只是一个组件配置对象。
// 我们晚点再讨论嵌套路由。
const routes = [
  { path: '/foo', component: Foo },
  { path: '/bar', component: Bar }
]

// 3. 创建 router 实例，然后传 `routes` 配置
// 你还可以传别的配置参数, 不过先这么简单着吧。
const router = new VueRouter({
  routes // (缩写) 相当于 routes: routes
})

// 4. 创建和挂载根实例。
// 记得要通过 router 配置参数注入路由，
// 从而让整个应用都有路由功能
const app = new Vue({
  router
}).$mount('#app')

// 现在，应用已经启动了！
通过注入路由器，我们可以在任何组件内通过 this.$router 访问路由器，也可以通过 this.$route 访问当前路由：

// Home.vue
export default {
  computed: {
    username() {
      // 我们很快就会看到 `params` 是什么
      return this.$route.params.username
    }
  },
  methods: {
    goBack() {
      window.history.length > 1 ? this.$router.go(-1) : this.$router.push('/')
    }
  }
}
