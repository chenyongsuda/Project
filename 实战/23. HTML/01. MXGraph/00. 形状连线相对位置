1. 插入一个元素方法有两种
new mxCell(id, new mxGeometry(100, 200, 100, 100),'value')和
mxGraph.prototype.insertVertex = function(parent,
                                                  id,
                                                  value,
                                                  x,
                                                  y,
                                                  width,
                                                  height,
                                                  style,
                                                  relative)

sample:
graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30)

实例
    // 相对画布定位
    graph.insertVertex(parent, null, 'A', 50, 20, 80, 30);
    
    // 相对父级定位
    const v_1 = graph.insertVertex(parent, null, 'B', 170, 20, 100, 200);
    const v_2 = graph.insertVertex(v_1, null, 'C', 0.5, 1, 80, 30, '', true);
    
    // 线条label定位
    const v1 = graph.insertVertex(parent, null, 'Hello,', 320, 20, 80, 30);
    const v2 = graph.insertVertex(parent, null, 'World!', 500, 150, 80, 30);
    const e1 = graph.insertEdge(parent, null, '30%', v1, v2);
    // relative position，以线条中点为中心
    e1.geometry.x = 1; // [-1,1] 调整 label 沿连接线的位置
    e1.geometry.y = 100; // 调整label 在正交线上的距离
    
    const v3 = graph.insertVertex(parent, null, 'Hello,', 320, 320, 80, 30);
    const v4 = graph.insertVertex(parent, null, 'World!', 500, 450, 80, 30);
    const e2 = graph.insertEdge(parent, null, '30%', v3, v4);
    // relative 必须为 true，false 无效
    e2.geometry.relative = false;
    e2.geometry.x = 1;
    e2.geometry.y = 400;
    
    插入前定义样式
    var style1 = [];
    style1[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;
    style1[mxConstants.STYLE_IMAGE] = './demoimg/屏幕快照 2019-03-27 下午1.06.15.png';
    style1[mxConstants.STYLE_IMAGE_WIDTH] = '48';
    style1[mxConstants.STYLE_IMAGE_HEIGHT] = '48';
    graph.getStylesheet().putCellStyle('img1', style1);
    //插入节点时定义样式
    var cell = new mxCell(null, new mxGeometry(100, 200, 100, 100), "img1");  
    graph.addCell(cell); 
    
    // 动态改变样式
    setTimeout(() => {
      graph.getModel().setStyle(v1, 'myStyle;image=images/other/xiaohuo.png');
    }, 1000);
=========================================================================================
2. 全局样式修改
mxStylesheet 类用于管理图形样式，通过 graph.getStylesheet() 可以获取当前图形的 mxStylesheet 对象。mxStylesheet 对象的 styles 属性也是一个对象，
该对象默认情况下包含两个对象defaultVertexStyle、defaultEdgeStyle，修改这两个对象里的样式属性对所有线条/节点都生效

例子中设置折线有一个需要注意的地方。

// 设置拖拽边的过程出现折线，默认为直线
graph.connectionHandler.createEdgeState = function () {
  const edge = this.createEdge();
  return new mxCellState(graph.view, edge, graph.getCellStyle(edge));
};
虽然调用 insertEdge 方法时已经设置了线条为折线，但是在拖拽边过程中依然是直线。上面这段代码重写了 createEdgeState 方法，将拖动中的边样式设置成与静态时的边样式一致，都是折线。


全局样式设置
// 全局样式
const setDefaultEdgeStyle = (graph) => {
  const style = graph.getStylesheet().getDefaultEdgeStyle();
  Object.assign(style, {
    [mxConstants.STYLE_ROUNDED]: true, // 设置线条拐弯处为圆角
    [mxConstants.STYLE_STROKEWIDTH]: '3',
    [mxConstants.STYLE_STROKECOLOR]: '#333333',
    [mxConstants.STYLE_EDGE]: mxConstants.EDGESTYLE_ORTHOGONAL,// 设置折线
    [mxConstants.STYLE_FONTCOLOR]: '#33333',
    [mxConstants.STYLE_LABEL_BACKGROUNDCOLOR]: '#ffa94d',
  });
  graph.connectionHandler.createEdgeState = function () {
    const edge = this.createEdge();
    return new mxCellState(graph.view, edge, graph.getCellStyle(edge));
  };
};


// 自定义命名样式
const putVertexStyle = (graph) => {
  const myVertexStyle = {
    [mxConstants.STYLE_STROKECOLOR]: 'none',
    [mxConstants.STYLE_ROUNDED]: true,
  };
  graph.getStylesheet().putCellStyle('myVertex', myVertexStyle);
};

=======================================================================================
3.靶点

// Overridden to define per-shape connection points
		mxGraph.prototype.getAllConnectionConstraints = function(terminal, source)
		{
			if (terminal != null && terminal.shape != null)
			{
				if (terminal.shape.stencil != null)
				{
					if (terminal.shape.stencil != null)
					{
						return terminal.shape.stencil.constraints;
					}
				}
				else if (terminal.shape.constraints != null)
				{
					return terminal.shape.constraints;
				}
			}
	
			return null;
		};
	
		// Defines the default constraints for all shapes
		mxShape.prototype.constraints = [new mxConnectionConstraint(new mxPoint(0.25, 0), true),
										 new mxConnectionConstraint(new mxPoint(0.5, 0), true),
										 new mxConnectionConstraint(new mxPoint(0.75, 0), true),
		        	              		 new mxConnectionConstraint(new mxPoint(0, 0.25), true),
		        	              		 new mxConnectionConstraint(new mxPoint(0, 0.5), true),
		        	              		 new mxConnectionConstraint(new mxPoint(0, 0.75), true),
		        	            		 new mxConnectionConstraint(new mxPoint(1, 0.25), true),
		        	            		 new mxConnectionConstraint(new mxPoint(1, 0.5), true),
		        	            		 new mxConnectionConstraint(new mxPoint(1, 0.75), true),
		        	            		 new mxConnectionConstraint(new mxPoint(0.25, 1), true),
		        	            		 new mxConnectionConstraint(new mxPoint(0.5, 1), true),
		        	            		 new mxConnectionConstraint(new mxPoint(0.75, 1), true)];
		
		
		// Edges have no connection points
		mxPolyline.prototype.constraints = null;
    
 ===================================================================================================
 4.节点组合
 节点组合
这一小节通过 05.consistuent.html 这个例子，讲解节点组合需要注意的地方。

组合节点后默认情况下，父节点是可折叠的，要关闭折叠功能需要将 foldingEnabled 设为 false。

graph.foldingEnabled = false;
如果希望在改变父节点尺寸时，子节点与父节点等比例缩放，需要开启 recursiveResize。

graph.recursiveResize = true;
下面是这个例子最重要的两段代码。

/**
 * Redirects start drag to parent.
 */
const getInitialCellForEvent = mxGraphHandler.prototype.getInitialCellForEvent;
mxGraphHandler.prototype.getInitialCellForEvent = function (me) {
  let cell = getInitialCellForEvent.apply(this, arguments);
  if (this.graph.isPart(cell)) {
    cell = this.graph.getModel().getParent(cell);
  }
  return cell;
};

// Redirects selection to parent
graph.selectCellForEvent = function (cell) {
  if (this.isPart(cell)) {
    mxGraph.prototype.selectCellForEvent.call(this, this.model.getParent(cell));
    return;
  }

  mxGraph.prototype.selectCellForEvent.apply(this, arguments);
};
这两个方法重写(Overwrite)了原方法，思路都是判断如果该节点是子节点则替换成父节点去执行剩下的逻辑。
getInitialCellForEvent 在鼠标按下(mousedown事件，不是click事件)时触发，如果注释掉这段代码，不使用父节点替换，当发生拖拽时子节点会被单独拖拽，
不会与父节点联动。使用父节点替换后，原本子节点应该被拖拽，现在变成了父节点被拖拽，实现联动效果。
selectCellForEvent 其实是 getInitialCellForEvent 内部调用的一个方法。这个方法的作用是将 cell 设置为 selectionCell，
设置后可通过 mxGraph.getSelectionCell 可获取得该节点。与 getInitialCellForEvent 同理，如果不使用父节点替换，则 mxGraph.getSelectionCell 获取到的会是子节点。项目实战我们会使用到 mxGraph.getSelectionCell 这个接口。


================================================================================================
5.拖拽
makeDraggable: function(	
element,                 //被拖拽对象           
graphF,                  //拖拽目标对象可以用来判断是否为有效放置
funct,                   //拖拽成功的方法,一般拖拽成功复制一个完整的对象
dragElement,             //可选 拖拽预览对象
dx,                      //可选 拖拽对象和预览对象的x差值
dy,                      //可选 拖拽对象和预览对象的y差值
autoscroll,              //可选 mxGraph.autoscroll
scalePreview,            //可选 判断对象是否需要跟着graph 一起缩放 默认false
highlightDropTargets,    //可选 drop目标是否高亮默认true
getDropTarget	)          //可选 mxGraph.getCellAt

function main(container) {
  const graph = new mxGraph(container);
  const parent = graph.getDefaultParent();
  graph.getModel().beginUpdate();
  try {
    const v1 = graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30);
    const v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);
    const e1 = graph.insertEdge(parent, null, '30%', v1, v2);
  } finally {
    graph.getModel().endUpdate();
  }
  // 判断drop是否有效
  const dropGraph = function (evt) {
    const x = mxEvent.getClientX(evt);
    const y = mxEvent.getClientY(evt);
    // 获取 x,y 所在的元素
    const elt = document.elementFromPoint(x, y);
    // 如果鼠标落在graph容器
    if (mxUtils.isAncestorNode(graph.container, elt)) {
      return graph;
    }
    // 鼠标落在其他地方
    return null;
  };
  // drop成功后新建一个节点
  const dropSuccessCb = function (graph, evt, target, x, y) {
    const cell = new mxCell('Test', new mxGeometry(0, 0, 120, 40));
    cell.vertex = true;
    const cells = graph.importCells([cell], x, y, target);
    if (cells != null && cells.length > 0) {
      graph.setSelectionCells(cells);
    }
  };
  // 插入节点方法2
  // const dropSuccessCb = function (graph, evt, target, x, y) {
  //   const cell = new mxCell('Test', new mxGeometry(x, y, 120, 40));
  //   cell.vertex = true;
  //   const parent = graph.getDefaultParent();
  //   graph.addCell(cell, parent);
  //   graph.setSelectionCell(cell);
  // };
  // Creates a DOM node that acts as the drag source
  var img = mxUtils.createImage('./images/other/pika.jpg');
  img.style.width = '48px';
  img.style.height = '48px';
  document.body.appendChild(img);
  // Creates the element that is being for the actual preview.
  var dragElt = document.createElement('div');
  dragElt.style.border = 'dashed black 1px';
  dragElt.style.width = '120px';
  dragElt.style.height = '40px';
  
  var ds = mxUtils.makeDraggable(img, dropGraph, dropSuccessCb, dragElt, null, null, graph.autoscroll, true);
  // Restores original drag icon while outside of graph
  ds.createDragElement = mxDragSource.prototype.createDragElement;
}

============================================================
拖拽产生对象参考官方toolbar例子
var addVertex = function(icon, w, h, style)
{
  var vertex = new mxCell(null, new mxGeometry(0, 0, w, h), style);
  vertex.setVertex(true);

  addToolbarItem(graph, toolbar, vertex, icon);
};

addVertex('editors/images/swimlane.gif', 120, 160, 'shape=swimlane;startSize=20;');
addVertex('editors/images/rectangle.gif', 100, 40, '');
addVertex('editors/images/rounded.gif', 100, 40, 'shape=rounded');
addVertex('editors/images/ellipse.gif', 40, 40, 'shape=ellipse');
addVertex('editors/images/rhombus.gif', 40, 40, 'shape=rhombus');
addVertex('editors/images/triangle.gif', 40, 40, 'shape=triangle');
addVertex('editors/images/cylinder.gif', 40, 40, 'shape=cylinder');
addVertex('editors/images/actor.gif', 30, 40, 'shape=actor');

function addToolbarItem(graph, toolbar, prototype, image)
		{
			// Function that is executed when the image is dropped on
			// the graph. The cell argument points to the cell under
			// the mousepointer if there is one.
			var funct = function(graph, evt, cell)
			{
				graph.stopEditing(false);

				var pt = graph.getPointForEvent(evt);
				var vertex = graph.getModel().cloneCell(prototype);
				vertex.geometry.x = pt.x;
				vertex.geometry.y = pt.y;
				
				graph.setSelectionCells(graph.importCells([vertex], 0, 0, cell));
			}

			// Creates the image which is used as the drag icon (preview)
			var img = toolbar.addMode(null, image, funct);
			mxUtils.makeDraggable(img, graph, funct);
		}

===================================================================================================
6. 悬停图标制作

===================================================================================================
7. 鼠标经过图标

====================================================================================================
8. Delete 删除

===================================================================================================
9.图片拖拽
mxEvent.addListener(container, 'dragover', function(evt)
{
	if (graph.isEnabled())
	{
		evt.stopPropagation();
		evt.preventDefault();
	}
});

mxEvent.addListener(container, 'drop', function(evt)
{
	if (graph.isEnabled())
	{
		evt.stopPropagation();
		evt.preventDefault();

		// Gets drop location point for vertex
		var pt = mxUtils.convertPoint(graph.container, mxEvent.getClientX(evt), mxEvent.getClientY(evt));
		var tr = graph.view.translate;
		var scale = graph.view.scale;
		var x = pt.x / scale - tr.x;
		var y = pt.y / scale - tr.y;

		// Converts local images to data urls
		var filesArray = event.dataTransfer.files;

for (var i = 0; i < filesArray.length; i++)
{
		handleDrop(graph, filesArray[i], x + i * 10, y + i * 10);
}
	}
});

// Handles each file as a separate insert for simplicity.
// Use barrier to handle multiple files as a single insert.
function handleDrop(graph, file, x, y)
{
	if (file.type.substring(0, 5) == 'image')
	{
var reader = new FileReader();

reader.onload = function(e)
{
	// Gets size of image for vertex
			var data = e.target.result;

		// SVG needs special handling to add viewbox if missing and
		// find initial size from SVG attributes (only for IE11)
			if (file.type.substring(0, 9) == 'image/svg')
		{
			var comma = data.indexOf(',');
			var svgText = atob(data.substring(comma + 1));
			var root = mxUtils.parseXml(svgText);

			// Parses SVG to find width and height
			if (root != null)
			{
				var svgs = root.getElementsByTagName('svg');

				if (svgs.length > 0)
				{
					var svgRoot = svgs[0];
					var w = parseFloat(svgRoot.getAttribute('width'));
					var h = parseFloat(svgRoot.getAttribute('height'));

					// Check if viewBox attribute already exists
					var vb = svgRoot.getAttribute('viewBox');

					if (vb == null || vb.length == 0)
					{
						svgRoot.setAttribute('viewBox', '0 0 ' + w + ' ' + h);
					}
					// Uses width and height from viewbox for
					// missing width and height attributes
					else if (isNaN(w) || isNaN(h))
					{
						var tokens = vb.split(' ');

						if (tokens.length > 3)
						{
							w = parseFloat(tokens[2]);
							h = parseFloat(tokens[3]);
						}
					}

			w = Math.max(1, Math.round(w));
			h = Math.max(1, Math.round(h));

					data = 'data:image/svg+xml,' + btoa(mxUtils.getXml(svgs[0], '\n'));
					graph.insertVertex(null, null, '', x, y, w, h, 'shape=image;image=' + data + ';');
				}
			}
		}
			else
			{
	var img = new Image();

	img.onload = function()
	{
		var w = Math.max(1, img.width);
		var h = Math.max(1, img.height);

		// Converts format of data url to cell style value for use in vertex
				var semi = data.indexOf(';');

				if (semi > 0)
				{
					data = data.substring(0, semi) + data.substring(data.indexOf(',', semi + 1));
				}

				graph.insertVertex(null, null, '', x, y, w, h, 'shape=image;image=' + data + ';');
	};

	img.src = data;
			}
};

		reader.readAsDataURL(file);
	}
};

