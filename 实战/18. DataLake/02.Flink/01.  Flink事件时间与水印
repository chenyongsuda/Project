「Flink」事件时间与水印
我们先来以滚动时间窗口为例，来看一下窗口的几个时间参数与Flink流处理系统时间特性的关系。

获取窗口开始时间Flink源代码
获取窗口的开始时间为以下代码：

org.apache.flink.streaming.api.windowing.windows.TimeWindow
/**
 * Method to get the window start for a timestamp.
 *
 * @param timestamp epoch millisecond to get the window start.
 * @param offset The offset which window start would be shifted by.
 * @param windowSize The size of the generated windows.
 * @return window start
 */
public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {
        return timestamp - (timestamp - offset + windowSize) % windowSize;
    }


这一段代码，我们可以认为Flink并不是把时间戳直接作为窗口的开始时间，而是做了一些“对齐”操作，确保时间能够整除8。

不同时间类型的窗口时间计算
1、当TimeCharacteristic为ProcessingTime时
窗口的开始时间：与窗口接收到的第一条消息的处理时间有关。例如：window operator是2020-02-06 22:02:33接收到的第一条消息，那么窗口的开始时间就是2020-02-06 22:02:33。
窗口的结束时间：一旦窗口的开始时间确定了，因为窗口的长度是固定的。那么窗口的结束时间就确定下来了，例如：假设这里的时间窗口是3秒，那么窗口的结束时间就是2020-02-06 22:02:36。
窗口的触发计算时间：假设有一条新的消息到达window operator，此时如果对应operator的系统时间，大于结束时间，就会触发计算。
一旦窗口的开始时间确定了，那么后续窗口的开始时间，也就都确定下来了。

问题：
假设某个时间窗口，2020-2-6 22:12:20 - 2020-2-6 22:12:23，之间没有任何一条数据进来。Flink会如何处理？
Flink会直接抛弃掉这个时间窗口，新来的事件消息会到其他的时间窗口中计算。

2、当TimeCharacteristic为IngestionTime时
窗口的开始时间：与source operator接收到的第一条消息有关。例如：source接收到这条消息的时间是2020-2-6 22:14:50，那么窗口的开始时间就是2020-2-6 22:14:50
窗口的结束时间：与ProcessTime一致
窗口的触发计算时间：假设有一条新的消息到达source operator，那么此时的时间如果大于结束时间，就会触发计算。

除了窗口的开始时间、触发时间都是与source operator算子有关，其他与Processing Time是类似的。

3、但TimeCharacteristic为EventTime时
窗口的开始时间：与window operator接收到的第一条消息的事件时间有关，例如：如果这条消息的水印时间是2020-2-6 22:17:50，那么窗口的的开始时间就是2020-2-6 22:17:50
窗口的结束时间：与ProcessTime一致
窗口的触发计算时间：假设有一条新的消息到达window operator，如果该事件的水印时间大于窗口的结束时间，就会触发计算。
通常，我们会让水印时间比事件时间允许延迟几秒钟。这样，如果是因为网络延迟消息晚到了几秒，也不会影响到统计结果了。

public class WordCountWindow {
    public static void main(String[] args) throws Exception {
        // 1. 初始化流式运行环境
        Configuration conf = new Configuration();
        StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(conf);

        // 2. 设置时间处理类型，这里设置的方式处理时间
        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);

        // 3. 定义数据源，每秒发送一个hadoop单词
        SingleOutputStreamOperator<Tuple2<String, Long>> wordDSWithWaterMark = env.addSource(new RichSourceFunction<Tuple2<String, Long>>() {

            private boolean isCanaled = false;
            private int TOTAL_NUM = 20;

            @Override
            public void run(SourceContext<Tuple2<String, Long>> ctx) throws Exception {
                while (!isCanaled) {
                    ctx.collect(Tuple2.of("hadooop", System.currentTimeMillis()));

                    // 打印窗口开始、结束时间
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    System.out.println("事件发送时间:" + sdf.format(System.currentTimeMillis()));
                    Thread.sleep(1000);
                }
            }

            @Override
            public void cancel() {
                isCanaled = true;
            }
        }).assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor<Tuple2<String, Long>>(Time.seconds(5)) {
            @Override
            public long extractTimestamp(Tuple2<String, Long> element) {
                return element.f1;
            }
        });

        // 4. 每5秒进行一次，分组统计
        // 4.1 转换为元组
        wordDSWithWaterMark.map(word -> {
            return Tuple2.of(word.f0, 1);

        })
                // 指定返回类型
                .returns(Types.TUPLE(Types.STRING, Types.INT))
                // 按照单词进行分组
                .keyBy(t -> t.f0)
                // 滚动窗口，3秒计算一次
                .timeWindow(Time.seconds(3))
                .reduce(new ReduceFunction<Tuple2<String, Integer>>() {
                    @Override
                    public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1, Tuple2<String, Integer> value2) throws Exception {
                        return Tuple2.of(value1.f0, value1.f1 + value2.f1);
                    }
                }, new RichWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String, TimeWindow>() {
                    @Override
                    public void apply(String word, TimeWindow window, Iterable<Tuple2<String, Integer>> input, Collector<Tuple2<String, Integer>> out) throws Exception {

                        // 打印窗口开始、结束时间
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        System.out.println("窗口开始时间:" + sdf.format(window.getStart())
                                + " 窗口结束时间：" + sdf.format(window.getEnd())
                                + " 窗口计算时间:" + sdf.format(System.currentTimeMillis()));

                        int sum = 0;
                        Iterator<Tuple2<String, Integer>> iterator = input.iterator();
                        while(iterator.hasNext()) {
                            Integer count = iterator.next().f1;
                            sum += count;
                        }
                        out.collect(Tuple2.of(word, sum));
                    }
                }).print();

        env.execute("app");
    }
}

输出结果如下：
事件发送时间:2020-02-06 22:35:08
事件发送时间:2020-02-06 22:35:09
事件发送时间:2020-02-06 22:35:10
事件发送时间:2020-02-06 22:35:11
事件发送时间:2020-02-06 22:35:12
事件发送时间:2020-02-06 22:35:13
事件发送时间:2020-02-06 22:35:14
窗口开始时间:2020-02-06 22:35:06 窗口结束时间：2020-02-06 22:35:09 窗口计算时间:2020-02-06 22:35:14
4> (hadooop,1)

事件发送时间:2020-02-06 22:35:15
事件发送时间:2020-02-06 22:35:16
事件发送时间:2020-02-06 22:35:17
窗口开始时间:2020-02-06 22:35:09 窗口结束时间：2020-02-06 22:35:12 窗口计算时间:2020-02-06 22:35:17
4> (hadooop,3)

=======================================



八大内置触发器
EventTimeTrigger
EventTime Window的默认触发器。基于事件时间，当Watermark>=Window End Time时，触发窗口计算。

ContinuousEventTimeTrigger
基于事件时间，当Watermark>=Window End Time时，触发窗口计算。或者，在Watermark>=Window End Time之前，即在窗口没有结束的情况下，以固定间隔，周期性触发窗口计算，提前获得当前窗口现阶段的聚合结果。如下:

keyedStream
// Window Size 10秒
.timeWindow(Time.seconds(10))
// 每隔2秒就触发一次计算
.trigger(ContinuousEventTimeTrigger.of(Time.seconds(2)))
// 窗口计算
.process(...)
ProcessingTimeTrigger
ProcessingTime Window的默认触发器。基于处理时间，当ProcessingTime>=Window End Time时，触发窗口计算。

ContinuousProcessingTimeTrigger
基于处理时间，当ProcessingTime>=Window End Time时，触发窗口计算。或者，在ProcessingTime>=Window End Time之前，即在窗口没有结束的情况下，以固定间隔，周期性触发窗口计算，提前获得当前窗口现阶段的聚合结果。如下:

keyedStream
// Window Size 10秒
.timeWindow(Time.seconds(10))
// 每隔2秒就触发一次计算
.trigger(ContinuousProcessingTimeTrigger.of(Time.seconds(2)))
// 窗口计算
.process(...)

CountTrigger
Count Window的默认触发器。基于数量，当输入元素个数>=阈值(maxCount)时，就触发窗口计算。

PurgingTrigger
清除触发器。可将任意触发器转换为清除触发器，即计算完后，窗口中的数据会被清除。

DeltaTrigger
根据输入的元素，按DeltaFunction计算出指标(Delta)，当Delta大于设定的阈值时，触发窗口计算。

NeverTrigger
永远不会触发的触发器，是GlobalWindow的默认触发器。


===============自定义触发器
Trigger
如果默认触发器不满足需求，可以自定义触发器，这里总结下抽象类Trigger的API。

onElement: 向Window添加元素时，该方法就会被调用。
// element: 进入窗口的元素。
// timestamp: 元素到达的时间戳。
// window: 元素要添加的窗口。
// ctx: Trigger上下文, 可以获取当前水印、处理状态、注册timer计时器回调等。
public abstract TriggerResult onElement(T element, long timestamp, W window, TriggerContext ctx) throws Exception;

onProcessingTime: 当processing-time timer被触发时，会被调用。
// time: timer触发时的时间戳。
// window: timer触发的窗口。
// ctx: Trigger上下文。
public abstract TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception;

onEventTime: 当event-time timer被触发时，会被调用。
// time: timer触发时的时间戳。
// window: timer触发的窗口。
// ctx: Trigger上下文。
public abstract TriggerResult onEventTime(long time, W window, TriggerContext ctx) throws Exception;


canMerge: 是否需要合并Trigger State。需要合并，则为true；不需要，则为false。为true时，需要实现onMerge方法。
public boolean canMerge() {
		return false;
}

onMerge: 对两个Trigger的State进行Merge。
// window: merge产生的新窗口。
// ctx: 可以用于注册timer计时器回调和访问状态的上下文。
public void onMerge(W window, OnMergeContext ctx) throws Exception {
		throw new UnsupportedOperationException("This trigger does not support merging.");
}

clear: Window销毁时被调用。
// window: 要销毁的窗口。
// ctx: Trigger上下文。
public abstract void clear(W window, TriggerContext ctx) throws Exception;
注意: onElement、onProcessingTime、onEventTime均返回TriggerResult。TriggerResult是个枚举，如下:

CONTINUE: 不触发窗口计算。
PURGE: 不触发窗口计算，但清除窗口中的数据
FIRE_AND_PURGE: 触发窗口计算，并清除窗口中的数据。
FIRE: 触发窗口计算，但不清除窗口中的数据。

在使用ContinuousEventTimeTrigger 有以下点需要注意

连续定时触发与第一条数据有关，例如第一条数据是2019-11-16 11:22:01， 10s触发一次，那么后续触发时间就分别是2019-11-16 11:22:10、2019-11-16 11:22:20、2019-11-16 11:22:30
如果数据时间间隔相对于定期触发的interval比较大，那么有可能会存在多次输出相同结果的场景，比喻说触发的interval是10s, 第一条数据时间是2019-11-16 11:22:00, 
那么下一次的触发时间是2019-11-16 11:22:10， 如果此时来了一条2019-11-16 11:23:00 的数据，会导致其watermark直接提升了1min, 会直接触发5次连续输出，
对于下游处理来说可能会需要做额外的操作。
窗口的每一个key的触发时间可能会不一致，是因为窗口的每一个key对应的第一条数据时间不一样，正如上述所描述定时规则。由于会注册一个窗口endTime的触发器，
会触发窗口所有key的窗口函数，保证最终结果的正确性。
ContinuousProcessingTimeTrigger表示处理时间连续触发器，其思想与ContinuousEventTimeTrigger触发器大体相同，主要区别就是基于处理时间的定时触发。


#############################
请注意:	窗口结束的时候，会自动触发调用 onProcessingTime ，一定要包含在触发器逻辑里面，不然不能获取窗口的完整数据

例子:
很简单的一段代码：定义了一个60秒的窗口，触发器是自己实现的10条数据或者 10 秒触发一次的触发器，窗口函数就输出窗口数据的条数
下面看下自定义触发器 CountAndTimeTrigger 的核心代码如下：

/**
 * CountAndTimeTrigger : 满足一定条数和时间触发
 * 条数的触发使用计数器计数
 * 时间的触发，使用 flink 的 timerServer，注册触发器触发
 *
 * @param <W>
 */
public class CountAndTimeTrigger<W extends Window> extends Trigger<Object, W> {
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    // 触发的条数
    private final long size;
    // 触发的时长
    private final long interval;
    private static final long serialVersionUID = 1L;
    // 条数计数器
    private final ReducingStateDescriptor<Long> countStateDesc =
            new ReducingStateDescriptor<>("count", new ReduceSum(), LongSerializer.INSTANCE);
    // 时间计数器，保存下一次触发的时间
    private final ReducingStateDescriptor<Long> timeStateDesc =
            new ReducingStateDescriptor<>("fire-interval", new ReduceMin(), LongSerializer.INSTANCE);

    public CountAndTimeTrigger(long size, long interval) {
        this.size = size;
        this.interval = interval;
    }

    @Override
    public TriggerResult onElement(Object element, long timestamp, W window, TriggerContext ctx) throws Exception {
        // 注册窗口结束的触发器, 不需要会自动触发
//        ctx.registerProcessingTimeTimer(window.maxTimestamp());
        // count
        ReducingState<Long> count = ctx.getPartitionedState(countStateDesc);
        //interval
        ReducingState<Long> fireTimestamp = ctx.getPartitionedState(timeStateDesc);
        // 每条数据 counter + 1
        count.add(1L);
        if (count.get() >= size) {
            logger.info("countTrigger triggered, count : {}", count.get());
            // 满足条数的触发条件，先清 0 条数计数器
            count.clear();
            // 满足条数时也需要清除时间的触发器，如果不是创建结束的触发器
            if (fireTimestamp.get() != window.maxTimestamp()) {
//                logger.info("delete trigger : {}, {}", sdf.format(fireTimestamp.get()), fireTimestamp.get());
                ctx.deleteProcessingTimeTimer(fireTimestamp.get());
            }
            fireTimestamp.clear();
            // fire 触发计算
            return TriggerResult.FIRE;
        }

        // 触发之后，下一条数据进来才设置时间计数器注册下一次触发的时间
        timestamp = ctx.getCurrentProcessingTime();
        if (fireTimestamp.get() == null) {
//            long start = timestamp - (timestamp % interval);
            long nextFireTimestamp = timestamp + interval;
//            logger.info("register trigger : {}, {}", sdf.format(nextFireTimestamp), nextFireTimestamp);
            ctx.registerProcessingTimeTimer(nextFireTimestamp);
            fireTimestamp.add(nextFireTimestamp);
        }
        return TriggerResult.CONTINUE;
    }

    @Override
    public TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception {

        // count
        ReducingState<Long> count = ctx.getPartitionedState(countStateDesc);
        //interval
        ReducingState<Long> fireTimestamp = ctx.getPartitionedState(timeStateDesc);

        // time trigger and window end
        if (time == window.maxTimestamp()) {
            logger.info("window close : {}", time);
            // 窗口结束，清0条数和时间的计数器
            count.clear();
            ctx.deleteProcessingTimeTimer(fireTimestamp.get());
            fireTimestamp.clear();
            return TriggerResult.FIRE_AND_PURGE;
        } else if (fireTimestamp.get() != null && fireTimestamp.get().equals(time)) {
            logger.info("timeTrigger trigger, time : {}", time);
            // 时间计数器触发，清0条数和时间计数器
            count.clear();
            fireTimestamp.clear();
            return TriggerResult.FIRE;
        }
        return TriggerResult.CONTINUE;
    }
}

主要是在数据进来的时候，调用  onElement 做条数的计数器，满足条件就触发， onProcessingTime 是 flink 的 timeservice 调用的，作为定时触发的触发器
在时间和条数的定时器都有清除时间和条数计数器的计数，让计数器在下一条数据到的时候，重新开始计数
特别需要注意：窗口结束的时候，会自动触发调用 onProcessingTime ，一定要包含在触发器逻辑里面，不然不能获取窗口的完整数据

// time trigger and window end
        if (time == window.maxTimestamp()) {
            logger.info("window close : {}", time);
            // 窗口结束，清0条数和时间的计数器
            count.clear();
            ctx.deleteProcessingTimeTimer(fireTimestamp.get());
            fireTimestamp.clear();
            return TriggerResult.FIRE_AND_PURGE;
        } 

如在获取到窗口触发时间是窗口的结束时间（即窗口的结束时间减1，Java的时间精度是到毫秒，如 10秒的窗口时间是：（00000, 10000）0000-10000 ，实际上窗口结束时间就是  9999）
