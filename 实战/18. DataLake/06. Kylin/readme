Kylin的四大优化方式

1. 强制维度
  该维度确认好了必要出现的维度数和顺序将不出现的作为变量
  维度变为2^(n-x)
  
  强制维度：所有cuboid必须包含的维度，不会计算不包含强制维度的cuboid。
  适用场景：可以将确定在查询时一定会使用的维度设为强制维度。例如，时间维度。
  优化效果：将一个维度设为强制维度，则cuboid个数直接减半。

2. 层级维度（Hierarchy Dimension）
  用户选择的维度中常常会出现具有层级关系的维度。例如对于国家（country）、省份（province）和城市（city）这三个维度，从上而下来说国家／省份／城市之间分别是一对多的关系。也就是说，用户对于这三个维度的查询可以归类为以下三类:
  group by country
  group by country, province（等同于group by province）
  group by country, province, city（等同于 group by country, city 或者group by city）
  
  层次维度
  层次维度：具有一定层次关系的维度。
  使用场景：像年，月，日；国家，省份，城市这类具有层次关系的维度。
  优化效果：将N个维度设置为层次维度，则这N个维度组合成的cuboid个数会从2的N次方减少到N+1。

3. 聚合组
   用户根据自己关注的维度组合
   例如聚合组 ABC 和聚合组 BCD 都包含维度 B 和维度 C。这些聚合组之间会衍生出相同的 Cuboid，例如聚合组 ABC 会产生 Cuboid BC，聚合组 BCD 也会产生 Cuboid BC。这些 Cuboid不会被重复生成，一份 Cuboid 为这些聚合组所共有
   

4. 联合维度
   用户有时并不关心维度之间各种细节的组合方式，例如用户的查询语句中仅仅会出现 group by A, B, C，而不会出现 group by A, B 或者 group by C 等等这些细化的维度组合。这一类问题就是联合维度所解决的问题。

    例如将维度 A、B 和 C 定义为联合维度，Apache Kylin 就仅仅会构建 Cuboid ABC，而 Cuboid AB、BC、A 等等Cuboid 都不会被生成。最终的 Cube 结果如图所示，Cuboid 数目从 16 减少到 4。



  
