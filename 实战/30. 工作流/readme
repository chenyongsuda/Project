
流程引擎的几大模块

ProcessEnigne 流程引擎
===========
RepositoryService 流程仓库Service,可以管理流程仓库例如部署删除读取流程资源
RuntimeService 运行时Service可以处理所有运行状态的流程实例流程控制(开始,暂停,挂起等)
TaskService 任务Service用于管理、查询任务，例如签收、办理、指派等
IdentitiServicec 身份Service可以管理查询用户、组之间的关系
FormService 表单Service用于读取和流程、任务相关的表单数据
HistoryService 历史Service用于查询所有的历史数据
ManagementService 引擎管理Service，和具体业务无关，主要查询引擎配置，数据库作业
DynamicBpmService 动态bpm服务

工作流过程
1. 创建流程  ->  发布流程  -> 创建流程实例(任务Task,有taskmanager) ->结束task

发布流程
/调用引擎,初始化
ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();
/**
 * 部署流程定义
 */
@Test
public void deployment() {
    Deployment deployment = processEngine.getRepositoryService()//与流程定义和部署相关的Service
            .createDeployment()//创建一个部署对象
            .name("helloword")//添加部署的名称
            .addClasspathResource("diagrams/helloword.bpmn")//从classpath下加载资源，一次一个
            .addClasspathResource("diagrams/helloword.png")
            .deploy();//完成部署
        System.out.println("部署ID"+deployment.getId());//1
        System.out.println("部署名称"+deployment.getName());
}

/**
   *启动流程实例
   */
  @Test
  public void startProcessInstance() {
      String processDefinitionKey = "helloword";
      ProcessInstance processInstance = processEngine.getRuntimeService()//与正在执行的流程实例和执行对象相关的Service
              .startProcessInstanceByKey(processDefinitionKey);//根据Key值来查询流程,也可以根据ID
      System.out.println("流程实例ID:"+processInstance.getId());  //2501
                                                                  //对应数据库act_ru_execution
      System.out.println("流程定义ID:"+processInstance.getProcessDefinitionId()); //helloword:1:4
                                                                              //对应数据库act_re_deployment
  }
  
/**
 * 查询当前个人的任务
 */
@Test
public void fingByPerson() {
    String assignee = "张三";
    List<Task> list = processEngine.getTaskService()//与正在执行的任务管理相关的Service
            .createTaskQuery()//创建任务查询对象
            .taskAssignee(assignee)//指定个人任务查询，指定代理人
            .list();//以list形式记录对象
    if(list != null && list.size()>0) {
        for(Task task:list) {
            System.out.println("任务ID:"+task.getId());//2501
            System.out.println("任务名称："+task.getName());//提交申请
            System.out.println("任务的创建时间："+task.getCreateTime());//Wed Jun 06 18:12:15 CST 2018
            System.out.println("任务的代理人："+task.getAssignee());//张三
            System.out.println("流程实例ID："+task.getProcessInstanceId());//2501
            System.out.println("执行对象ID："+task.getExecutionId());//2501
            System.out.println("流程定义ID："+task.getProcessDefinitionId());//helloword:1:4
        }
    }
}

/**
 * 完成个人任务
 */
@Test
public void complete() {
    String taskId = "2504";
    processEngine.getTaskService()
        .complete(taskId );
    System.out.println("完成任务ID："+taskId);
}


Activiti的后台是有数据库的支持，所有的表都以ACT_开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的API对应。
ACT_RE_*: 'RE'表示repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。
ACT_RU_*: 'RU'表示runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。
ACT_ID_*: 'ID'表示identity。 这些表包含身份信息，比如用户，组等等。
ACT_HI_*: 'HI'表示history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。
ACT_GE_*: 通用数据， 用于不同场景下，如存放资源文件。
