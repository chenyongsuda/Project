
流程引擎的几大模块

ProcessEnigne 流程引擎
===========
RepositoryService 流程仓库Service,可以管理流程仓库例如部署删除读取流程资源
RuntimeService 运行时Service可以处理所有运行状态的流程实例流程控制(开始,暂停,挂起等)
TaskService 任务Service用于管理、查询任务，例如签收、办理、指派等
IdentitiServicec 身份Service可以管理查询用户、组之间的关系
FormService 表单Service用于读取和流程、任务相关的表单数据
HistoryService 历史Service用于查询所有的历史数据
ManagementService 引擎管理Service，和具体业务无关，主要查询引擎配置，数据库作业
DynamicBpmService 动态bpm服务

工作流过程
1. 创建流程  ->  发布流程  -> 创建流程实例(任务Task,有taskmanager) ->结束task

发布流程
/调用引擎,初始化
ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();
/**
 * 部署流程定义
 */
@Test
public void deployment() {
    Deployment deployment = processEngine.getRepositoryService()//与流程定义和部署相关的Service
            .createDeployment()//创建一个部署对象
            .name("helloword")//添加部署的名称
            .addClasspathResource("diagrams/helloword.bpmn")//从classpath下加载资源，一次一个
            .addClasspathResource("diagrams/helloword.png")
            .deploy();//完成部署
        System.out.println("部署ID"+deployment.getId());//1
        System.out.println("部署名称"+deployment.getName());
}

/**
   *启动流程实例
   */
  @Test
  public void startProcessInstance() {
      String processDefinitionKey = "helloword";
      ProcessInstance processInstance = processEngine.getRuntimeService()//与正在执行的流程实例和执行对象相关的Service
              .startProcessInstanceByKey(processDefinitionKey);//根据Key值来查询流程,也可以根据ID
      System.out.println("流程实例ID:"+processInstance.getId());  //2501
                                                                  //对应数据库act_ru_execution
      System.out.println("流程定义ID:"+processInstance.getProcessDefinitionId()); //helloword:1:4
                                                                              //对应数据库act_re_deployment
  }
  
/**
 * 查询当前个人的任务
 */
@Test
public void fingByPerson() {
    String assignee = "张三";
    List<Task> list = processEngine.getTaskService()//与正在执行的任务管理相关的Service
            .createTaskQuery()//创建任务查询对象
            .taskAssignee(assignee)//指定个人任务查询，指定代理人
            .list();//以list形式记录对象
    if(list != null && list.size()>0) {
        for(Task task:list) {
            System.out.println("任务ID:"+task.getId());//2501
            System.out.println("任务名称："+task.getName());//提交申请
            System.out.println("任务的创建时间："+task.getCreateTime());//Wed Jun 06 18:12:15 CST 2018
            System.out.println("任务的代理人："+task.getAssignee());//张三
            System.out.println("流程实例ID："+task.getProcessInstanceId());//2501
            System.out.println("执行对象ID："+task.getExecutionId());//2501
            System.out.println("流程定义ID："+task.getProcessDefinitionId());//helloword:1:4
        }
    }
}

/**
 * 完成个人任务
 */
@Test
public void complete() {
    String taskId = "2504";
    processEngine.getTaskService()
        .complete(taskId );
    System.out.println("完成任务ID："+taskId);
}


Activiti的后台是有数据库的支持，所有的表都以ACT_开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的API对应。
ACT_RE_*: 'RE'表示repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。
ACT_RU_*: 'RU'表示runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。
ACT_ID_*: 'ID'表示identity。 这些表包含身份信息，比如用户，组等等。
ACT_HI_*: 'HI'表示history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。
ACT_GE_*: 通用数据， 用于不同场景下，如存放资源文件。

===========================
流程定义查询删除
/**
 * 查询流程定义 返回流程定义集合 ---对应act_re_procdef
 */
@Test
public void list(){
    List<processdefinition> pdList=processEngine.getRepositoryService() // 获取service类
        .createProcessDefinitionQuery() // 创建流程定义查询
        .processDefinitionKey("myFirstProcess") // 通过key查询
        .list(); // 返回一个集合
    for(ProcessDefinition pd:pdList){
        System.out.println("ID_："+pd.getId());
        System.out.println("NAME_："+pd.getName());
        System.out.println("KEY_："+pd.getKey());
        System.out.println("VERSION_："+pd.getVersion());
        System.out.println("===================");
    }
}

/**
 * 通过ID查询当个流程定义
 */
@Test
public void getById(){
    ProcessDefinition pd=processEngine.getRepositoryService() // 获取service类
            .createProcessDefinitionQuery() // 创建流程定义查询
            .processDefinitionId("myFirstProcess:1:4") // 通过id查询
            .singleResult(); // 查询返回当个结果
    System.out.println("ID_："+pd.getId());
    System.out.println("NAME_："+pd.getName());
    System.out.println("KEY_："+pd.getKey());
    System.out.println("VERSION_："+pd.getVersion());
}

/**
 * 删除流程定义
 */
@Test
public void delete(){
    processEngine.getRepositoryService()
        .deleteDeployment("12501"); // 流程部署ID
    System.out.println("delete OK！");
}
上面那种有个问题，一般情况不会有问题，但是，假如这个流程定义的流程实例在运行活动中，未完结。这时候我们执行上面的代码，会报错；
本质的话，就是数据库里的数据 有主外键关联，不能删除；
我们实际情况的，假如一个流程定义都不需要了。那那些活动的流程实例也直接了当的级联删除；所以我们这里要搞级联删除；上代码；

/**
 * 级联删除 已经在使用的流程实例信息也会被级联删除
 */
@Test
public void deleteCascade(){
    processEngine.getRepositoryService()
        .deleteDeployment("12501", true); // 默认是false true就是级联删除
    System.out.println("delete cascade OK!");
}
这时候 任何情况都能直接删除流程定义； 我们开发的时候就用这种；
有时候我们一个流程定义不需要的，包括所有版本，这时候我们在用户界面上一个一个删除太麻烦；所有有时候我们又这样的需求，一下子把所有Key相同的流程定义全部删除；
我们的思路是这样的；
第一步：根据Key获取所有的流程定义；
第二步：遍历集合，获取每个流程定义的流程部署Id
第三步：我们根据流程部署Id即可删除所有的流程定义；
/**
 * 删除所有Key相同的流程定义
 * @throws Exception
 */
@Test
public void deleteByKey()throws Exception{
    List<processdefinition> pdList=processEngine.getRepositoryService()  // 获取service类
            .createProcessDefinitionQuery() // 创建流程定义查询
            .processDefinitionKey("mySecondProcess") // 根据Key查询
            .list();
    for(ProcessDefinition pd:pdList){  // 遍历集合 获取流程定义的每个部署Id，根据这个id来删除所有流程定义
        processEngine.getRepositoryService()
        .deleteDeployment(pd.getDeploymentId(), true); 
    }
}

===========================
Activiti流程定义“修改”
前面讲了流程定义的添加，查询，删除。至于这个修改；我们今天来讨论下；
首先说下结论，流程定义是不能修改的；这里举例子，假如一个流程定义的流程实例在活动运行中。假如可以修改，本来要流转到A这个节点，因为流程定义修改了，流转到B这个节点。就不符合当时这个流程实例的初衷了；所以一般开发的话，不能修改流程定义，我们是通过增加版本号的方式。来实现“修改”的；

在设计流程图的时候，这里的Id 对应到数据库里的就是那个Key值 只要Id相同。就算是同一个流程定义；
比如我们可以发布多次，Id一样，到数据库表那边 Key作为版本属性 值会增加；

我们一般启动流程实例的时候，我们用Key来启动。这样启动的时候 就是用的最新版本的流程定义来启动流程实例的；

假如用流程定义Id来启动 很不推荐；

这里顺便再说下流程定义的Id；

这个Id值组成的话 是 key值:版本号:流程部署ID；

===========================
流程定义历史查询
1.根据流程实例id（processInstanceId）获取流程的历史记录，并按照发起时间排序
List<HistoricTaskInstance> historicTaskInstanceList = ProcessEngines.getDefaultProcessEngine().
getHistoryService().createHistoricTaskInstanceQuery().
processInstanceId(processInstanceId).
orderByTaskCreateTime().asc().list();


2.通过for each 循环遍历列表 通过historicTaskInstanceLis.get*** 方法即可取出单个历史任务的属性，并设置一个index来标记步骤的编号
​
index=1;
for (HistoricTaskInstance historicTaskInstance : historicTaskInstanceList) {
    //父级流程任务Id
    historicTaskInstance.getParentTaskId();
    //taskId 活动ID
    historicTaskInstance.getId();
    //任务序号
    processHistoryDTO.setIndexKey(index);
    index+=1;
    //节点ID
    historicTaskInstance.getTaskDefinitionKey();
    //办理时间
    historicTaskInstance.getEndTime();
    //接收时间
    historicTaskInstance.getStartTime();
    //节点名称
    historicTaskInstance.getName();
    //节点状态
    if (endTimeDate != null) {
        processHistoryDTO.setStates("已结束");
    }else{
        processHistoryDTO.setStates("运行中");
    }
    //会签、绿色通道等消息（需要取出getDescription的内容进行判断）
    historicTaskInstance.getDescription()
}



===========================================================================================
进阶
流程实例为动态概念,流程定义为静态概念

如何和业务系统通过business key来结合

/**
 *  启动流程实例，添加进businessKey
 *
 *  本质：act_ru_execution表中的businessKey的字段要存入业务标识
 */
public class BusinessKeyAdd {
 
    public static void main(String[] args) {
        //1.得到ProcessEngine对象
        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();
 
        //2.得到RuntimeService对象
        RuntimeService runtimeService = processEngine.getRuntimeService();
 
        //3.启动流程实例,同时还要指定业务标识businessKey  它本身就是请假单的id
        //第一个参数：是指流程定义key
        //第二个参数：业务标识businessKey
        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("holiday", "1001");
 
        //4.输出processInstance相关的属性,取出businessKey使用:processInstance.getBusinessKey()
        System.out.println(processInstance.getBusinessKey());
 
    }
}

=========================
新制度和老制度交替情况下流程挂起
===单个流程实例挂起
    /**
     * 测试挂起一个流程实例
     */
    @Test
    public void testSuspendProcessInstance(){
        RuntimeService runtimeService = engine.getRuntimeService();
        String processInstanceId="1801";
        //根据一个流程实例的id挂起该流程实例
        runtimeService.suspendProcessInstanceById(processInstanceId);
        
    }
    
    /**
     * 激活一个流程实例
     */
    @Test
    public void testActivateProcessInstance(){
        RuntimeService runtimeService = engine.getRuntimeService();
        String processInstanceId="1801";
        runtimeService.activateProcessInstanceById(processInstanceId);
    }
    
 ===全部流程实例的挂起激活
    /**
     * 挂起、激活流程定义
     */
    @RequestMapping(value = "processdefinition/update/{state}/{processDefinitionId}")
    public String updateState(@PathVariable("state") String state, @PathVariable("processDefinitionId") String processDefinitionId,
                              RedirectAttributes redirectAttributes) {
        if (state.equals("active")) {
            redirectAttributes.addFlashAttribute("message", "已激活ID为[" + processDefinitionId + "]的流程定义。");
            repositoryService.activateProcessDefinitionById(processDefinitionId, true, null);
        } else if (state.equals("suspend")) {
            repositoryService.suspendProcessDefinitionById(processDefinitionId, true, null);
            redirectAttributes.addFlashAttribute("message", "已挂起ID为[" + processDefinitionId + "]的流程定义。");
        }
        return "redirect:/workflow/process-list";
    }
    
    
    

    





