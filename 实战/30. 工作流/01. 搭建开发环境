1.搭建简易开发环境

====配置库依赖
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.2.RELEASE</version>
    <relativePath/>
</parent>
<dependencies>

    <dependency>
        <groupId>org.activiti</groupId>
        <artifactId>activiti-spring-boot-starter-basic</artifactId>
        <version>6.0.0</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>

    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
</dependencies>


====配置数据源
#server port
server.port=7777

#mysql
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/springbootactiviti?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&nullCatalogMeansCurrent=true
spring.datasource.username=root
spring.datasource.password=root

#每次应用启动不检查Activiti数据表是否存在及版本号是否匹配，提升应用启动速度
spring.activiti.database-schema-update=true
#保存历史数据级别设置为full最高级别，便于历史数据的追溯
spring.activiti.history-level=full
spring.activiti.process-definition-location-prefix: classpath:/processes


====编写springboot开始代码
package com.test;

import org.activiti.spring.boot.SecurityAutoConfiguration;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication(exclude = SecurityAutoConfiguration.class)
public class Main {
    public static void main(String[] args) {
        SpringApplication.run(Main.class, args);
    }
}

====资源文件夹创建processes文件夹或者配置路径

启动后自动创建28张表
==============================================================================
相关配置详解
## activiti default configuration
spring.activiti.database-schema-update=true
spring.activiti.check-process-definitions=false
spring.activiti.async-executor-enabled=false
spring.activiti.job-executor-activate=false
spring.activiti.async-executor-activate=false
spring.activiti.process-definition-location-prefix: classpath:/processes/
spring.activiti.history-level=full

###############################################
spring.activiti.database-schema-update=true建表规则
flase： 默认值。activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常。
true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建。
create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）。
drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）
————————————————
# 自动部署验证设置:true-开启（默认）、false-关闭
spring.activiti.check-process-definitions=false

# asyncExecutorEnabled属性设置设置true后将代替那些老的Job executor
spring.activiti.async-executor-enabled=false 
spring.activiti.job-executor-activate=false

# asyncExecutorActivate是指activiti在流程引擎启动就激活AsyncExecutor,异步：true-开启（默认）、false-关闭
spring.activiti.async-executor-activate=true

process-definition-location-prefix是指定activiti流程描述文件的前缀（即路径），启动时，activiti就会去寻找此路径下的流程描述文件，并且自动部署；
process-definition-location-suffixes是一个String数组，表示描述文件的默认后缀名，默认以下两种。
#      - **.bpmn
#      - **.bpmn20.xml
###############################################

==============================================================================
比较详细的配置参考如下：
server.port=8085
spring.application.name=activiti

## Properties
##第一数据源
spring.datasource.primary.url=jdbc:mysql://127.0.0.1:3306/activiti_demo?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&nullCatalogMeansCurrent=true
spring.datasource.primary.username=root
spring.datasource.primary.password=root
spring.datasource.primary.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.primary.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.primary.initialSize=5
spring.datasource.primary.minIdle=5
spring.datasource.primary.maxActive=60
spring.datasource.primary.maxWait=60000
spring.datasource.primary.timeBetweenEvictionRunsMillis=60000
spring.datasource.primary.minEvictableIdleTimeMillis=300000
spring.datasource.primary.testWhileIdle=false
spring.datasource.primary.testOnBorrow=true
spring.datasource.primary.testOnReturn=false
spring.datasource.primary.poolPreparedStatements=true
spring.datasource.primary.maxPoolPreparedStatementPerConnectionSize=20

##第二数据源
spring.datasource.secondary.url=jdbc:mysql://127.0.0.1:3306/business_demo?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
spring.datasource.secondary.username=root
spring.datasource.secondary.password=root
spring.datasource.secondary.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.secondary.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.secondary.initialSize=5
spring.datasource.secondary.minIdle=5
spring.datasource.secondary.maxActive=60
spring.datasource.secondary.maxWait=60000
spring.datasource.secondary.timeBetweenEvictionRunsMillis=60000
spring.datasource.secondary.minEvictableIdleTimeMillis=300000
spring.datasource.secondary.testWhileIdle=false
spring.datasource.secondary.testOnBorrow=true
spring.datasource.secondary.testOnReturn=false
spring.datasource.secondary.poolPreparedStatements=true
spring.datasource.secondary.maxPoolPreparedStatementPerConnectionSize=20
## activiti default configuration
spring.activiti.database-schema-update=true

# activiti
spring.activiti.check-process-definitions=false
spring.activiti.async-executor-enabled=false
spring.activiti.job-executor-activate=false
spring.activiti.async-executor-activate=false
spring.activiti.process-definition-location-prefix: classpath:/processes/
spring.activiti.history-level=full

mybatis.mapper-locations= classpath:mapping/*Mapper.xml
mybatis.type-aliases-package=com.example.activiti.entity

#showSql
logging.level.com.example.activiti.mapper= debug
logging.level.org.activiti.engine.impl.persistence.entity=trace

如果就一个数据源的话直接使用单数据源如果是多数据源按照上面的配置
多数据源的话要指定activiti使用的数据源
要重载相关bean方法设置数据源


@Configuration
public class DataSourceConfig {
    @Bean(name = "primaryDataSource")
    @Primary
    @ConfigurationProperties(prefix = "spring.datasource.primary")
    public DataSource primaryDataSource() {
        return DataSourceBuilder.create().type(DruidDataSource.class).build();
    }

    @Bean(name = "secondaryDataSource")
    @ConfigurationProperties(prefix = "spring.datasource.secondary")
    public DataSource secondaryDataSource() {
        return DataSourceBuilder.create().type(DruidDataSource.class).build();
    }
}

// 工作流库
@Configuration
class PrimaryConfig extends AbstractProcessEngineAutoConfiguration {

    @Autowired
    @Qualifier("primaryDataSource")
    private DataSource primaryDataSource;
    @Autowired
    private CustomProcessDiagramGeneratorI customProcessDiagramGeneratorI;

    @Primary
    @Bean
    public SpringProcessEngineConfiguration springProcessEngineConfiguration(
            PlatformTransactionManager transactionManager,
            SpringAsyncExecutor springAsyncExecutor) throws IOException {
        return baseSpringProcessEngineConfiguration(
                primaryDataSource,
                transactionManager,
                springAsyncExecutor);
    }
}

参考同目录多数据源配置
=========================================================================
创建数据库方式由三种 第一种就是如上述搭建方式通过代码方式
另两种
数据库初始化
activiti默认采用内存数据库h2，作为本地测试是够了，但是作为测试环境，开发环境和生产环境，是远远不够的，我们需要使用更为强大和灵活的数据库，以下是zip包里提供的数据库创建脚本

activiti.db2.create.engine.sql
activiti.db2.create.history.sql
activiti.db2.create.identity.sql
activiti.h2.create.engine.sql
activiti.h2.create.history.sql
activiti.h2.create.identity.sql
activiti.hsql.create.engine.sql
activiti.hsql.create.history.sql
activiti.hsql.create.identity.sql
activiti.mssql.create.engine.sql
activiti.mssql.create.history.sql
activiti.mssql.create.identity.sql
activiti.mysql.create.engine.sql
activiti.mysql.create.history.sql
activiti.mysql.create.identity.sql
activiti.mysql55.create.engine.sql
activiti.mysql55.create.history.sql
activiti.oracle.create.engine.sql
activiti.oracle.create.history.sql
activiti.oracle.create.identity.sql
activiti.postgres.create.engine.sql
activiti.postgres.create.history.sql
activiti.postgres.create.identity.sql
从脚本上看，activiti支持以下几种数据库

db2
h2
hsqldb
sql server
mysql
oracle
postgres
本次以mysql为例。

activiti提供两种方式进行数据库初始化，一种是通过脚本，一种是在libs/activiti-engine-6.0.0.jar中提供了DbSchemaCreate类用来创建数据库。一般开发人员无法拿到生产环境的数据库账号密码那么就需要提供脚本给dba执行，但如果有数据库的用户名密码，通过第二种更为方便。

不管通过哪种方式，都需要提前创建mysql数据库，以下就是创建数据库脚本参考(基于mysql 8.0.15)

CREATE DATABASE  activiti default charset utf8 COLLATE utf8_general_ci;

CREATE USER 'activiti'@'%' IDENTIFIED BY 'definesys';

GRANT ALL PRIVILEGES ON activiti.* TO 'activiti'@'%';

ALTER USER 'activiti'@'%' IDENTIFIED WITH mysql_native_password;
alter user 'activiti'@'%' identified by 'definesys';

FLUSH   PRIVILEGES;
sql脚本方式初始化
如果是通过脚本方式，将以下四个脚本依次执行即可

activiti.mysql.create.engine.sql
activiti.mysql.create.history.sql
activiti.mysql.create.identity.sql
如果mysql的版本低于5.6.4的话，需要执行以下几个脚本，原因是由于5.6.4以下的mysql版本不支持timestamps类型。

activiti.mysql55.create.engine.sql
activiti.mysql55.create.history.sql
activiti.mysql.create.identity.sql
DbSchemaCreate方式初始化
创建maven项目，引入依赖包
<dependency>
    <groupId>org.activiti</groupId>
    <artifactId>activiti-engine</artifactId>
    <version>6.0.0</version>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>
在src/resources文件夹下创建activiti.cfg.xml文件，文件名不可以更改，参考下面配置修改
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="processEngineConfiguration" class="org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration">
        <property name="databaseType" value="mysql"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/activiti"></property>
        <property name="jdbcDriver" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUsername" value="activiti"></property>
        <property name="jdbcPassword" value="definesys"></property>
    </bean>
</beans>
创建一个包含main方法的java类
public class DBCreate {

    public static void main(String[] cmd) {
        DbSchemaCreate.main(cmd);
    }
}
运行程序DBCreate
如果执行成功，将会有28张表被创建，除了ACT_EVT_LOG表外，其他的都是业务表。

ACT_EVT_LOG
ACT_GE_BYTEARRAY
ACT_GE_PROPERTY
ACT_HI_ACTINST
ACT_HI_ATTACHMENT
ACT_HI_COMMENT
ACT_HI_DETAIL
ACT_HI_IDENTITYLINK
ACT_HI_PROCINST
ACT_HI_TASKINST
ACT_HI_VARINST
ACT_ID_GROUP
ACT_ID_INFO
ACT_ID_MEMBERSHIP
ACT_ID_USER
ACT_PROCDEF_INFO
ACT_RE_DEPLOYMENT
ACT_RE_MODEL
ACT_RE_PROCDEF
ACT_RU_DEADLETTER_JOB
ACT_RU_EVENT_SUBSCR
ACT_RU_EXECUTION
ACT_RU_IDENTITYLINK
ACT_RU_JOB
ACT_RU_SUSPENDED_JOB
ACT_RU_TASK
ACT_RU_TIMER_JOB
ACT_RU_VARIABLE
数据库表说明
所有表都是以ACT开头，并且两个字母表示模块。

ACT_RE_*: RE表示repository（仓库），存储流程静态资源，如流程模型文件等
ACT_RU_*: RU表示runtime（运行时），存储activiti运行时产生的数据，比如实例信息，用户任务信息，job信息等，另外，当流程结束后，运行时数据将会被删除，以保证数据量尽可能少，保证性能。
ACT_ID_*: ID表示identity（认证），存储认证信息，比如用户，组等。
ACT_HI_*: HI表示history（历史），存储流程历史数据，比如实例信息，变量数据等。
ACT_GE_*: GE表示general（通用），存储通用数据。





