0. 全局设置
        可以设置管理机全局默认用户
        管理机设置默认远程用户
        vim /etc/ansible/ansible.cfg
        remote_user = username
        
        可以设置不检查host key
        host_key_checking = False
        
1. /etc/ansible/hosts  表示管理的主机列表
    配置如下
          192.168.8.129
          [web]
          192.168.8.130
 使用ping 模块
 ansible all -m ping 
 all表示所有机器
 ansible web -m ping
 web表示一台机器
 
 
 2.配置inventory.cfg 文件代替hosts
 ansible -i inventory.cfg 使用该配置文件
 ansible -i inventory.cfg -m shell -a '/bin/echo "hello ansible"'
 
 
3.查看帮助
ansible --help
模块帮助
ansible-doc -s [module]


4.普通用户测试
使用普通用户执行
ansible all -m ping -o
会提示：
The authenticity of host '192.168.8.129 (192.168.8.129)' can't be established.
ECDSA key fingerprint is SHA256:KKw5CBHsSaU/+iTLjldBQH/pM3w97V+SgJFSs95vHsU.
ECDSA key fingerprint is MD5:c5:8d:ce:b4:5b:3d:be:45:03:e5:bd:7a:be:22:2a:63.
Are you sure you want to continue connecting (yes/no)? The authenticity of host '192.168.8.130 (192.168.8.130)' can't be established.
ECDSA key fingerprint is SHA256:KKw5CBHsSaU/+iTLjldBQH/pM3w97V+SgJFSs95vHsU.
ECDSA key fingerprint is MD5:c5:8d:ce:b4:5b:3d:be:45:03:e5:bd:7a:be:22:2a:63.
Are you sure you want to continue connecting (yes/no)? yes
192.168.8.129 | UNREACHABLE!: Failed to connect to the host via ssh: Warning: Permanently added '192.168.8.129' (ECDSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
192.168.8.130 | UNREACHABLE!: Failed to connect to the host via ssh: Host key verification failed.

并失败 由于SSH秘钥没推送到对端主机

到底是先有共同用户呢还是先分发秘钥呢,应该是有共同用户,然后分发秘钥.
但是如果中心机器当机了只有同一的root密码如何用新中心主机管理
测试两台机器有共同的用户test和密码test
看是否可以用ansible管理.

两台机器创建共同用户,一台管理另一台,但是从一台用test用户ssh到另一台发生密码老是不对
centos 系统可以查看 /var/log/secure日志发现
pam_unix(sshd:auth): check pass; user unknown
后来可能那台机器有问题,换了台就没问题了.

继续
设置远程登录的密码
[web]
192.168.8.130 ansible_ssh_pass='test'
[test@vm01 root]$ ansible web -m shell -a '/bin/echo "123"'
192.168.8.130 | SUCCESS | rc=0 >>
123

执行成功 说明这种方式可以,可以通过普通用户并且通过中心的方式管理集群.

试试去掉用户密码的情况如何：
[test@vm01 root]$  ansible web -m shell -a '/bin/echo "123"'
192.168.8.130 | UNREACHABLE! => {
    "changed": false, 
    "msg": "Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n", 
    "unreachable": true
}

就会出现认证失败的情况.
这个问题搞清楚了.

所有初期肯定大批量机器会有一个共同账号.比如root或者其他账号.如果是root的话可以使用ansible分发秘钥.
下面学习分发秘钥的脚本：

推送单个公钥到远程机器脚本如下
格式： ssh-copy-id -i ~/.ssh/id_rsa.pub username@[ip,hostname]
ssh-copy-id -i ~/.ssh/id_rsa.pub username@192.168.100.2

推送大批机器比较麻烦,隐藏用ansible

编辑/etc/ansible/hosts,没有则创建些文件。

格式：【主机名】 【主机地址】 【主机密码】  默认是root用户来进行的
新版的ansible(2.4) hosts有更新， 用以下方式：
[tomcat-servers]
192.168.100.1   ansible_user=tomcat  ansible_ssh_pass="test"
192.168.100.2   ansible_user=tomcat  ansible_ssh_pass="test"

批量推送公钥到远程机器需要使用authorized_key模块
authorized_key 模块的简单介绍
需要使用到的模块：authorized_key，为特定的用户账号添加或删除 SSH authorized keys

帮助文件查看
ansible-doc authorized_key
常用选项：
Options: (= is mandatory)(= 后面的参数是强制要有的)
- exclusive [default: no]： 是否移除 authorized_keys 文件中其它非指定 key
= key： SSH public key(s) 可以是字符串或 url，如：https://github.com/username.keys
- key_options [Default: None]： 附加到 key 中的字符串，该字符串会加到 key 的开头
- path [Default: (homedir)+/.ssh/authorized_keys]： 指定 authorized_keys 文件存放的位置
- state (Choices: present, absent) [Default: present]： present 添加指定 key 到 authorized_keys 文件中；absent 从 authorized_keys 文件中移除指定 key
= user： 指定修改远端服务器上哪个用户的 authorized_keys
- manage_dir (Choices: yes, no) [Default: yes]： 指定模块是否应该管理 authorized key 文件所在的目录。如果设置为 yes，模块会创建目录，以及设置一个已存在目录的拥有者和权限。如果通过 path 选项，重新指定了一个 authorized key 文件所在目录，那么应该将该选项设置为 no

生成秘钥命令
ssh-keygen -t rsa -f ~/.ssh/id_rsa
或者直接
ssh-keygen -t rsa
生成后如下：
Your identification has been saved in /home/test/.ssh/id_rsa.
Your public key has been saved in /home/test/.ssh/id_rsa.pub.

标准配置：参考https://docs.ansible.com/ansible/latest/modules/authorized_key_module.html
name: Set authorized key taken from file
  authorized_key:
    user: charlie
    state: present
    key: "{{ lookup('file', '/home/charlie/.ssh/id_rsa.pub') }}"

参考其他命令
ansible foo.example.com -m yum -a "name=httpd state=installed"

